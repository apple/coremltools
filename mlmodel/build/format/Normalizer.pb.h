// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Normalizer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Normalizer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Normalizer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Normalizer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Normalizer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace CoreML {
namespace Specification {
class Normalizer;
struct NormalizerDefaultTypeInternal;
extern NormalizerDefaultTypeInternal _Normalizer_default_instance_;
}  // namespace Specification
}  // namespace CoreML
PROTOBUF_NAMESPACE_OPEN
template<> ::CoreML::Specification::Normalizer* Arena::CreateMaybeMessage<::CoreML::Specification::Normalizer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CoreML {
namespace Specification {

enum Normalizer_NormType : int {
  Normalizer_NormType_LMax = 0,
  Normalizer_NormType_L1 = 1,
  Normalizer_NormType_L2 = 2,
  Normalizer_NormType_Normalizer_NormType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Normalizer_NormType_Normalizer_NormType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Normalizer_NormType_IsValid(int value);
constexpr Normalizer_NormType Normalizer_NormType_NormType_MIN = Normalizer_NormType_LMax;
constexpr Normalizer_NormType Normalizer_NormType_NormType_MAX = Normalizer_NormType_L2;
constexpr int Normalizer_NormType_NormType_ARRAYSIZE = Normalizer_NormType_NormType_MAX + 1;

const std::string& Normalizer_NormType_Name(Normalizer_NormType value);
template<typename T>
inline const std::string& Normalizer_NormType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Normalizer_NormType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Normalizer_NormType_Name.");
  return Normalizer_NormType_Name(static_cast<Normalizer_NormType>(enum_t_value));
}
bool Normalizer_NormType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Normalizer_NormType* value);
// ===================================================================

class Normalizer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.Normalizer) */ {
 public:
  inline Normalizer() : Normalizer(nullptr) {}
  ~Normalizer() override;
  explicit constexpr Normalizer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Normalizer(const Normalizer& from);
  Normalizer(Normalizer&& from) noexcept
    : Normalizer() {
    *this = ::std::move(from);
  }

  inline Normalizer& operator=(const Normalizer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Normalizer& operator=(Normalizer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Normalizer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Normalizer* internal_default_instance() {
    return reinterpret_cast<const Normalizer*>(
               &_Normalizer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Normalizer& a, Normalizer& b) {
    a.Swap(&b);
  }
  inline void Swap(Normalizer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Normalizer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Normalizer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Normalizer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Normalizer& from);
  void MergeFrom(const Normalizer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Normalizer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.Normalizer";
  }
  protected:
  explicit Normalizer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Normalizer_NormType NormType;
  static constexpr NormType LMax =
    Normalizer_NormType_LMax;
  static constexpr NormType L1 =
    Normalizer_NormType_L1;
  static constexpr NormType L2 =
    Normalizer_NormType_L2;
  static inline bool NormType_IsValid(int value) {
    return Normalizer_NormType_IsValid(value);
  }
  static constexpr NormType NormType_MIN =
    Normalizer_NormType_NormType_MIN;
  static constexpr NormType NormType_MAX =
    Normalizer_NormType_NormType_MAX;
  static constexpr int NormType_ARRAYSIZE =
    Normalizer_NormType_NormType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& NormType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NormType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NormType_Name.");
    return Normalizer_NormType_Name(enum_t_value);
  }
  static inline bool NormType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NormType* value) {
    return Normalizer_NormType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNormTypeFieldNumber = 1,
  };
  // .CoreML.Specification.Normalizer.NormType normType = 1;
  void clear_normtype();
  ::CoreML::Specification::Normalizer_NormType normtype() const;
  void set_normtype(::CoreML::Specification::Normalizer_NormType value);
  private:
  ::CoreML::Specification::Normalizer_NormType _internal_normtype() const;
  void _internal_set_normtype(::CoreML::Specification::Normalizer_NormType value);
  public:

  // @@protoc_insertion_point(class_scope:CoreML.Specification.Normalizer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int normtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Normalizer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Normalizer

// .CoreML.Specification.Normalizer.NormType normType = 1;
inline void Normalizer::clear_normtype() {
  normtype_ = 0;
}
inline ::CoreML::Specification::Normalizer_NormType Normalizer::_internal_normtype() const {
  return static_cast< ::CoreML::Specification::Normalizer_NormType >(normtype_);
}
inline ::CoreML::Specification::Normalizer_NormType Normalizer::normtype() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Normalizer.normType)
  return _internal_normtype();
}
inline void Normalizer::_internal_set_normtype(::CoreML::Specification::Normalizer_NormType value) {
  
  normtype_ = value;
}
inline void Normalizer::set_normtype(::CoreML::Specification::Normalizer_NormType value) {
  _internal_set_normtype(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.Normalizer.normType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CoreML::Specification::Normalizer_NormType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Normalizer_2eproto
