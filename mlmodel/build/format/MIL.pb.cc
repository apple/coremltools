// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MIL.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MIL.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace CoreML {
namespace Specification {
namespace MILSpec {
class Program_FunctionsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Program::Program_FunctionsEntry> {
} _Program_FunctionsEntry_default_instance_;
class Program_AttributesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Program::Program_AttributesEntry> {
} _Program_AttributesEntry_default_instance_;
class ProgramDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Program> {
} _Program_default_instance_;
class Function_BlockSpecializationsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Function::Function_BlockSpecializationsEntry> {
} _Function_BlockSpecializationsEntry_default_instance_;
class Function_AttributesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Function::Function_AttributesEntry> {
} _Function_AttributesEntry_default_instance_;
class FunctionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Function> {
} _Function_default_instance_;
class Block_AttributesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Block::Block_AttributesEntry> {
} _Block_AttributesEntry_default_instance_;
class BlockDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Block> {
} _Block_default_instance_;
class Argument_BindingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Argument_Binding> {
  public:
  ::google::protobuf::internal::ArenaStringPtr name_;
  const ::CoreML::Specification::MILSpec::Value* value_;
} _Argument_Binding_default_instance_;
class ArgumentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Argument> {
} _Argument_default_instance_;
class Operation_InputsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Operation::Operation_InputsEntry> {
} _Operation_InputsEntry_default_instance_;
class Operation_AttributesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Operation::Operation_AttributesEntry> {
} _Operation_AttributesEntry_default_instance_;
class OperationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Operation> {
} _Operation_default_instance_;
class NamedValueTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NamedValueType> {
} _NamedValueType_default_instance_;
class ValueTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ValueType> {
  public:
  const ::CoreML::Specification::MILSpec::TensorType* tensortype_;
  const ::CoreML::Specification::MILSpec::ListType* listtype_;
  const ::CoreML::Specification::MILSpec::TupleType* tupletype_;
  const ::CoreML::Specification::MILSpec::DictionaryType* dictionarytype_;
} _ValueType_default_instance_;
class TensorType_AttributesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorType::TensorType_AttributesEntry> {
} _TensorType_AttributesEntry_default_instance_;
class TensorTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorType> {
} _TensorType_default_instance_;
class TupleTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TupleType> {
} _TupleType_default_instance_;
class ListTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListType> {
} _ListType_default_instance_;
class DictionaryTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DictionaryType> {
} _DictionaryType_default_instance_;
class Dimension_ConstantDimensionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dimension_ConstantDimension> {
} _Dimension_ConstantDimension_default_instance_;
class Dimension_UnknownDimensionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dimension_UnknownDimension> {
} _Dimension_UnknownDimension_default_instance_;
class DimensionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dimension> {
  public:
  const ::CoreML::Specification::MILSpec::Dimension_ConstantDimension* constant_;
  const ::CoreML::Specification::MILSpec::Dimension_UnknownDimension* unknown_;
} _Dimension_default_instance_;
class Value_ImmediateValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Value_ImmediateValue> {
  public:
  const ::CoreML::Specification::MILSpec::TensorValue* tensor_;
  const ::CoreML::Specification::MILSpec::TupleValue* tuple_;
  const ::CoreML::Specification::MILSpec::ListValue* list_;
  const ::CoreML::Specification::MILSpec::DictionaryValue* dictionary_;
} _Value_ImmediateValue_default_instance_;
class Value_BlobFileValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Value_BlobFileValue> {
} _Value_BlobFileValue_default_instance_;
class ValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Value> {
  public:
  const ::CoreML::Specification::MILSpec::Value_ImmediateValue* immediatevalue_;
  const ::CoreML::Specification::MILSpec::Value_BlobFileValue* blobfilevalue_;
} _Value_default_instance_;
class TensorValue_RepeatedFloatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorValue_RepeatedFloats> {
} _TensorValue_RepeatedFloats_default_instance_;
class TensorValue_RepeatedDoublesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorValue_RepeatedDoubles> {
} _TensorValue_RepeatedDoubles_default_instance_;
class TensorValue_RepeatedIntsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorValue_RepeatedInts> {
} _TensorValue_RepeatedInts_default_instance_;
class TensorValue_RepeatedLongIntsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorValue_RepeatedLongInts> {
} _TensorValue_RepeatedLongInts_default_instance_;
class TensorValue_RepeatedBoolsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorValue_RepeatedBools> {
} _TensorValue_RepeatedBools_default_instance_;
class TensorValue_RepeatedStringsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorValue_RepeatedStrings> {
} _TensorValue_RepeatedStrings_default_instance_;
class TensorValue_RepeatedBytesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorValue_RepeatedBytes> {
} _TensorValue_RepeatedBytes_default_instance_;
class TensorValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorValue> {
  public:
  const ::CoreML::Specification::MILSpec::TensorValue_RepeatedFloats* floats_;
  const ::CoreML::Specification::MILSpec::TensorValue_RepeatedInts* ints_;
  const ::CoreML::Specification::MILSpec::TensorValue_RepeatedBools* bools_;
  const ::CoreML::Specification::MILSpec::TensorValue_RepeatedStrings* strings_;
  const ::CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts* longints_;
  const ::CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles* doubles_;
  const ::CoreML::Specification::MILSpec::TensorValue_RepeatedBytes* bytes_;
} _TensorValue_default_instance_;
class TupleValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TupleValue> {
} _TupleValue_default_instance_;
class ListValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListValue> {
} _ListValue_default_instance_;
class DictionaryValue_KeyValuePairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DictionaryValue_KeyValuePair> {
} _DictionaryValue_KeyValuePair_default_instance_;
class DictionaryValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DictionaryValue> {
} _DictionaryValue_default_instance_;

namespace protobuf_MIL_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Program_default_instance_.Shutdown();
  _Function_default_instance_.Shutdown();
  _Block_default_instance_.Shutdown();
  _Argument_Binding_default_instance_.Shutdown();
  _Argument_default_instance_.Shutdown();
  _Operation_default_instance_.Shutdown();
  _NamedValueType_default_instance_.Shutdown();
  _ValueType_default_instance_.Shutdown();
  _TensorType_default_instance_.Shutdown();
  _TupleType_default_instance_.Shutdown();
  _ListType_default_instance_.Shutdown();
  _DictionaryType_default_instance_.Shutdown();
  _Dimension_ConstantDimension_default_instance_.Shutdown();
  _Dimension_UnknownDimension_default_instance_.Shutdown();
  _Dimension_default_instance_.Shutdown();
  _Value_ImmediateValue_default_instance_.Shutdown();
  _Value_BlobFileValue_default_instance_.Shutdown();
  _Value_default_instance_.Shutdown();
  _TensorValue_RepeatedFloats_default_instance_.Shutdown();
  _TensorValue_RepeatedDoubles_default_instance_.Shutdown();
  _TensorValue_RepeatedInts_default_instance_.Shutdown();
  _TensorValue_RepeatedLongInts_default_instance_.Shutdown();
  _TensorValue_RepeatedBools_default_instance_.Shutdown();
  _TensorValue_RepeatedStrings_default_instance_.Shutdown();
  _TensorValue_RepeatedBytes_default_instance_.Shutdown();
  _TensorValue_default_instance_.Shutdown();
  _TupleValue_default_instance_.Shutdown();
  _ListValue_default_instance_.Shutdown();
  _DictionaryValue_KeyValuePair_default_instance_.Shutdown();
  _DictionaryValue_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Program_FunctionsEntry_default_instance_.DefaultConstruct();
  _Program_AttributesEntry_default_instance_.DefaultConstruct();
  _Program_default_instance_.DefaultConstruct();
  _Function_BlockSpecializationsEntry_default_instance_.DefaultConstruct();
  _Function_AttributesEntry_default_instance_.DefaultConstruct();
  _Function_default_instance_.DefaultConstruct();
  _Block_AttributesEntry_default_instance_.DefaultConstruct();
  _Block_default_instance_.DefaultConstruct();
  _Argument_Binding_default_instance_.DefaultConstruct();
  _Argument_default_instance_.DefaultConstruct();
  _Operation_InputsEntry_default_instance_.DefaultConstruct();
  _Operation_AttributesEntry_default_instance_.DefaultConstruct();
  _Operation_default_instance_.DefaultConstruct();
  _NamedValueType_default_instance_.DefaultConstruct();
  _ValueType_default_instance_.DefaultConstruct();
  _TensorType_AttributesEntry_default_instance_.DefaultConstruct();
  _TensorType_default_instance_.DefaultConstruct();
  _TupleType_default_instance_.DefaultConstruct();
  _ListType_default_instance_.DefaultConstruct();
  _DictionaryType_default_instance_.DefaultConstruct();
  _Dimension_ConstantDimension_default_instance_.DefaultConstruct();
  _Dimension_UnknownDimension_default_instance_.DefaultConstruct();
  _Dimension_default_instance_.DefaultConstruct();
  _Value_ImmediateValue_default_instance_.DefaultConstruct();
  _Value_BlobFileValue_default_instance_.DefaultConstruct();
  _Value_default_instance_.DefaultConstruct();
  _TensorValue_RepeatedFloats_default_instance_.DefaultConstruct();
  _TensorValue_RepeatedDoubles_default_instance_.DefaultConstruct();
  _TensorValue_RepeatedInts_default_instance_.DefaultConstruct();
  _TensorValue_RepeatedLongInts_default_instance_.DefaultConstruct();
  _TensorValue_RepeatedBools_default_instance_.DefaultConstruct();
  _TensorValue_RepeatedStrings_default_instance_.DefaultConstruct();
  _TensorValue_RepeatedBytes_default_instance_.DefaultConstruct();
  _TensorValue_default_instance_.DefaultConstruct();
  _TupleValue_default_instance_.DefaultConstruct();
  _ListValue_default_instance_.DefaultConstruct();
  _DictionaryValue_KeyValuePair_default_instance_.DefaultConstruct();
  _DictionaryValue_default_instance_.DefaultConstruct();
  _Program_FunctionsEntry_default_instance_.get_mutable()->set_default_instance(_Program_FunctionsEntry_default_instance_.get_mutable());
  _Program_FunctionsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _Program_AttributesEntry_default_instance_.get_mutable()->set_default_instance(_Program_AttributesEntry_default_instance_.get_mutable());
  _Program_AttributesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _Function_BlockSpecializationsEntry_default_instance_.get_mutable()->set_default_instance(_Function_BlockSpecializationsEntry_default_instance_.get_mutable());
  _Function_BlockSpecializationsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _Function_AttributesEntry_default_instance_.get_mutable()->set_default_instance(_Function_AttributesEntry_default_instance_.get_mutable());
  _Function_AttributesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _Block_AttributesEntry_default_instance_.get_mutable()->set_default_instance(_Block_AttributesEntry_default_instance_.get_mutable());
  _Block_AttributesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _Operation_InputsEntry_default_instance_.get_mutable()->set_default_instance(_Operation_InputsEntry_default_instance_.get_mutable());
  _Operation_InputsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _Operation_AttributesEntry_default_instance_.get_mutable()->set_default_instance(_Operation_AttributesEntry_default_instance_.get_mutable());
  _Operation_AttributesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _NamedValueType_default_instance_.get_mutable()->type_ = const_cast< ::CoreML::Specification::MILSpec::ValueType*>(
      ::CoreML::Specification::MILSpec::ValueType::internal_default_instance());
  _TensorType_AttributesEntry_default_instance_.get_mutable()->set_default_instance(_TensorType_AttributesEntry_default_instance_.get_mutable());
  _TensorType_AttributesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _ListType_default_instance_.get_mutable()->type_ = const_cast< ::CoreML::Specification::MILSpec::ValueType*>(
      ::CoreML::Specification::MILSpec::ValueType::internal_default_instance());
  _ListType_default_instance_.get_mutable()->length_ = const_cast< ::CoreML::Specification::MILSpec::Dimension*>(
      ::CoreML::Specification::MILSpec::Dimension::internal_default_instance());
  _DictionaryType_default_instance_.get_mutable()->keytype_ = const_cast< ::CoreML::Specification::MILSpec::ValueType*>(
      ::CoreML::Specification::MILSpec::ValueType::internal_default_instance());
  _DictionaryType_default_instance_.get_mutable()->valuetype_ = const_cast< ::CoreML::Specification::MILSpec::ValueType*>(
      ::CoreML::Specification::MILSpec::ValueType::internal_default_instance());
  _Value_default_instance_.get_mutable()->type_ = const_cast< ::CoreML::Specification::MILSpec::ValueType*>(
      ::CoreML::Specification::MILSpec::ValueType::internal_default_instance());
  _DictionaryValue_KeyValuePair_default_instance_.get_mutable()->key_ = const_cast< ::CoreML::Specification::MILSpec::Value*>(
      ::CoreML::Specification::MILSpec::Value::internal_default_instance());
  _DictionaryValue_KeyValuePair_default_instance_.get_mutable()->value_ = const_cast< ::CoreML::Specification::MILSpec::Value*>(
      ::CoreML::Specification::MILSpec::Value::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_MIL_2eproto

bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 10:
    case 11:
    case 12:
    case 21:
    case 22:
    case 23:
    case 24:
    case 31:
    case 32:
    case 33:
    case 34:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Program::kVersionFieldNumber;
const int Program::kFunctionsFieldNumber;
const int Program::kDocStringFieldNumber;
const int Program::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Program::Program()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.Program)
}
Program::Program(const Program& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  functions_.MergeFrom(from.functions_);
  attributes_.MergeFrom(from.attributes_);
  docstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.docstring().size() > 0) {
    docstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docstring_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.Program)
}

void Program::SharedCtor() {
  docstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Program::~Program() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.Program)
  SharedDtor();
}

void Program::SharedDtor() {
  docstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Program::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Program& Program::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

Program* Program::New(::google::protobuf::Arena* arena) const {
  Program* n = new Program;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Program::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.Program)
  functions_.Clear();
  attributes_.Clear();
  docstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_LONGLONG(0);
}

bool Program::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.Program)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .CoreML.Specification.MILSpec.Function> functions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          Program_FunctionsEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              Program_FunctionsEntry,
              ::std::string, ::CoreML::Specification::MILSpec::Function,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Function > > parser(&functions_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.Program.FunctionsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string docString = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docstring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docstring().data(), this->docstring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.Program.docString"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          Program_AttributesEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              Program_AttributesEntry,
              ::std::string, ::CoreML::Specification::MILSpec::Value,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value > > parser(&attributes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.Program.AttributesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.Program)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.Program)
  return false;
#undef DO_
}

void Program::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.Program)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->version(), output);
  }

  // map<string, .CoreML.Specification.MILSpec.Function> functions = 2;
  if (!this->functions().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Function >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CoreML.Specification.MILSpec.Program.FunctionsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->functions().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->functions().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Function >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Function >::const_iterator
          it = this->functions().begin();
          it != this->functions().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Program_FunctionsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(functions_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Program_FunctionsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Function >::const_iterator
          it = this->functions().begin();
          it != this->functions().end(); ++it) {
        entry.reset(functions_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string docString = 3;
  if (this->docstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docstring().data(), this->docstring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CoreML.Specification.MILSpec.Program.docString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->docstring(), output);
  }

  // map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CoreML.Specification.MILSpec.Program.AttributesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Program_AttributesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Program_AttributesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.Program)
}

size_t Program::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.Program)
  size_t total_size = 0;

  // map<string, .CoreML.Specification.MILSpec.Function> functions = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->functions_size());
  {
    ::google::protobuf::scoped_ptr<Program_FunctionsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Function >::const_iterator
        it = this->functions().begin();
        it != this->functions().end(); ++it) {
      entry.reset(functions_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attributes_size());
  {
    ::google::protobuf::scoped_ptr<Program_AttributesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_iterator
        it = this->attributes().begin();
        it != this->attributes().end(); ++it) {
      entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string docString = 3;
  if (this->docstring().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docstring());
  }

  // int64 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Program::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Program*>(&from));
}

void Program::MergeFrom(const Program& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.Program)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  functions_.MergeFrom(from.functions_);
  attributes_.MergeFrom(from.attributes_);
  if (from.docstring().size() > 0) {

    docstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docstring_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void Program::CopyFrom(const Program& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.Program)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Program::IsInitialized() const {
  return true;
}

void Program::Swap(Program* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Program::InternalSwap(Program* other) {
  functions_.Swap(&other->functions_);
  attributes_.Swap(&other->attributes_);
  docstring_.Swap(&other->docstring_);
  std::swap(version_, other->version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Program::GetTypeName() const {
  return "CoreML.Specification.MILSpec.Program";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Program

// int64 version = 1;
void Program::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Program::version() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Program.version)
  return version_;
}
void Program::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.Program.version)
}

// map<string, .CoreML.Specification.MILSpec.Function> functions = 2;
int Program::functions_size() const {
  return functions_.size();
}
void Program::clear_functions() {
  functions_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Function >&
Program::functions() const {
  // @@protoc_insertion_point(field_map:CoreML.Specification.MILSpec.Program.functions)
  return functions_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Function >*
Program::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_map:CoreML.Specification.MILSpec.Program.functions)
  return functions_.MutableMap();
}

// string docString = 3;
void Program::clear_docstring() {
  docstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Program::docstring() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Program.docString)
  return docstring_.GetNoArena();
}
void Program::set_docstring(const ::std::string& value) {
  
  docstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.Program.docString)
}
#if LANG_CXX11
void Program::set_docstring(::std::string&& value) {
  
  docstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.MILSpec.Program.docString)
}
#endif
void Program::set_docstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  docstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.MILSpec.Program.docString)
}
void Program::set_docstring(const char* value, size_t size) {
  
  docstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.MILSpec.Program.docString)
}
::std::string* Program::mutable_docstring() {
  
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Program.docString)
  return docstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Program::release_docstring() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Program.docString)
  
  return docstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Program::set_allocated_docstring(::std::string* docstring) {
  if (docstring != NULL) {
    
  } else {
    
  }
  docstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docstring);
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Program.docString)
}

// map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
int Program::attributes_size() const {
  return attributes_.size();
}
void Program::clear_attributes() {
  attributes_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >&
Program::attributes() const {
  // @@protoc_insertion_point(field_map:CoreML.Specification.MILSpec.Program.attributes)
  return attributes_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >*
Program::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:CoreML.Specification.MILSpec.Program.attributes)
  return attributes_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Function::kInputsFieldNumber;
const int Function::kOpsetFieldNumber;
const int Function::kBlockSpecializationsFieldNumber;
const int Function::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Function::Function()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.Function)
}
Function::Function(const Function& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      inputs_(from.inputs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_specializations_.MergeFrom(from.block_specializations_);
  attributes_.MergeFrom(from.attributes_);
  opset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.opset().size() > 0) {
    opset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opset_);
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.Function)
}

void Function::SharedCtor() {
  opset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Function::~Function() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.Function)
  SharedDtor();
}

void Function::SharedDtor() {
  opset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Function::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Function& Function::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

Function* Function::New(::google::protobuf::Arena* arena) const {
  Function* n = new Function;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Function::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.Function)
  inputs_.Clear();
  block_specializations_.Clear();
  attributes_.Clear();
  opset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Function::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.Function)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CoreML.Specification.MILSpec.NamedValueType inputs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string opset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opset().data(), this->opset().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.Function.opset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .CoreML.Specification.MILSpec.Block> block_specializations = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          Function_BlockSpecializationsEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              Function_BlockSpecializationsEntry,
              ::std::string, ::CoreML::Specification::MILSpec::Block,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Block > > parser(&block_specializations_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.Function.BlockSpecializationsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          Function_AttributesEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              Function_AttributesEntry,
              ::std::string, ::CoreML::Specification::MILSpec::Value,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value > > parser(&attributes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.Function.AttributesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.Function)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.Function)
  return false;
#undef DO_
}

void Function::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.Function)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CoreML.Specification.MILSpec.NamedValueType inputs = 1;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->inputs(i), output);
  }

  // string opset = 2;
  if (this->opset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opset().data(), this->opset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CoreML.Specification.MILSpec.Function.opset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->opset(), output);
  }

  // map<string, .CoreML.Specification.MILSpec.Block> block_specializations = 3;
  if (!this->block_specializations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Block >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CoreML.Specification.MILSpec.Function.BlockSpecializationsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->block_specializations().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->block_specializations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Block >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Block >::const_iterator
          it = this->block_specializations().begin();
          it != this->block_specializations().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Function_BlockSpecializationsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(block_specializations_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Function_BlockSpecializationsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Block >::const_iterator
          it = this->block_specializations().begin();
          it != this->block_specializations().end(); ++it) {
        entry.reset(block_specializations_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CoreML.Specification.MILSpec.Function.AttributesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Function_AttributesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Function_AttributesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.Function)
}

size_t Function::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.Function)
  size_t total_size = 0;

  // repeated .CoreML.Specification.MILSpec.NamedValueType inputs = 1;
  {
    unsigned int count = this->inputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputs(i));
    }
  }

  // map<string, .CoreML.Specification.MILSpec.Block> block_specializations = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->block_specializations_size());
  {
    ::google::protobuf::scoped_ptr<Function_BlockSpecializationsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Block >::const_iterator
        it = this->block_specializations().begin();
        it != this->block_specializations().end(); ++it) {
      entry.reset(block_specializations_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attributes_size());
  {
    ::google::protobuf::scoped_ptr<Function_AttributesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_iterator
        it = this->attributes().begin();
        it != this->attributes().end(); ++it) {
      entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string opset = 2;
  if (this->opset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->opset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Function::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Function*>(&from));
}

void Function::MergeFrom(const Function& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.Function)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  block_specializations_.MergeFrom(from.block_specializations_);
  attributes_.MergeFrom(from.attributes_);
  if (from.opset().size() > 0) {

    opset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opset_);
  }
}

void Function::CopyFrom(const Function& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function::IsInitialized() const {
  return true;
}

void Function::Swap(Function* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Function::InternalSwap(Function* other) {
  inputs_.InternalSwap(&other->inputs_);
  block_specializations_.Swap(&other->block_specializations_);
  attributes_.Swap(&other->attributes_);
  opset_.Swap(&other->opset_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Function::GetTypeName() const {
  return "CoreML.Specification.MILSpec.Function";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Function

// repeated .CoreML.Specification.MILSpec.NamedValueType inputs = 1;
int Function::inputs_size() const {
  return inputs_.size();
}
void Function::clear_inputs() {
  inputs_.Clear();
}
const ::CoreML::Specification::MILSpec::NamedValueType& Function::inputs(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Function.inputs)
  return inputs_.Get(index);
}
::CoreML::Specification::MILSpec::NamedValueType* Function::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Function.inputs)
  return inputs_.Mutable(index);
}
::CoreML::Specification::MILSpec::NamedValueType* Function::add_inputs() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.Function.inputs)
  return inputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::NamedValueType >*
Function::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.Function.inputs)
  return &inputs_;
}
const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::NamedValueType >&
Function::inputs() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.Function.inputs)
  return inputs_;
}

// string opset = 2;
void Function::clear_opset() {
  opset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Function::opset() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Function.opset)
  return opset_.GetNoArena();
}
void Function::set_opset(const ::std::string& value) {
  
  opset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.Function.opset)
}
#if LANG_CXX11
void Function::set_opset(::std::string&& value) {
  
  opset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.MILSpec.Function.opset)
}
#endif
void Function::set_opset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  opset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.MILSpec.Function.opset)
}
void Function::set_opset(const char* value, size_t size) {
  
  opset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.MILSpec.Function.opset)
}
::std::string* Function::mutable_opset() {
  
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Function.opset)
  return opset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Function::release_opset() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Function.opset)
  
  return opset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Function::set_allocated_opset(::std::string* opset) {
  if (opset != NULL) {
    
  } else {
    
  }
  opset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opset);
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Function.opset)
}

// map<string, .CoreML.Specification.MILSpec.Block> block_specializations = 3;
int Function::block_specializations_size() const {
  return block_specializations_.size();
}
void Function::clear_block_specializations() {
  block_specializations_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Block >&
Function::block_specializations() const {
  // @@protoc_insertion_point(field_map:CoreML.Specification.MILSpec.Function.block_specializations)
  return block_specializations_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Block >*
Function::mutable_block_specializations() {
  // @@protoc_insertion_point(field_mutable_map:CoreML.Specification.MILSpec.Function.block_specializations)
  return block_specializations_.MutableMap();
}

// map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
int Function::attributes_size() const {
  return attributes_.size();
}
void Function::clear_attributes() {
  attributes_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >&
Function::attributes() const {
  // @@protoc_insertion_point(field_map:CoreML.Specification.MILSpec.Function.attributes)
  return attributes_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >*
Function::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:CoreML.Specification.MILSpec.Function.attributes)
  return attributes_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Block::kInputsFieldNumber;
const int Block::kOutputsFieldNumber;
const int Block::kOperationsFieldNumber;
const int Block::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Block::Block()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.Block)
}
Block::Block(const Block& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      inputs_(from.inputs_),
      outputs_(from.outputs_),
      operations_(from.operations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attributes_.MergeFrom(from.attributes_);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.Block)
}

void Block::SharedCtor() {
  _cached_size_ = 0;
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.Block)
  SharedDtor();
}

void Block::SharedDtor() {
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Block& Block::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

Block* Block::New(::google::protobuf::Arena* arena) const {
  Block* n = new Block;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.Block)
  inputs_.Clear();
  outputs_.Clear();
  operations_.Clear();
  attributes_.Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.Block)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CoreML.Specification.MILSpec.NamedValueType inputs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string outputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_outputs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->outputs(this->outputs_size() - 1).data(),
            this->outputs(this->outputs_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.Block.outputs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CoreML.Specification.MILSpec.Operation operations = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          Block_AttributesEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              Block_AttributesEntry,
              ::std::string, ::CoreML::Specification::MILSpec::Value,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value > > parser(&attributes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.Block.AttributesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.Block)
  return false;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CoreML.Specification.MILSpec.NamedValueType inputs = 1;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->inputs(i), output);
  }

  // repeated string outputs = 2;
  for (int i = 0, n = this->outputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->outputs(i).data(), this->outputs(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CoreML.Specification.MILSpec.Block.outputs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->outputs(i), output);
  }

  // repeated .CoreML.Specification.MILSpec.Operation operations = 3;
  for (unsigned int i = 0, n = this->operations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->operations(i), output);
  }

  // map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CoreML.Specification.MILSpec.Block.AttributesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Block_AttributesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Block_AttributesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.Block)
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.Block)
  size_t total_size = 0;

  // repeated .CoreML.Specification.MILSpec.NamedValueType inputs = 1;
  {
    unsigned int count = this->inputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputs(i));
    }
  }

  // repeated string outputs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->outputs_size());
  for (int i = 0, n = this->outputs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->outputs(i));
  }

  // repeated .CoreML.Specification.MILSpec.Operation operations = 3;
  {
    unsigned int count = this->operations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operations(i));
    }
  }

  // map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attributes_size());
  {
    ::google::protobuf::scoped_ptr<Block_AttributesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_iterator
        it = this->attributes().begin();
        it != this->attributes().end(); ++it) {
      entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Block*>(&from));
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  operations_.MergeFrom(from.operations_);
  attributes_.MergeFrom(from.attributes_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::Swap(Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Block::InternalSwap(Block* other) {
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  operations_.InternalSwap(&other->operations_);
  attributes_.Swap(&other->attributes_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Block::GetTypeName() const {
  return "CoreML.Specification.MILSpec.Block";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Block

// repeated .CoreML.Specification.MILSpec.NamedValueType inputs = 1;
int Block::inputs_size() const {
  return inputs_.size();
}
void Block::clear_inputs() {
  inputs_.Clear();
}
const ::CoreML::Specification::MILSpec::NamedValueType& Block::inputs(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Block.inputs)
  return inputs_.Get(index);
}
::CoreML::Specification::MILSpec::NamedValueType* Block::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Block.inputs)
  return inputs_.Mutable(index);
}
::CoreML::Specification::MILSpec::NamedValueType* Block::add_inputs() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.Block.inputs)
  return inputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::NamedValueType >*
Block::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.Block.inputs)
  return &inputs_;
}
const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::NamedValueType >&
Block::inputs() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.Block.inputs)
  return inputs_;
}

// repeated string outputs = 2;
int Block::outputs_size() const {
  return outputs_.size();
}
void Block::clear_outputs() {
  outputs_.Clear();
}
const ::std::string& Block::outputs(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Block.outputs)
  return outputs_.Get(index);
}
::std::string* Block::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Block.outputs)
  return outputs_.Mutable(index);
}
void Block::set_outputs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.Block.outputs)
  outputs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Block::set_outputs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.Block.outputs)
  outputs_.Mutable(index)->assign(std::move(value));
}
#endif
void Block::set_outputs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  outputs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.MILSpec.Block.outputs)
}
void Block::set_outputs(int index, const char* value, size_t size) {
  outputs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.MILSpec.Block.outputs)
}
::std::string* Block::add_outputs() {
  // @@protoc_insertion_point(field_add_mutable:CoreML.Specification.MILSpec.Block.outputs)
  return outputs_.Add();
}
void Block::add_outputs(const ::std::string& value) {
  outputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.Block.outputs)
}
#if LANG_CXX11
void Block::add_outputs(::std::string&& value) {
  outputs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.Block.outputs)
}
#endif
void Block::add_outputs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  outputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CoreML.Specification.MILSpec.Block.outputs)
}
void Block::add_outputs(const char* value, size_t size) {
  outputs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CoreML.Specification.MILSpec.Block.outputs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Block::outputs() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.Block.outputs)
  return outputs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Block::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.Block.outputs)
  return &outputs_;
}

// repeated .CoreML.Specification.MILSpec.Operation operations = 3;
int Block::operations_size() const {
  return operations_.size();
}
void Block::clear_operations() {
  operations_.Clear();
}
const ::CoreML::Specification::MILSpec::Operation& Block::operations(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Block.operations)
  return operations_.Get(index);
}
::CoreML::Specification::MILSpec::Operation* Block::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Block.operations)
  return operations_.Mutable(index);
}
::CoreML::Specification::MILSpec::Operation* Block::add_operations() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.Block.operations)
  return operations_.Add();
}
::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::Operation >*
Block::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.Block.operations)
  return &operations_;
}
const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::Operation >&
Block::operations() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.Block.operations)
  return operations_;
}

// map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
int Block::attributes_size() const {
  return attributes_.size();
}
void Block::clear_attributes() {
  attributes_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >&
Block::attributes() const {
  // @@protoc_insertion_point(field_map:CoreML.Specification.MILSpec.Block.attributes)
  return attributes_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >*
Block::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:CoreML.Specification.MILSpec.Block.attributes)
  return attributes_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Argument_Binding::kNameFieldNumber;
const int Argument_Binding::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Argument_Binding::Argument_Binding()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.Argument.Binding)
}
Argument_Binding::Argument_Binding(const Argument_Binding& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_binding();
  switch (from.binding_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kValue: {
      mutable_value()->::CoreML::Specification::MILSpec::Value::MergeFrom(from.value());
      break;
    }
    case BINDING_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.Argument.Binding)
}

void Argument_Binding::SharedCtor() {
  clear_has_binding();
  _cached_size_ = 0;
}

Argument_Binding::~Argument_Binding() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.Argument.Binding)
  SharedDtor();
}

void Argument_Binding::SharedDtor() {
  if (has_binding()) {
    clear_binding();
  }
}

void Argument_Binding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Argument_Binding& Argument_Binding::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

Argument_Binding* Argument_Binding::New(::google::protobuf::Arena* arena) const {
  Argument_Binding* n = new Argument_Binding;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Argument_Binding::clear_binding() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.MILSpec.Argument.Binding)
  switch (binding_case()) {
    case kName: {
      binding_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kValue: {
      delete binding_.value_;
      break;
    }
    case BINDING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BINDING_NOT_SET;
}


void Argument_Binding::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.Argument.Binding)
  clear_binding();
}

bool Argument_Binding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.Argument.Binding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.Argument.Binding.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.Value value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.Argument.Binding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.Argument.Binding)
  return false;
#undef DO_
}

void Argument_Binding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.Argument.Binding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CoreML.Specification.MILSpec.Argument.Binding.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .CoreML.Specification.MILSpec.Value value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *binding_.value_, output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.Argument.Binding)
}

size_t Argument_Binding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.Argument.Binding)
  size_t total_size = 0;

  switch (binding_case()) {
    // string name = 1;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    // .CoreML.Specification.MILSpec.Value value = 2;
    case kValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *binding_.value_);
      break;
    }
    case BINDING_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Argument_Binding::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Argument_Binding*>(&from));
}

void Argument_Binding::MergeFrom(const Argument_Binding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.Argument.Binding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.binding_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kValue: {
      mutable_value()->::CoreML::Specification::MILSpec::Value::MergeFrom(from.value());
      break;
    }
    case BINDING_NOT_SET: {
      break;
    }
  }
}

void Argument_Binding::CopyFrom(const Argument_Binding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.Argument.Binding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Argument_Binding::IsInitialized() const {
  return true;
}

void Argument_Binding::Swap(Argument_Binding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Argument_Binding::InternalSwap(Argument_Binding* other) {
  std::swap(binding_, other->binding_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Argument_Binding::GetTypeName() const {
  return "CoreML.Specification.MILSpec.Argument.Binding";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Argument_Binding

// string name = 1;
bool Argument_Binding::has_name() const {
  return binding_case() == kName;
}
void Argument_Binding::set_has_name() {
  _oneof_case_[0] = kName;
}
void Argument_Binding::clear_name() {
  if (has_name()) {
    binding_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_binding();
  }
}
const ::std::string& Argument_Binding::name() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Argument.Binding.name)
  if (has_name()) {
    return binding_.name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Argument_Binding::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.Argument.Binding.name)
  if (!has_name()) {
    clear_binding();
    set_has_name();
    binding_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  binding_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.Argument.Binding.name)
}
#if LANG_CXX11
void Argument_Binding::set_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.Argument.Binding.name)
  if (!has_name()) {
    clear_binding();
    set_has_name();
    binding_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  binding_.name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.MILSpec.Argument.Binding.name)
}
#endif
void Argument_Binding::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_name()) {
    clear_binding();
    set_has_name();
    binding_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  binding_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.MILSpec.Argument.Binding.name)
}
void Argument_Binding::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_binding();
    set_has_name();
    binding_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  binding_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.MILSpec.Argument.Binding.name)
}
::std::string* Argument_Binding::mutable_name() {
  if (!has_name()) {
    clear_binding();
    set_has_name();
    binding_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Argument.Binding.name)
  return binding_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Argument_Binding::release_name() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Argument.Binding.name)
  if (has_name()) {
    clear_has_binding();
    return binding_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Argument_Binding::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    binding_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_binding();
  if (name != NULL) {
    set_has_name();
    binding_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Argument.Binding.name)
}

// .CoreML.Specification.MILSpec.Value value = 2;
bool Argument_Binding::has_value() const {
  return binding_case() == kValue;
}
void Argument_Binding::set_has_value() {
  _oneof_case_[0] = kValue;
}
void Argument_Binding::clear_value() {
  if (has_value()) {
    delete binding_.value_;
    clear_has_binding();
  }
}
 const ::CoreML::Specification::MILSpec::Value& Argument_Binding::value() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Argument.Binding.value)
  return has_value()
      ? *binding_.value_
      : ::CoreML::Specification::MILSpec::Value::default_instance();
}
::CoreML::Specification::MILSpec::Value* Argument_Binding::mutable_value() {
  if (!has_value()) {
    clear_binding();
    set_has_value();
    binding_.value_ = new ::CoreML::Specification::MILSpec::Value;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Argument.Binding.value)
  return binding_.value_;
}
::CoreML::Specification::MILSpec::Value* Argument_Binding::release_value() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Argument.Binding.value)
  if (has_value()) {
    clear_has_binding();
    ::CoreML::Specification::MILSpec::Value* temp = binding_.value_;
    binding_.value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Argument_Binding::set_allocated_value(::CoreML::Specification::MILSpec::Value* value) {
  clear_binding();
  if (value) {
    set_has_value();
    binding_.value_ = value;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Argument.Binding.value)
}

bool Argument_Binding::has_binding() const {
  return binding_case() != BINDING_NOT_SET;
}
void Argument_Binding::clear_has_binding() {
  _oneof_case_[0] = BINDING_NOT_SET;
}
Argument_Binding::BindingCase Argument_Binding::binding_case() const {
  return Argument_Binding::BindingCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Argument::kArgumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Argument::Argument()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.Argument)
}
Argument::Argument(const Argument& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      arguments_(from.arguments_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.Argument)
}

void Argument::SharedCtor() {
  _cached_size_ = 0;
}

Argument::~Argument() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.Argument)
  SharedDtor();
}

void Argument::SharedDtor() {
}

void Argument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Argument& Argument::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

Argument* Argument::New(::google::protobuf::Arena* arena) const {
  Argument* n = new Argument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Argument::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.Argument)
  arguments_.Clear();
}

bool Argument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.Argument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CoreML.Specification.MILSpec.Argument.Binding arguments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.Argument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.Argument)
  return false;
#undef DO_
}

void Argument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.Argument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CoreML.Specification.MILSpec.Argument.Binding arguments = 1;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->arguments(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.Argument)
}

size_t Argument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.Argument)
  size_t total_size = 0;

  // repeated .CoreML.Specification.MILSpec.Argument.Binding arguments = 1;
  {
    unsigned int count = this->arguments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arguments(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Argument::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Argument*>(&from));
}

void Argument::MergeFrom(const Argument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.Argument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
}

void Argument::CopyFrom(const Argument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.Argument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Argument::IsInitialized() const {
  return true;
}

void Argument::Swap(Argument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Argument::InternalSwap(Argument* other) {
  arguments_.InternalSwap(&other->arguments_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Argument::GetTypeName() const {
  return "CoreML.Specification.MILSpec.Argument";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Argument

// repeated .CoreML.Specification.MILSpec.Argument.Binding arguments = 1;
int Argument::arguments_size() const {
  return arguments_.size();
}
void Argument::clear_arguments() {
  arguments_.Clear();
}
const ::CoreML::Specification::MILSpec::Argument_Binding& Argument::arguments(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Argument.arguments)
  return arguments_.Get(index);
}
::CoreML::Specification::MILSpec::Argument_Binding* Argument::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Argument.arguments)
  return arguments_.Mutable(index);
}
::CoreML::Specification::MILSpec::Argument_Binding* Argument::add_arguments() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.Argument.arguments)
  return arguments_.Add();
}
::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::Argument_Binding >*
Argument::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.Argument.arguments)
  return &arguments_;
}
const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::Argument_Binding >&
Argument::arguments() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.Argument.arguments)
  return arguments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Operation::kTypeFieldNumber;
const int Operation::kInputsFieldNumber;
const int Operation::kOutputsFieldNumber;
const int Operation::kBlocksFieldNumber;
const int Operation::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Operation::Operation()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.Operation)
}
Operation::Operation(const Operation& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      outputs_(from.outputs_),
      blocks_(from.blocks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inputs_.MergeFrom(from.inputs_);
  attributes_.MergeFrom(from.attributes_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.Operation)
}

void Operation::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.Operation)
  SharedDtor();
}

void Operation::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Operation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Operation& Operation::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

Operation* Operation::New(::google::protobuf::Arena* arena) const {
  Operation* n = new Operation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.Operation)
  inputs_.Clear();
  outputs_.Clear();
  blocks_.Clear();
  attributes_.Clear();
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Operation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.Operation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.Operation.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .CoreML.Specification.MILSpec.Argument> inputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          Operation_InputsEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              Operation_InputsEntry,
              ::std::string, ::CoreML::Specification::MILSpec::Argument,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Argument > > parser(&inputs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.Operation.InputsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CoreML.Specification.MILSpec.NamedValueType outputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CoreML.Specification.MILSpec.Block blocks = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .CoreML.Specification.MILSpec.Value> attributes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          Operation_AttributesEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              Operation_AttributesEntry,
              ::std::string, ::CoreML::Specification::MILSpec::Value,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value > > parser(&attributes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.Operation.AttributesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.Operation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.Operation)
  return false;
#undef DO_
}

void Operation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.Operation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CoreML.Specification.MILSpec.Operation.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // map<string, .CoreML.Specification.MILSpec.Argument> inputs = 2;
  if (!this->inputs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Argument >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CoreML.Specification.MILSpec.Operation.InputsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->inputs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->inputs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Argument >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Argument >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Operation_InputsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(inputs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Operation_InputsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Argument >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it) {
        entry.reset(inputs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .CoreML.Specification.MILSpec.NamedValueType outputs = 3;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->outputs(i), output);
  }

  // repeated .CoreML.Specification.MILSpec.Block blocks = 4;
  for (unsigned int i = 0, n = this->blocks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->blocks(i), output);
  }

  // map<string, .CoreML.Specification.MILSpec.Value> attributes = 5;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CoreML.Specification.MILSpec.Operation.AttributesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Operation_AttributesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Operation_AttributesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.Operation)
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.Operation)
  size_t total_size = 0;

  // map<string, .CoreML.Specification.MILSpec.Argument> inputs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->inputs_size());
  {
    ::google::protobuf::scoped_ptr<Operation_InputsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Argument >::const_iterator
        it = this->inputs().begin();
        it != this->inputs().end(); ++it) {
      entry.reset(inputs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .CoreML.Specification.MILSpec.NamedValueType outputs = 3;
  {
    unsigned int count = this->outputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outputs(i));
    }
  }

  // repeated .CoreML.Specification.MILSpec.Block blocks = 4;
  {
    unsigned int count = this->blocks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blocks(i));
    }
  }

  // map<string, .CoreML.Specification.MILSpec.Value> attributes = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attributes_size());
  {
    ::google::protobuf::scoped_ptr<Operation_AttributesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_iterator
        it = this->attributes().begin();
        it != this->attributes().end(); ++it) {
      entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Operation*>(&from));
}

void Operation::MergeFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  blocks_.MergeFrom(from.blocks_);
  attributes_.MergeFrom(from.attributes_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::Swap(Operation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Operation::InternalSwap(Operation* other) {
  inputs_.Swap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  blocks_.InternalSwap(&other->blocks_);
  attributes_.Swap(&other->attributes_);
  type_.Swap(&other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Operation::GetTypeName() const {
  return "CoreML.Specification.MILSpec.Operation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Operation

// string type = 1;
void Operation::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Operation::type() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Operation.type)
  return type_.GetNoArena();
}
void Operation::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.Operation.type)
}
#if LANG_CXX11
void Operation::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.MILSpec.Operation.type)
}
#endif
void Operation::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.MILSpec.Operation.type)
}
void Operation::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.MILSpec.Operation.type)
}
::std::string* Operation::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Operation.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Operation::release_type() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Operation.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Operation::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Operation.type)
}

// map<string, .CoreML.Specification.MILSpec.Argument> inputs = 2;
int Operation::inputs_size() const {
  return inputs_.size();
}
void Operation::clear_inputs() {
  inputs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Argument >&
Operation::inputs() const {
  // @@protoc_insertion_point(field_map:CoreML.Specification.MILSpec.Operation.inputs)
  return inputs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Argument >*
Operation::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_map:CoreML.Specification.MILSpec.Operation.inputs)
  return inputs_.MutableMap();
}

// repeated .CoreML.Specification.MILSpec.NamedValueType outputs = 3;
int Operation::outputs_size() const {
  return outputs_.size();
}
void Operation::clear_outputs() {
  outputs_.Clear();
}
const ::CoreML::Specification::MILSpec::NamedValueType& Operation::outputs(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Operation.outputs)
  return outputs_.Get(index);
}
::CoreML::Specification::MILSpec::NamedValueType* Operation::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Operation.outputs)
  return outputs_.Mutable(index);
}
::CoreML::Specification::MILSpec::NamedValueType* Operation::add_outputs() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.Operation.outputs)
  return outputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::NamedValueType >*
Operation::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.Operation.outputs)
  return &outputs_;
}
const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::NamedValueType >&
Operation::outputs() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.Operation.outputs)
  return outputs_;
}

// repeated .CoreML.Specification.MILSpec.Block blocks = 4;
int Operation::blocks_size() const {
  return blocks_.size();
}
void Operation::clear_blocks() {
  blocks_.Clear();
}
const ::CoreML::Specification::MILSpec::Block& Operation::blocks(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Operation.blocks)
  return blocks_.Get(index);
}
::CoreML::Specification::MILSpec::Block* Operation::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Operation.blocks)
  return blocks_.Mutable(index);
}
::CoreML::Specification::MILSpec::Block* Operation::add_blocks() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.Operation.blocks)
  return blocks_.Add();
}
::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::Block >*
Operation::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.Operation.blocks)
  return &blocks_;
}
const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::Block >&
Operation::blocks() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.Operation.blocks)
  return blocks_;
}

// map<string, .CoreML.Specification.MILSpec.Value> attributes = 5;
int Operation::attributes_size() const {
  return attributes_.size();
}
void Operation::clear_attributes() {
  attributes_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >&
Operation::attributes() const {
  // @@protoc_insertion_point(field_map:CoreML.Specification.MILSpec.Operation.attributes)
  return attributes_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >*
Operation::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:CoreML.Specification.MILSpec.Operation.attributes)
  return attributes_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NamedValueType::kNameFieldNumber;
const int NamedValueType::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamedValueType::NamedValueType()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.NamedValueType)
}
NamedValueType::NamedValueType(const NamedValueType& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_type()) {
    type_ = new ::CoreML::Specification::MILSpec::ValueType(*from.type_);
  } else {
    type_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.NamedValueType)
}

void NamedValueType::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = NULL;
  _cached_size_ = 0;
}

NamedValueType::~NamedValueType() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.NamedValueType)
  SharedDtor();
}

void NamedValueType::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete type_;
  }
}

void NamedValueType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NamedValueType& NamedValueType::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

NamedValueType* NamedValueType::New(::google::protobuf::Arena* arena) const {
  NamedValueType* n = new NamedValueType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NamedValueType::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.NamedValueType)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && type_ != NULL) {
    delete type_;
  }
  type_ = NULL;
}

bool NamedValueType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.NamedValueType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.NamedValueType.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.ValueType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.NamedValueType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.NamedValueType)
  return false;
#undef DO_
}

void NamedValueType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.NamedValueType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CoreML.Specification.MILSpec.NamedValueType.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .CoreML.Specification.MILSpec.ValueType type = 2;
  if (this->has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->type_, output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.NamedValueType)
}

size_t NamedValueType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.NamedValueType)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .CoreML.Specification.MILSpec.ValueType type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->type_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NamedValueType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NamedValueType*>(&from));
}

void NamedValueType::MergeFrom(const NamedValueType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.NamedValueType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_type()) {
    mutable_type()->::CoreML::Specification::MILSpec::ValueType::MergeFrom(from.type());
  }
}

void NamedValueType::CopyFrom(const NamedValueType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.NamedValueType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedValueType::IsInitialized() const {
  return true;
}

void NamedValueType::Swap(NamedValueType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedValueType::InternalSwap(NamedValueType* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NamedValueType::GetTypeName() const {
  return "CoreML.Specification.MILSpec.NamedValueType";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NamedValueType

// string name = 1;
void NamedValueType::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NamedValueType::name() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.NamedValueType.name)
  return name_.GetNoArena();
}
void NamedValueType::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.NamedValueType.name)
}
#if LANG_CXX11
void NamedValueType::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.MILSpec.NamedValueType.name)
}
#endif
void NamedValueType::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.MILSpec.NamedValueType.name)
}
void NamedValueType::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.MILSpec.NamedValueType.name)
}
::std::string* NamedValueType::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.NamedValueType.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NamedValueType::release_name() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.NamedValueType.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NamedValueType::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.NamedValueType.name)
}

// .CoreML.Specification.MILSpec.ValueType type = 2;
bool NamedValueType::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
void NamedValueType::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) delete type_;
  type_ = NULL;
}
const ::CoreML::Specification::MILSpec::ValueType& NamedValueType::type() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.NamedValueType.type)
  return type_ != NULL ? *type_
                         : *::CoreML::Specification::MILSpec::ValueType::internal_default_instance();
}
::CoreML::Specification::MILSpec::ValueType* NamedValueType::mutable_type() {
  
  if (type_ == NULL) {
    type_ = new ::CoreML::Specification::MILSpec::ValueType;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.NamedValueType.type)
  return type_;
}
::CoreML::Specification::MILSpec::ValueType* NamedValueType::release_type() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.NamedValueType.type)
  
  ::CoreML::Specification::MILSpec::ValueType* temp = type_;
  type_ = NULL;
  return temp;
}
void NamedValueType::set_allocated_type(::CoreML::Specification::MILSpec::ValueType* type) {
  delete type_;
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.NamedValueType.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValueType::kTensorTypeFieldNumber;
const int ValueType::kListTypeFieldNumber;
const int ValueType::kTupleTypeFieldNumber;
const int ValueType::kDictionaryTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValueType::ValueType()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.ValueType)
}
ValueType::ValueType(const ValueType& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kTensorType: {
      mutable_tensortype()->::CoreML::Specification::MILSpec::TensorType::MergeFrom(from.tensortype());
      break;
    }
    case kListType: {
      mutable_listtype()->::CoreML::Specification::MILSpec::ListType::MergeFrom(from.listtype());
      break;
    }
    case kTupleType: {
      mutable_tupletype()->::CoreML::Specification::MILSpec::TupleType::MergeFrom(from.tupletype());
      break;
    }
    case kDictionaryType: {
      mutable_dictionarytype()->::CoreML::Specification::MILSpec::DictionaryType::MergeFrom(from.dictionarytype());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.ValueType)
}

void ValueType::SharedCtor() {
  clear_has_type();
  _cached_size_ = 0;
}

ValueType::~ValueType() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.ValueType)
  SharedDtor();
}

void ValueType::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void ValueType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ValueType& ValueType::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

ValueType* ValueType::New(::google::protobuf::Arena* arena) const {
  ValueType* n = new ValueType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValueType::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.MILSpec.ValueType)
  switch (type_case()) {
    case kTensorType: {
      delete type_.tensortype_;
      break;
    }
    case kListType: {
      delete type_.listtype_;
      break;
    }
    case kTupleType: {
      delete type_.tupletype_;
      break;
    }
    case kDictionaryType: {
      delete type_.dictionarytype_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ValueType::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.ValueType)
  clear_type();
}

bool ValueType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.ValueType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CoreML.Specification.MILSpec.TensorType tensorType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensortype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.ListType listType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_listtype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.TupleType tupleType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tupletype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.DictionaryType dictionaryType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dictionarytype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.ValueType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.ValueType)
  return false;
#undef DO_
}

void ValueType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.ValueType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CoreML.Specification.MILSpec.TensorType tensorType = 1;
  if (has_tensortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *type_.tensortype_, output);
  }

  // .CoreML.Specification.MILSpec.ListType listType = 2;
  if (has_listtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *type_.listtype_, output);
  }

  // .CoreML.Specification.MILSpec.TupleType tupleType = 3;
  if (has_tupletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *type_.tupletype_, output);
  }

  // .CoreML.Specification.MILSpec.DictionaryType dictionaryType = 4;
  if (has_dictionarytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *type_.dictionarytype_, output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.ValueType)
}

size_t ValueType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.ValueType)
  size_t total_size = 0;

  switch (type_case()) {
    // .CoreML.Specification.MILSpec.TensorType tensorType = 1;
    case kTensorType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.tensortype_);
      break;
    }
    // .CoreML.Specification.MILSpec.ListType listType = 2;
    case kListType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.listtype_);
      break;
    }
    // .CoreML.Specification.MILSpec.TupleType tupleType = 3;
    case kTupleType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.tupletype_);
      break;
    }
    // .CoreML.Specification.MILSpec.DictionaryType dictionaryType = 4;
    case kDictionaryType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.dictionarytype_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ValueType*>(&from));
}

void ValueType::MergeFrom(const ValueType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.ValueType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kTensorType: {
      mutable_tensortype()->::CoreML::Specification::MILSpec::TensorType::MergeFrom(from.tensortype());
      break;
    }
    case kListType: {
      mutable_listtype()->::CoreML::Specification::MILSpec::ListType::MergeFrom(from.listtype());
      break;
    }
    case kTupleType: {
      mutable_tupletype()->::CoreML::Specification::MILSpec::TupleType::MergeFrom(from.tupletype());
      break;
    }
    case kDictionaryType: {
      mutable_dictionarytype()->::CoreML::Specification::MILSpec::DictionaryType::MergeFrom(from.dictionarytype());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void ValueType::CopyFrom(const ValueType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.ValueType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueType::IsInitialized() const {
  return true;
}

void ValueType::Swap(ValueType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValueType::InternalSwap(ValueType* other) {
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ValueType::GetTypeName() const {
  return "CoreML.Specification.MILSpec.ValueType";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValueType

// .CoreML.Specification.MILSpec.TensorType tensorType = 1;
bool ValueType::has_tensortype() const {
  return type_case() == kTensorType;
}
void ValueType::set_has_tensortype() {
  _oneof_case_[0] = kTensorType;
}
void ValueType::clear_tensortype() {
  if (has_tensortype()) {
    delete type_.tensortype_;
    clear_has_type();
  }
}
 const ::CoreML::Specification::MILSpec::TensorType& ValueType::tensortype() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.ValueType.tensorType)
  return has_tensortype()
      ? *type_.tensortype_
      : ::CoreML::Specification::MILSpec::TensorType::default_instance();
}
::CoreML::Specification::MILSpec::TensorType* ValueType::mutable_tensortype() {
  if (!has_tensortype()) {
    clear_type();
    set_has_tensortype();
    type_.tensortype_ = new ::CoreML::Specification::MILSpec::TensorType;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.ValueType.tensorType)
  return type_.tensortype_;
}
::CoreML::Specification::MILSpec::TensorType* ValueType::release_tensortype() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.ValueType.tensorType)
  if (has_tensortype()) {
    clear_has_type();
    ::CoreML::Specification::MILSpec::TensorType* temp = type_.tensortype_;
    type_.tensortype_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ValueType::set_allocated_tensortype(::CoreML::Specification::MILSpec::TensorType* tensortype) {
  clear_type();
  if (tensortype) {
    set_has_tensortype();
    type_.tensortype_ = tensortype;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.ValueType.tensorType)
}

// .CoreML.Specification.MILSpec.ListType listType = 2;
bool ValueType::has_listtype() const {
  return type_case() == kListType;
}
void ValueType::set_has_listtype() {
  _oneof_case_[0] = kListType;
}
void ValueType::clear_listtype() {
  if (has_listtype()) {
    delete type_.listtype_;
    clear_has_type();
  }
}
 const ::CoreML::Specification::MILSpec::ListType& ValueType::listtype() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.ValueType.listType)
  return has_listtype()
      ? *type_.listtype_
      : ::CoreML::Specification::MILSpec::ListType::default_instance();
}
::CoreML::Specification::MILSpec::ListType* ValueType::mutable_listtype() {
  if (!has_listtype()) {
    clear_type();
    set_has_listtype();
    type_.listtype_ = new ::CoreML::Specification::MILSpec::ListType;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.ValueType.listType)
  return type_.listtype_;
}
::CoreML::Specification::MILSpec::ListType* ValueType::release_listtype() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.ValueType.listType)
  if (has_listtype()) {
    clear_has_type();
    ::CoreML::Specification::MILSpec::ListType* temp = type_.listtype_;
    type_.listtype_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ValueType::set_allocated_listtype(::CoreML::Specification::MILSpec::ListType* listtype) {
  clear_type();
  if (listtype) {
    set_has_listtype();
    type_.listtype_ = listtype;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.ValueType.listType)
}

// .CoreML.Specification.MILSpec.TupleType tupleType = 3;
bool ValueType::has_tupletype() const {
  return type_case() == kTupleType;
}
void ValueType::set_has_tupletype() {
  _oneof_case_[0] = kTupleType;
}
void ValueType::clear_tupletype() {
  if (has_tupletype()) {
    delete type_.tupletype_;
    clear_has_type();
  }
}
 const ::CoreML::Specification::MILSpec::TupleType& ValueType::tupletype() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.ValueType.tupleType)
  return has_tupletype()
      ? *type_.tupletype_
      : ::CoreML::Specification::MILSpec::TupleType::default_instance();
}
::CoreML::Specification::MILSpec::TupleType* ValueType::mutable_tupletype() {
  if (!has_tupletype()) {
    clear_type();
    set_has_tupletype();
    type_.tupletype_ = new ::CoreML::Specification::MILSpec::TupleType;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.ValueType.tupleType)
  return type_.tupletype_;
}
::CoreML::Specification::MILSpec::TupleType* ValueType::release_tupletype() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.ValueType.tupleType)
  if (has_tupletype()) {
    clear_has_type();
    ::CoreML::Specification::MILSpec::TupleType* temp = type_.tupletype_;
    type_.tupletype_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ValueType::set_allocated_tupletype(::CoreML::Specification::MILSpec::TupleType* tupletype) {
  clear_type();
  if (tupletype) {
    set_has_tupletype();
    type_.tupletype_ = tupletype;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.ValueType.tupleType)
}

// .CoreML.Specification.MILSpec.DictionaryType dictionaryType = 4;
bool ValueType::has_dictionarytype() const {
  return type_case() == kDictionaryType;
}
void ValueType::set_has_dictionarytype() {
  _oneof_case_[0] = kDictionaryType;
}
void ValueType::clear_dictionarytype() {
  if (has_dictionarytype()) {
    delete type_.dictionarytype_;
    clear_has_type();
  }
}
 const ::CoreML::Specification::MILSpec::DictionaryType& ValueType::dictionarytype() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.ValueType.dictionaryType)
  return has_dictionarytype()
      ? *type_.dictionarytype_
      : ::CoreML::Specification::MILSpec::DictionaryType::default_instance();
}
::CoreML::Specification::MILSpec::DictionaryType* ValueType::mutable_dictionarytype() {
  if (!has_dictionarytype()) {
    clear_type();
    set_has_dictionarytype();
    type_.dictionarytype_ = new ::CoreML::Specification::MILSpec::DictionaryType;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.ValueType.dictionaryType)
  return type_.dictionarytype_;
}
::CoreML::Specification::MILSpec::DictionaryType* ValueType::release_dictionarytype() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.ValueType.dictionaryType)
  if (has_dictionarytype()) {
    clear_has_type();
    ::CoreML::Specification::MILSpec::DictionaryType* temp = type_.dictionarytype_;
    type_.dictionarytype_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ValueType::set_allocated_dictionarytype(::CoreML::Specification::MILSpec::DictionaryType* dictionarytype) {
  clear_type();
  if (dictionarytype) {
    set_has_dictionarytype();
    type_.dictionarytype_ = dictionarytype;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.ValueType.dictionaryType)
}

bool ValueType::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void ValueType::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
ValueType::TypeCase ValueType::type_case() const {
  return ValueType::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorType::kDataTypeFieldNumber;
const int TensorType::kRankFieldNumber;
const int TensorType::kDimensionsFieldNumber;
const int TensorType::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorType::TensorType()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.TensorType)
}
TensorType::TensorType(const TensorType& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      dimensions_(from.dimensions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attributes_.MergeFrom(from.attributes_);
  ::memcpy(&rank_, &from.rank_,
    reinterpret_cast<char*>(&datatype_) -
    reinterpret_cast<char*>(&rank_) + sizeof(datatype_));
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.TensorType)
}

void TensorType::SharedCtor() {
  ::memset(&rank_, 0, reinterpret_cast<char*>(&datatype_) -
    reinterpret_cast<char*>(&rank_) + sizeof(datatype_));
  _cached_size_ = 0;
}

TensorType::~TensorType() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.TensorType)
  SharedDtor();
}

void TensorType::SharedDtor() {
}

void TensorType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TensorType& TensorType::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorType* TensorType::New(::google::protobuf::Arena* arena) const {
  TensorType* n = new TensorType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorType::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.TensorType)
  dimensions_.Clear();
  attributes_.Clear();
  ::memset(&rank_, 0, reinterpret_cast<char*>(&datatype_) -
    reinterpret_cast<char*>(&rank_) + sizeof(datatype_));
}

bool TensorType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.TensorType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CoreML.Specification.MILSpec.DataType dataType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_datatype(static_cast< ::CoreML::Specification::MILSpec::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CoreML.Specification.MILSpec.Dimension dimensions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dimensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          TensorType_AttributesEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              TensorType_AttributesEntry,
              ::std::string, ::CoreML::Specification::MILSpec::Value,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value > > parser(&attributes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.TensorType.AttributesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.TensorType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.TensorType)
  return false;
#undef DO_
}

void TensorType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.TensorType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CoreML.Specification.MILSpec.DataType dataType = 1;
  if (this->datatype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->datatype(), output);
  }

  // int64 rank = 2;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rank(), output);
  }

  // repeated .CoreML.Specification.MILSpec.Dimension dimensions = 3;
  for (unsigned int i = 0, n = this->dimensions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->dimensions(i), output);
  }

  // map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CoreML.Specification.MILSpec.TensorType.AttributesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TensorType_AttributesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TensorType_AttributesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.TensorType)
}

size_t TensorType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.TensorType)
  size_t total_size = 0;

  // repeated .CoreML.Specification.MILSpec.Dimension dimensions = 3;
  {
    unsigned int count = this->dimensions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dimensions(i));
    }
  }

  // map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attributes_size());
  {
    ::google::protobuf::scoped_ptr<TensorType_AttributesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >::const_iterator
        it = this->attributes().begin();
        it != this->attributes().end(); ++it) {
      entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int64 rank = 2;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rank());
  }

  // .CoreML.Specification.MILSpec.DataType dataType = 1;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TensorType*>(&from));
}

void TensorType::MergeFrom(const TensorType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.TensorType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensions_.MergeFrom(from.dimensions_);
  attributes_.MergeFrom(from.attributes_);
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.datatype() != 0) {
    set_datatype(from.datatype());
  }
}

void TensorType::CopyFrom(const TensorType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.TensorType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorType::IsInitialized() const {
  return true;
}

void TensorType::Swap(TensorType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorType::InternalSwap(TensorType* other) {
  dimensions_.InternalSwap(&other->dimensions_);
  attributes_.Swap(&other->attributes_);
  std::swap(rank_, other->rank_);
  std::swap(datatype_, other->datatype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TensorType::GetTypeName() const {
  return "CoreML.Specification.MILSpec.TensorType";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorType

// .CoreML.Specification.MILSpec.DataType dataType = 1;
void TensorType::clear_datatype() {
  datatype_ = 0;
}
::CoreML::Specification::MILSpec::DataType TensorType::datatype() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorType.dataType)
  return static_cast< ::CoreML::Specification::MILSpec::DataType >(datatype_);
}
void TensorType::set_datatype(::CoreML::Specification::MILSpec::DataType value) {
  
  datatype_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.TensorType.dataType)
}

// int64 rank = 2;
void TensorType::clear_rank() {
  rank_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TensorType::rank() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorType.rank)
  return rank_;
}
void TensorType::set_rank(::google::protobuf::int64 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.TensorType.rank)
}

// repeated .CoreML.Specification.MILSpec.Dimension dimensions = 3;
int TensorType::dimensions_size() const {
  return dimensions_.size();
}
void TensorType::clear_dimensions() {
  dimensions_.Clear();
}
const ::CoreML::Specification::MILSpec::Dimension& TensorType::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorType.dimensions)
  return dimensions_.Get(index);
}
::CoreML::Specification::MILSpec::Dimension* TensorType::mutable_dimensions(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.TensorType.dimensions)
  return dimensions_.Mutable(index);
}
::CoreML::Specification::MILSpec::Dimension* TensorType::add_dimensions() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.TensorType.dimensions)
  return dimensions_.Add();
}
::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::Dimension >*
TensorType::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.TensorType.dimensions)
  return &dimensions_;
}
const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::Dimension >&
TensorType::dimensions() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.TensorType.dimensions)
  return dimensions_;
}

// map<string, .CoreML.Specification.MILSpec.Value> attributes = 4;
int TensorType::attributes_size() const {
  return attributes_.size();
}
void TensorType::clear_attributes() {
  attributes_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >&
TensorType::attributes() const {
  // @@protoc_insertion_point(field_map:CoreML.Specification.MILSpec.TensorType.attributes)
  return attributes_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::CoreML::Specification::MILSpec::Value >*
TensorType::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:CoreML.Specification.MILSpec.TensorType.attributes)
  return attributes_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TupleType::kTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TupleType::TupleType()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.TupleType)
}
TupleType::TupleType(const TupleType& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      types_(from.types_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.TupleType)
}

void TupleType::SharedCtor() {
  _cached_size_ = 0;
}

TupleType::~TupleType() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.TupleType)
  SharedDtor();
}

void TupleType::SharedDtor() {
}

void TupleType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TupleType& TupleType::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

TupleType* TupleType::New(::google::protobuf::Arena* arena) const {
  TupleType* n = new TupleType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TupleType::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.TupleType)
  types_.Clear();
}

bool TupleType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.TupleType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CoreML.Specification.MILSpec.ValueType types = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.TupleType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.TupleType)
  return false;
#undef DO_
}

void TupleType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.TupleType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CoreML.Specification.MILSpec.ValueType types = 1;
  for (unsigned int i = 0, n = this->types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->types(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.TupleType)
}

size_t TupleType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.TupleType)
  size_t total_size = 0;

  // repeated .CoreML.Specification.MILSpec.ValueType types = 1;
  {
    unsigned int count = this->types_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->types(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TupleType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TupleType*>(&from));
}

void TupleType::MergeFrom(const TupleType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.TupleType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
}

void TupleType::CopyFrom(const TupleType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.TupleType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TupleType::IsInitialized() const {
  return true;
}

void TupleType::Swap(TupleType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TupleType::InternalSwap(TupleType* other) {
  types_.InternalSwap(&other->types_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TupleType::GetTypeName() const {
  return "CoreML.Specification.MILSpec.TupleType";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TupleType

// repeated .CoreML.Specification.MILSpec.ValueType types = 1;
int TupleType::types_size() const {
  return types_.size();
}
void TupleType::clear_types() {
  types_.Clear();
}
const ::CoreML::Specification::MILSpec::ValueType& TupleType::types(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TupleType.types)
  return types_.Get(index);
}
::CoreML::Specification::MILSpec::ValueType* TupleType::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.TupleType.types)
  return types_.Mutable(index);
}
::CoreML::Specification::MILSpec::ValueType* TupleType::add_types() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.TupleType.types)
  return types_.Add();
}
::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::ValueType >*
TupleType::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.TupleType.types)
  return &types_;
}
const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::ValueType >&
TupleType::types() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.TupleType.types)
  return types_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListType::kTypeFieldNumber;
const int ListType::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListType::ListType()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.ListType)
}
ListType::ListType(const ListType& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_type()) {
    type_ = new ::CoreML::Specification::MILSpec::ValueType(*from.type_);
  } else {
    type_ = NULL;
  }
  if (from.has_length()) {
    length_ = new ::CoreML::Specification::MILSpec::Dimension(*from.length_);
  } else {
    length_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.ListType)
}

void ListType::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&type_) + sizeof(length_));
  _cached_size_ = 0;
}

ListType::~ListType() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.ListType)
  SharedDtor();
}

void ListType::SharedDtor() {
  if (this != internal_default_instance()) {
    delete type_;
  }
  if (this != internal_default_instance()) {
    delete length_;
  }
}

void ListType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ListType& ListType::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListType* ListType::New(::google::protobuf::Arena* arena) const {
  ListType* n = new ListType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListType::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.ListType)
  if (GetArenaNoVirtual() == NULL && type_ != NULL) {
    delete type_;
  }
  type_ = NULL;
  if (GetArenaNoVirtual() == NULL && length_ != NULL) {
    delete length_;
  }
  length_ = NULL;
}

bool ListType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.ListType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CoreML.Specification.MILSpec.ValueType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.Dimension length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_length()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.ListType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.ListType)
  return false;
#undef DO_
}

void ListType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.ListType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CoreML.Specification.MILSpec.ValueType type = 1;
  if (this->has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->type_, output);
  }

  // .CoreML.Specification.MILSpec.Dimension length = 2;
  if (this->has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->length_, output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.ListType)
}

size_t ListType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.ListType)
  size_t total_size = 0;

  // .CoreML.Specification.MILSpec.ValueType type = 1;
  if (this->has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->type_);
  }

  // .CoreML.Specification.MILSpec.Dimension length = 2;
  if (this->has_length()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->length_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ListType*>(&from));
}

void ListType::MergeFrom(const ListType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.ListType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    mutable_type()->::CoreML::Specification::MILSpec::ValueType::MergeFrom(from.type());
  }
  if (from.has_length()) {
    mutable_length()->::CoreML::Specification::MILSpec::Dimension::MergeFrom(from.length());
  }
}

void ListType::CopyFrom(const ListType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.ListType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListType::IsInitialized() const {
  return true;
}

void ListType::Swap(ListType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListType::InternalSwap(ListType* other) {
  std::swap(type_, other->type_);
  std::swap(length_, other->length_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ListType::GetTypeName() const {
  return "CoreML.Specification.MILSpec.ListType";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListType

// .CoreML.Specification.MILSpec.ValueType type = 1;
bool ListType::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
void ListType::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) delete type_;
  type_ = NULL;
}
const ::CoreML::Specification::MILSpec::ValueType& ListType::type() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.ListType.type)
  return type_ != NULL ? *type_
                         : *::CoreML::Specification::MILSpec::ValueType::internal_default_instance();
}
::CoreML::Specification::MILSpec::ValueType* ListType::mutable_type() {
  
  if (type_ == NULL) {
    type_ = new ::CoreML::Specification::MILSpec::ValueType;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.ListType.type)
  return type_;
}
::CoreML::Specification::MILSpec::ValueType* ListType::release_type() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.ListType.type)
  
  ::CoreML::Specification::MILSpec::ValueType* temp = type_;
  type_ = NULL;
  return temp;
}
void ListType::set_allocated_type(::CoreML::Specification::MILSpec::ValueType* type) {
  delete type_;
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.ListType.type)
}

// .CoreML.Specification.MILSpec.Dimension length = 2;
bool ListType::has_length() const {
  return this != internal_default_instance() && length_ != NULL;
}
void ListType::clear_length() {
  if (GetArenaNoVirtual() == NULL && length_ != NULL) delete length_;
  length_ = NULL;
}
const ::CoreML::Specification::MILSpec::Dimension& ListType::length() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.ListType.length)
  return length_ != NULL ? *length_
                         : *::CoreML::Specification::MILSpec::Dimension::internal_default_instance();
}
::CoreML::Specification::MILSpec::Dimension* ListType::mutable_length() {
  
  if (length_ == NULL) {
    length_ = new ::CoreML::Specification::MILSpec::Dimension;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.ListType.length)
  return length_;
}
::CoreML::Specification::MILSpec::Dimension* ListType::release_length() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.ListType.length)
  
  ::CoreML::Specification::MILSpec::Dimension* temp = length_;
  length_ = NULL;
  return temp;
}
void ListType::set_allocated_length(::CoreML::Specification::MILSpec::Dimension* length) {
  delete length_;
  length_ = length;
  if (length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.ListType.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DictionaryType::kKeyTypeFieldNumber;
const int DictionaryType::kValueTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DictionaryType::DictionaryType()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.DictionaryType)
}
DictionaryType::DictionaryType(const DictionaryType& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_keytype()) {
    keytype_ = new ::CoreML::Specification::MILSpec::ValueType(*from.keytype_);
  } else {
    keytype_ = NULL;
  }
  if (from.has_valuetype()) {
    valuetype_ = new ::CoreML::Specification::MILSpec::ValueType(*from.valuetype_);
  } else {
    valuetype_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.DictionaryType)
}

void DictionaryType::SharedCtor() {
  ::memset(&keytype_, 0, reinterpret_cast<char*>(&valuetype_) -
    reinterpret_cast<char*>(&keytype_) + sizeof(valuetype_));
  _cached_size_ = 0;
}

DictionaryType::~DictionaryType() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.DictionaryType)
  SharedDtor();
}

void DictionaryType::SharedDtor() {
  if (this != internal_default_instance()) {
    delete keytype_;
  }
  if (this != internal_default_instance()) {
    delete valuetype_;
  }
}

void DictionaryType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DictionaryType& DictionaryType::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

DictionaryType* DictionaryType::New(::google::protobuf::Arena* arena) const {
  DictionaryType* n = new DictionaryType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DictionaryType::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.DictionaryType)
  if (GetArenaNoVirtual() == NULL && keytype_ != NULL) {
    delete keytype_;
  }
  keytype_ = NULL;
  if (GetArenaNoVirtual() == NULL && valuetype_ != NULL) {
    delete valuetype_;
  }
  valuetype_ = NULL;
}

bool DictionaryType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.DictionaryType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CoreML.Specification.MILSpec.ValueType keyType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keytype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.ValueType valueType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valuetype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.DictionaryType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.DictionaryType)
  return false;
#undef DO_
}

void DictionaryType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.DictionaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CoreML.Specification.MILSpec.ValueType keyType = 1;
  if (this->has_keytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->keytype_, output);
  }

  // .CoreML.Specification.MILSpec.ValueType valueType = 2;
  if (this->has_valuetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->valuetype_, output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.DictionaryType)
}

size_t DictionaryType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.DictionaryType)
  size_t total_size = 0;

  // .CoreML.Specification.MILSpec.ValueType keyType = 1;
  if (this->has_keytype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keytype_);
  }

  // .CoreML.Specification.MILSpec.ValueType valueType = 2;
  if (this->has_valuetype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->valuetype_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DictionaryType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DictionaryType*>(&from));
}

void DictionaryType::MergeFrom(const DictionaryType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.DictionaryType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_keytype()) {
    mutable_keytype()->::CoreML::Specification::MILSpec::ValueType::MergeFrom(from.keytype());
  }
  if (from.has_valuetype()) {
    mutable_valuetype()->::CoreML::Specification::MILSpec::ValueType::MergeFrom(from.valuetype());
  }
}

void DictionaryType::CopyFrom(const DictionaryType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.DictionaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictionaryType::IsInitialized() const {
  return true;
}

void DictionaryType::Swap(DictionaryType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DictionaryType::InternalSwap(DictionaryType* other) {
  std::swap(keytype_, other->keytype_);
  std::swap(valuetype_, other->valuetype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DictionaryType::GetTypeName() const {
  return "CoreML.Specification.MILSpec.DictionaryType";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DictionaryType

// .CoreML.Specification.MILSpec.ValueType keyType = 1;
bool DictionaryType::has_keytype() const {
  return this != internal_default_instance() && keytype_ != NULL;
}
void DictionaryType::clear_keytype() {
  if (GetArenaNoVirtual() == NULL && keytype_ != NULL) delete keytype_;
  keytype_ = NULL;
}
const ::CoreML::Specification::MILSpec::ValueType& DictionaryType::keytype() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.DictionaryType.keyType)
  return keytype_ != NULL ? *keytype_
                         : *::CoreML::Specification::MILSpec::ValueType::internal_default_instance();
}
::CoreML::Specification::MILSpec::ValueType* DictionaryType::mutable_keytype() {
  
  if (keytype_ == NULL) {
    keytype_ = new ::CoreML::Specification::MILSpec::ValueType;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.DictionaryType.keyType)
  return keytype_;
}
::CoreML::Specification::MILSpec::ValueType* DictionaryType::release_keytype() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.DictionaryType.keyType)
  
  ::CoreML::Specification::MILSpec::ValueType* temp = keytype_;
  keytype_ = NULL;
  return temp;
}
void DictionaryType::set_allocated_keytype(::CoreML::Specification::MILSpec::ValueType* keytype) {
  delete keytype_;
  keytype_ = keytype;
  if (keytype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.DictionaryType.keyType)
}

// .CoreML.Specification.MILSpec.ValueType valueType = 2;
bool DictionaryType::has_valuetype() const {
  return this != internal_default_instance() && valuetype_ != NULL;
}
void DictionaryType::clear_valuetype() {
  if (GetArenaNoVirtual() == NULL && valuetype_ != NULL) delete valuetype_;
  valuetype_ = NULL;
}
const ::CoreML::Specification::MILSpec::ValueType& DictionaryType::valuetype() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.DictionaryType.valueType)
  return valuetype_ != NULL ? *valuetype_
                         : *::CoreML::Specification::MILSpec::ValueType::internal_default_instance();
}
::CoreML::Specification::MILSpec::ValueType* DictionaryType::mutable_valuetype() {
  
  if (valuetype_ == NULL) {
    valuetype_ = new ::CoreML::Specification::MILSpec::ValueType;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.DictionaryType.valueType)
  return valuetype_;
}
::CoreML::Specification::MILSpec::ValueType* DictionaryType::release_valuetype() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.DictionaryType.valueType)
  
  ::CoreML::Specification::MILSpec::ValueType* temp = valuetype_;
  valuetype_ = NULL;
  return temp;
}
void DictionaryType::set_allocated_valuetype(::CoreML::Specification::MILSpec::ValueType* valuetype) {
  delete valuetype_;
  valuetype_ = valuetype;
  if (valuetype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.DictionaryType.valueType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dimension_ConstantDimension::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dimension_ConstantDimension::Dimension_ConstantDimension()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.Dimension.ConstantDimension)
}
Dimension_ConstantDimension::Dimension_ConstantDimension(const Dimension_ConstantDimension& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.Dimension.ConstantDimension)
}

void Dimension_ConstantDimension::SharedCtor() {
  size_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Dimension_ConstantDimension::~Dimension_ConstantDimension() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.Dimension.ConstantDimension)
  SharedDtor();
}

void Dimension_ConstantDimension::SharedDtor() {
}

void Dimension_ConstantDimension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dimension_ConstantDimension& Dimension_ConstantDimension::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dimension_ConstantDimension* Dimension_ConstantDimension::New(::google::protobuf::Arena* arena) const {
  Dimension_ConstantDimension* n = new Dimension_ConstantDimension;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dimension_ConstantDimension::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.Dimension.ConstantDimension)
  size_ = GOOGLE_ULONGLONG(0);
}

bool Dimension_ConstantDimension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.Dimension.ConstantDimension)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.Dimension.ConstantDimension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.Dimension.ConstantDimension)
  return false;
#undef DO_
}

void Dimension_ConstantDimension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.Dimension.ConstantDimension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.Dimension.ConstantDimension)
}

size_t Dimension_ConstantDimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.Dimension.ConstantDimension)
  size_t total_size = 0;

  // uint64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dimension_ConstantDimension::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dimension_ConstantDimension*>(&from));
}

void Dimension_ConstantDimension::MergeFrom(const Dimension_ConstantDimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.Dimension.ConstantDimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    set_size(from.size());
  }
}

void Dimension_ConstantDimension::CopyFrom(const Dimension_ConstantDimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.Dimension.ConstantDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dimension_ConstantDimension::IsInitialized() const {
  return true;
}

void Dimension_ConstantDimension::Swap(Dimension_ConstantDimension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dimension_ConstantDimension::InternalSwap(Dimension_ConstantDimension* other) {
  std::swap(size_, other->size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dimension_ConstantDimension::GetTypeName() const {
  return "CoreML.Specification.MILSpec.Dimension.ConstantDimension";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dimension_ConstantDimension

// uint64 size = 1;
void Dimension_ConstantDimension::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Dimension_ConstantDimension::size() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Dimension.ConstantDimension.size)
  return size_;
}
void Dimension_ConstantDimension::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.Dimension.ConstantDimension.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dimension_UnknownDimension::kVariadicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dimension_UnknownDimension::Dimension_UnknownDimension()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.Dimension.UnknownDimension)
}
Dimension_UnknownDimension::Dimension_UnknownDimension(const Dimension_UnknownDimension& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  variadic_ = from.variadic_;
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.Dimension.UnknownDimension)
}

void Dimension_UnknownDimension::SharedCtor() {
  variadic_ = false;
  _cached_size_ = 0;
}

Dimension_UnknownDimension::~Dimension_UnknownDimension() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.Dimension.UnknownDimension)
  SharedDtor();
}

void Dimension_UnknownDimension::SharedDtor() {
}

void Dimension_UnknownDimension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dimension_UnknownDimension& Dimension_UnknownDimension::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dimension_UnknownDimension* Dimension_UnknownDimension::New(::google::protobuf::Arena* arena) const {
  Dimension_UnknownDimension* n = new Dimension_UnknownDimension;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dimension_UnknownDimension::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.Dimension.UnknownDimension)
  variadic_ = false;
}

bool Dimension_UnknownDimension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.Dimension.UnknownDimension)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool variadic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &variadic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.Dimension.UnknownDimension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.Dimension.UnknownDimension)
  return false;
#undef DO_
}

void Dimension_UnknownDimension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.Dimension.UnknownDimension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool variadic = 1;
  if (this->variadic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->variadic(), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.Dimension.UnknownDimension)
}

size_t Dimension_UnknownDimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.Dimension.UnknownDimension)
  size_t total_size = 0;

  // bool variadic = 1;
  if (this->variadic() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dimension_UnknownDimension::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dimension_UnknownDimension*>(&from));
}

void Dimension_UnknownDimension::MergeFrom(const Dimension_UnknownDimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.Dimension.UnknownDimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.variadic() != 0) {
    set_variadic(from.variadic());
  }
}

void Dimension_UnknownDimension::CopyFrom(const Dimension_UnknownDimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.Dimension.UnknownDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dimension_UnknownDimension::IsInitialized() const {
  return true;
}

void Dimension_UnknownDimension::Swap(Dimension_UnknownDimension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dimension_UnknownDimension::InternalSwap(Dimension_UnknownDimension* other) {
  std::swap(variadic_, other->variadic_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dimension_UnknownDimension::GetTypeName() const {
  return "CoreML.Specification.MILSpec.Dimension.UnknownDimension";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dimension_UnknownDimension

// bool variadic = 1;
void Dimension_UnknownDimension::clear_variadic() {
  variadic_ = false;
}
bool Dimension_UnknownDimension::variadic() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Dimension.UnknownDimension.variadic)
  return variadic_;
}
void Dimension_UnknownDimension::set_variadic(bool value) {
  
  variadic_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.Dimension.UnknownDimension.variadic)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dimension::kConstantFieldNumber;
const int Dimension::kUnknownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dimension::Dimension()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.Dimension)
}
Dimension::Dimension(const Dimension& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_dimension();
  switch (from.dimension_case()) {
    case kConstant: {
      mutable_constant()->::CoreML::Specification::MILSpec::Dimension_ConstantDimension::MergeFrom(from.constant());
      break;
    }
    case kUnknown: {
      mutable_unknown()->::CoreML::Specification::MILSpec::Dimension_UnknownDimension::MergeFrom(from.unknown());
      break;
    }
    case DIMENSION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.Dimension)
}

void Dimension::SharedCtor() {
  clear_has_dimension();
  _cached_size_ = 0;
}

Dimension::~Dimension() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.Dimension)
  SharedDtor();
}

void Dimension::SharedDtor() {
  if (has_dimension()) {
    clear_dimension();
  }
}

void Dimension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dimension& Dimension::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dimension* Dimension::New(::google::protobuf::Arena* arena) const {
  Dimension* n = new Dimension;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dimension::clear_dimension() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.MILSpec.Dimension)
  switch (dimension_case()) {
    case kConstant: {
      delete dimension_.constant_;
      break;
    }
    case kUnknown: {
      delete dimension_.unknown_;
      break;
    }
    case DIMENSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DIMENSION_NOT_SET;
}


void Dimension::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.Dimension)
  clear_dimension();
}

bool Dimension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.Dimension)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CoreML.Specification.MILSpec.Dimension.ConstantDimension constant = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.Dimension.UnknownDimension unknown = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unknown()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.Dimension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.Dimension)
  return false;
#undef DO_
}

void Dimension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.Dimension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CoreML.Specification.MILSpec.Dimension.ConstantDimension constant = 1;
  if (has_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *dimension_.constant_, output);
  }

  // .CoreML.Specification.MILSpec.Dimension.UnknownDimension unknown = 2;
  if (has_unknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *dimension_.unknown_, output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.Dimension)
}

size_t Dimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.Dimension)
  size_t total_size = 0;

  switch (dimension_case()) {
    // .CoreML.Specification.MILSpec.Dimension.ConstantDimension constant = 1;
    case kConstant: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *dimension_.constant_);
      break;
    }
    // .CoreML.Specification.MILSpec.Dimension.UnknownDimension unknown = 2;
    case kUnknown: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *dimension_.unknown_);
      break;
    }
    case DIMENSION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dimension::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dimension*>(&from));
}

void Dimension::MergeFrom(const Dimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.Dimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.dimension_case()) {
    case kConstant: {
      mutable_constant()->::CoreML::Specification::MILSpec::Dimension_ConstantDimension::MergeFrom(from.constant());
      break;
    }
    case kUnknown: {
      mutable_unknown()->::CoreML::Specification::MILSpec::Dimension_UnknownDimension::MergeFrom(from.unknown());
      break;
    }
    case DIMENSION_NOT_SET: {
      break;
    }
  }
}

void Dimension::CopyFrom(const Dimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dimension::IsInitialized() const {
  return true;
}

void Dimension::Swap(Dimension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dimension::InternalSwap(Dimension* other) {
  std::swap(dimension_, other->dimension_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dimension::GetTypeName() const {
  return "CoreML.Specification.MILSpec.Dimension";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dimension

// .CoreML.Specification.MILSpec.Dimension.ConstantDimension constant = 1;
bool Dimension::has_constant() const {
  return dimension_case() == kConstant;
}
void Dimension::set_has_constant() {
  _oneof_case_[0] = kConstant;
}
void Dimension::clear_constant() {
  if (has_constant()) {
    delete dimension_.constant_;
    clear_has_dimension();
  }
}
 const ::CoreML::Specification::MILSpec::Dimension_ConstantDimension& Dimension::constant() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Dimension.constant)
  return has_constant()
      ? *dimension_.constant_
      : ::CoreML::Specification::MILSpec::Dimension_ConstantDimension::default_instance();
}
::CoreML::Specification::MILSpec::Dimension_ConstantDimension* Dimension::mutable_constant() {
  if (!has_constant()) {
    clear_dimension();
    set_has_constant();
    dimension_.constant_ = new ::CoreML::Specification::MILSpec::Dimension_ConstantDimension;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Dimension.constant)
  return dimension_.constant_;
}
::CoreML::Specification::MILSpec::Dimension_ConstantDimension* Dimension::release_constant() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Dimension.constant)
  if (has_constant()) {
    clear_has_dimension();
    ::CoreML::Specification::MILSpec::Dimension_ConstantDimension* temp = dimension_.constant_;
    dimension_.constant_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Dimension::set_allocated_constant(::CoreML::Specification::MILSpec::Dimension_ConstantDimension* constant) {
  clear_dimension();
  if (constant) {
    set_has_constant();
    dimension_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Dimension.constant)
}

// .CoreML.Specification.MILSpec.Dimension.UnknownDimension unknown = 2;
bool Dimension::has_unknown() const {
  return dimension_case() == kUnknown;
}
void Dimension::set_has_unknown() {
  _oneof_case_[0] = kUnknown;
}
void Dimension::clear_unknown() {
  if (has_unknown()) {
    delete dimension_.unknown_;
    clear_has_dimension();
  }
}
 const ::CoreML::Specification::MILSpec::Dimension_UnknownDimension& Dimension::unknown() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Dimension.unknown)
  return has_unknown()
      ? *dimension_.unknown_
      : ::CoreML::Specification::MILSpec::Dimension_UnknownDimension::default_instance();
}
::CoreML::Specification::MILSpec::Dimension_UnknownDimension* Dimension::mutable_unknown() {
  if (!has_unknown()) {
    clear_dimension();
    set_has_unknown();
    dimension_.unknown_ = new ::CoreML::Specification::MILSpec::Dimension_UnknownDimension;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Dimension.unknown)
  return dimension_.unknown_;
}
::CoreML::Specification::MILSpec::Dimension_UnknownDimension* Dimension::release_unknown() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Dimension.unknown)
  if (has_unknown()) {
    clear_has_dimension();
    ::CoreML::Specification::MILSpec::Dimension_UnknownDimension* temp = dimension_.unknown_;
    dimension_.unknown_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Dimension::set_allocated_unknown(::CoreML::Specification::MILSpec::Dimension_UnknownDimension* unknown) {
  clear_dimension();
  if (unknown) {
    set_has_unknown();
    dimension_.unknown_ = unknown;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Dimension.unknown)
}

bool Dimension::has_dimension() const {
  return dimension_case() != DIMENSION_NOT_SET;
}
void Dimension::clear_has_dimension() {
  _oneof_case_[0] = DIMENSION_NOT_SET;
}
Dimension::DimensionCase Dimension::dimension_case() const {
  return Dimension::DimensionCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value_ImmediateValue::kTensorFieldNumber;
const int Value_ImmediateValue::kTupleFieldNumber;
const int Value_ImmediateValue::kListFieldNumber;
const int Value_ImmediateValue::kDictionaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value_ImmediateValue::Value_ImmediateValue()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.Value.ImmediateValue)
}
Value_ImmediateValue::Value_ImmediateValue(const Value_ImmediateValue& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kTensor: {
      mutable_tensor()->::CoreML::Specification::MILSpec::TensorValue::MergeFrom(from.tensor());
      break;
    }
    case kTuple: {
      mutable_tuple()->::CoreML::Specification::MILSpec::TupleValue::MergeFrom(from.tuple());
      break;
    }
    case kList: {
      mutable_list()->::CoreML::Specification::MILSpec::ListValue::MergeFrom(from.list());
      break;
    }
    case kDictionary: {
      mutable_dictionary()->::CoreML::Specification::MILSpec::DictionaryValue::MergeFrom(from.dictionary());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.Value.ImmediateValue)
}

void Value_ImmediateValue::SharedCtor() {
  clear_has_value();
  _cached_size_ = 0;
}

Value_ImmediateValue::~Value_ImmediateValue() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.Value.ImmediateValue)
  SharedDtor();
}

void Value_ImmediateValue::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void Value_ImmediateValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Value_ImmediateValue& Value_ImmediateValue::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

Value_ImmediateValue* Value_ImmediateValue::New(::google::protobuf::Arena* arena) const {
  Value_ImmediateValue* n = new Value_ImmediateValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value_ImmediateValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.MILSpec.Value.ImmediateValue)
  switch (value_case()) {
    case kTensor: {
      delete value_.tensor_;
      break;
    }
    case kTuple: {
      delete value_.tuple_;
      break;
    }
    case kList: {
      delete value_.list_;
      break;
    }
    case kDictionary: {
      delete value_.dictionary_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Value_ImmediateValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.Value.ImmediateValue)
  clear_value();
}

bool Value_ImmediateValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.Value.ImmediateValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CoreML.Specification.MILSpec.TensorValue tensor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.TupleValue tuple = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuple()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.ListValue list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.DictionaryValue dictionary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dictionary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.Value.ImmediateValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.Value.ImmediateValue)
  return false;
#undef DO_
}

void Value_ImmediateValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.Value.ImmediateValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CoreML.Specification.MILSpec.TensorValue tensor = 1;
  if (has_tensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *value_.tensor_, output);
  }

  // .CoreML.Specification.MILSpec.TupleValue tuple = 2;
  if (has_tuple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *value_.tuple_, output);
  }

  // .CoreML.Specification.MILSpec.ListValue list = 3;
  if (has_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *value_.list_, output);
  }

  // .CoreML.Specification.MILSpec.DictionaryValue dictionary = 4;
  if (has_dictionary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *value_.dictionary_, output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.Value.ImmediateValue)
}

size_t Value_ImmediateValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.Value.ImmediateValue)
  size_t total_size = 0;

  switch (value_case()) {
    // .CoreML.Specification.MILSpec.TensorValue tensor = 1;
    case kTensor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.tensor_);
      break;
    }
    // .CoreML.Specification.MILSpec.TupleValue tuple = 2;
    case kTuple: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.tuple_);
      break;
    }
    // .CoreML.Specification.MILSpec.ListValue list = 3;
    case kList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.list_);
      break;
    }
    // .CoreML.Specification.MILSpec.DictionaryValue dictionary = 4;
    case kDictionary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.dictionary_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value_ImmediateValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Value_ImmediateValue*>(&from));
}

void Value_ImmediateValue::MergeFrom(const Value_ImmediateValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.Value.ImmediateValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kTensor: {
      mutable_tensor()->::CoreML::Specification::MILSpec::TensorValue::MergeFrom(from.tensor());
      break;
    }
    case kTuple: {
      mutable_tuple()->::CoreML::Specification::MILSpec::TupleValue::MergeFrom(from.tuple());
      break;
    }
    case kList: {
      mutable_list()->::CoreML::Specification::MILSpec::ListValue::MergeFrom(from.list());
      break;
    }
    case kDictionary: {
      mutable_dictionary()->::CoreML::Specification::MILSpec::DictionaryValue::MergeFrom(from.dictionary());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Value_ImmediateValue::CopyFrom(const Value_ImmediateValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.Value.ImmediateValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_ImmediateValue::IsInitialized() const {
  return true;
}

void Value_ImmediateValue::Swap(Value_ImmediateValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value_ImmediateValue::InternalSwap(Value_ImmediateValue* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Value_ImmediateValue::GetTypeName() const {
  return "CoreML.Specification.MILSpec.Value.ImmediateValue";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value_ImmediateValue

// .CoreML.Specification.MILSpec.TensorValue tensor = 1;
bool Value_ImmediateValue::has_tensor() const {
  return value_case() == kTensor;
}
void Value_ImmediateValue::set_has_tensor() {
  _oneof_case_[0] = kTensor;
}
void Value_ImmediateValue::clear_tensor() {
  if (has_tensor()) {
    delete value_.tensor_;
    clear_has_value();
  }
}
 const ::CoreML::Specification::MILSpec::TensorValue& Value_ImmediateValue::tensor() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Value.ImmediateValue.tensor)
  return has_tensor()
      ? *value_.tensor_
      : ::CoreML::Specification::MILSpec::TensorValue::default_instance();
}
::CoreML::Specification::MILSpec::TensorValue* Value_ImmediateValue::mutable_tensor() {
  if (!has_tensor()) {
    clear_value();
    set_has_tensor();
    value_.tensor_ = new ::CoreML::Specification::MILSpec::TensorValue;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Value.ImmediateValue.tensor)
  return value_.tensor_;
}
::CoreML::Specification::MILSpec::TensorValue* Value_ImmediateValue::release_tensor() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Value.ImmediateValue.tensor)
  if (has_tensor()) {
    clear_has_value();
    ::CoreML::Specification::MILSpec::TensorValue* temp = value_.tensor_;
    value_.tensor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Value_ImmediateValue::set_allocated_tensor(::CoreML::Specification::MILSpec::TensorValue* tensor) {
  clear_value();
  if (tensor) {
    set_has_tensor();
    value_.tensor_ = tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Value.ImmediateValue.tensor)
}

// .CoreML.Specification.MILSpec.TupleValue tuple = 2;
bool Value_ImmediateValue::has_tuple() const {
  return value_case() == kTuple;
}
void Value_ImmediateValue::set_has_tuple() {
  _oneof_case_[0] = kTuple;
}
void Value_ImmediateValue::clear_tuple() {
  if (has_tuple()) {
    delete value_.tuple_;
    clear_has_value();
  }
}
 const ::CoreML::Specification::MILSpec::TupleValue& Value_ImmediateValue::tuple() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Value.ImmediateValue.tuple)
  return has_tuple()
      ? *value_.tuple_
      : ::CoreML::Specification::MILSpec::TupleValue::default_instance();
}
::CoreML::Specification::MILSpec::TupleValue* Value_ImmediateValue::mutable_tuple() {
  if (!has_tuple()) {
    clear_value();
    set_has_tuple();
    value_.tuple_ = new ::CoreML::Specification::MILSpec::TupleValue;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Value.ImmediateValue.tuple)
  return value_.tuple_;
}
::CoreML::Specification::MILSpec::TupleValue* Value_ImmediateValue::release_tuple() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Value.ImmediateValue.tuple)
  if (has_tuple()) {
    clear_has_value();
    ::CoreML::Specification::MILSpec::TupleValue* temp = value_.tuple_;
    value_.tuple_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Value_ImmediateValue::set_allocated_tuple(::CoreML::Specification::MILSpec::TupleValue* tuple) {
  clear_value();
  if (tuple) {
    set_has_tuple();
    value_.tuple_ = tuple;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Value.ImmediateValue.tuple)
}

// .CoreML.Specification.MILSpec.ListValue list = 3;
bool Value_ImmediateValue::has_list() const {
  return value_case() == kList;
}
void Value_ImmediateValue::set_has_list() {
  _oneof_case_[0] = kList;
}
void Value_ImmediateValue::clear_list() {
  if (has_list()) {
    delete value_.list_;
    clear_has_value();
  }
}
 const ::CoreML::Specification::MILSpec::ListValue& Value_ImmediateValue::list() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Value.ImmediateValue.list)
  return has_list()
      ? *value_.list_
      : ::CoreML::Specification::MILSpec::ListValue::default_instance();
}
::CoreML::Specification::MILSpec::ListValue* Value_ImmediateValue::mutable_list() {
  if (!has_list()) {
    clear_value();
    set_has_list();
    value_.list_ = new ::CoreML::Specification::MILSpec::ListValue;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Value.ImmediateValue.list)
  return value_.list_;
}
::CoreML::Specification::MILSpec::ListValue* Value_ImmediateValue::release_list() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Value.ImmediateValue.list)
  if (has_list()) {
    clear_has_value();
    ::CoreML::Specification::MILSpec::ListValue* temp = value_.list_;
    value_.list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Value_ImmediateValue::set_allocated_list(::CoreML::Specification::MILSpec::ListValue* list) {
  clear_value();
  if (list) {
    set_has_list();
    value_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Value.ImmediateValue.list)
}

// .CoreML.Specification.MILSpec.DictionaryValue dictionary = 4;
bool Value_ImmediateValue::has_dictionary() const {
  return value_case() == kDictionary;
}
void Value_ImmediateValue::set_has_dictionary() {
  _oneof_case_[0] = kDictionary;
}
void Value_ImmediateValue::clear_dictionary() {
  if (has_dictionary()) {
    delete value_.dictionary_;
    clear_has_value();
  }
}
 const ::CoreML::Specification::MILSpec::DictionaryValue& Value_ImmediateValue::dictionary() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Value.ImmediateValue.dictionary)
  return has_dictionary()
      ? *value_.dictionary_
      : ::CoreML::Specification::MILSpec::DictionaryValue::default_instance();
}
::CoreML::Specification::MILSpec::DictionaryValue* Value_ImmediateValue::mutable_dictionary() {
  if (!has_dictionary()) {
    clear_value();
    set_has_dictionary();
    value_.dictionary_ = new ::CoreML::Specification::MILSpec::DictionaryValue;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Value.ImmediateValue.dictionary)
  return value_.dictionary_;
}
::CoreML::Specification::MILSpec::DictionaryValue* Value_ImmediateValue::release_dictionary() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Value.ImmediateValue.dictionary)
  if (has_dictionary()) {
    clear_has_value();
    ::CoreML::Specification::MILSpec::DictionaryValue* temp = value_.dictionary_;
    value_.dictionary_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Value_ImmediateValue::set_allocated_dictionary(::CoreML::Specification::MILSpec::DictionaryValue* dictionary) {
  clear_value();
  if (dictionary) {
    set_has_dictionary();
    value_.dictionary_ = dictionary;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Value.ImmediateValue.dictionary)
}

bool Value_ImmediateValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void Value_ImmediateValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
Value_ImmediateValue::ValueCase Value_ImmediateValue::value_case() const {
  return Value_ImmediateValue::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value_BlobFileValue::kFileNameFieldNumber;
const int Value_BlobFileValue::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value_BlobFileValue::Value_BlobFileValue()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.Value.BlobFileValue)
}
Value_BlobFileValue::Value_BlobFileValue(const Value_BlobFileValue& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.Value.BlobFileValue)
}

void Value_BlobFileValue::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Value_BlobFileValue::~Value_BlobFileValue() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.Value.BlobFileValue)
  SharedDtor();
}

void Value_BlobFileValue::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Value_BlobFileValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Value_BlobFileValue& Value_BlobFileValue::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

Value_BlobFileValue* Value_BlobFileValue::New(::google::protobuf::Arena* arena) const {
  Value_BlobFileValue* n = new Value_BlobFileValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value_BlobFileValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.Value.BlobFileValue)
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = GOOGLE_ULONGLONG(0);
}

bool Value_BlobFileValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.Value.BlobFileValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string fileName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.Value.BlobFileValue.fileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.Value.BlobFileValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.Value.BlobFileValue)
  return false;
#undef DO_
}

void Value_BlobFileValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.Value.BlobFileValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CoreML.Specification.MILSpec.Value.BlobFileValue.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->offset(), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.Value.BlobFileValue)
}

size_t Value_BlobFileValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.Value.BlobFileValue)
  size_t total_size = 0;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value_BlobFileValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Value_BlobFileValue*>(&from));
}

void Value_BlobFileValue::MergeFrom(const Value_BlobFileValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.Value.BlobFileValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void Value_BlobFileValue::CopyFrom(const Value_BlobFileValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.Value.BlobFileValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_BlobFileValue::IsInitialized() const {
  return true;
}

void Value_BlobFileValue::Swap(Value_BlobFileValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value_BlobFileValue::InternalSwap(Value_BlobFileValue* other) {
  filename_.Swap(&other->filename_);
  std::swap(offset_, other->offset_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Value_BlobFileValue::GetTypeName() const {
  return "CoreML.Specification.MILSpec.Value.BlobFileValue";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value_BlobFileValue

// string fileName = 1;
void Value_BlobFileValue::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Value_BlobFileValue::filename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Value.BlobFileValue.fileName)
  return filename_.GetNoArena();
}
void Value_BlobFileValue::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.Value.BlobFileValue.fileName)
}
#if LANG_CXX11
void Value_BlobFileValue::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.MILSpec.Value.BlobFileValue.fileName)
}
#endif
void Value_BlobFileValue::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.MILSpec.Value.BlobFileValue.fileName)
}
void Value_BlobFileValue::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.MILSpec.Value.BlobFileValue.fileName)
}
::std::string* Value_BlobFileValue::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Value.BlobFileValue.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Value_BlobFileValue::release_filename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Value.BlobFileValue.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Value_BlobFileValue::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Value.BlobFileValue.fileName)
}

// uint64 offset = 2;
void Value_BlobFileValue::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Value_BlobFileValue::offset() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Value.BlobFileValue.offset)
  return offset_;
}
void Value_BlobFileValue::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.Value.BlobFileValue.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kDocStringFieldNumber;
const int Value::kTypeFieldNumber;
const int Value::kImmediateValueFieldNumber;
const int Value::kBlobFileValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.Value)
}
Value::Value(const Value& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  docstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.docstring().size() > 0) {
    docstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docstring_);
  }
  if (from.has_type()) {
    type_ = new ::CoreML::Specification::MILSpec::ValueType(*from.type_);
  } else {
    type_ = NULL;
  }
  clear_has_value();
  switch (from.value_case()) {
    case kImmediateValue: {
      mutable_immediatevalue()->::CoreML::Specification::MILSpec::Value_ImmediateValue::MergeFrom(from.immediatevalue());
      break;
    }
    case kBlobFileValue: {
      mutable_blobfilevalue()->::CoreML::Specification::MILSpec::Value_BlobFileValue::MergeFrom(from.blobfilevalue());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.Value)
}

void Value::SharedCtor() {
  docstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = NULL;
  clear_has_value();
  _cached_size_ = 0;
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  docstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete type_;
  }
  if (has_value()) {
    clear_value();
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Value& Value::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

Value* Value::New(::google::protobuf::Arena* arena) const {
  Value* n = new Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.MILSpec.Value)
  switch (value_case()) {
    case kImmediateValue: {
      delete value_.immediatevalue_;
      break;
    }
    case kBlobFileValue: {
      delete value_.blobfilevalue_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.Value)
  docstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && type_ != NULL) {
    delete type_;
  }
  type_ = NULL;
  clear_value();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string docString = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docstring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->docstring().data(), this->docstring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.Value.docString"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.ValueType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.Value.ImmediateValue immediateValue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_immediatevalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.Value.BlobFileValue blobFileValue = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blobfilevalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string docString = 1;
  if (this->docstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->docstring().data(), this->docstring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CoreML.Specification.MILSpec.Value.docString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->docstring(), output);
  }

  // .CoreML.Specification.MILSpec.ValueType type = 2;
  if (this->has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->type_, output);
  }

  // .CoreML.Specification.MILSpec.Value.ImmediateValue immediateValue = 3;
  if (has_immediatevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *value_.immediatevalue_, output);
  }

  // .CoreML.Specification.MILSpec.Value.BlobFileValue blobFileValue = 5;
  if (has_blobfilevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *value_.blobfilevalue_, output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.Value)
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.Value)
  size_t total_size = 0;

  // string docString = 1;
  if (this->docstring().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->docstring());
  }

  // .CoreML.Specification.MILSpec.ValueType type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->type_);
  }

  switch (value_case()) {
    // .CoreML.Specification.MILSpec.Value.ImmediateValue immediateValue = 3;
    case kImmediateValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.immediatevalue_);
      break;
    }
    // .CoreML.Specification.MILSpec.Value.BlobFileValue blobFileValue = 5;
    case kBlobFileValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.blobfilevalue_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Value*>(&from));
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.docstring().size() > 0) {

    docstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docstring_);
  }
  if (from.has_type()) {
    mutable_type()->::CoreML::Specification::MILSpec::ValueType::MergeFrom(from.type());
  }
  switch (from.value_case()) {
    case kImmediateValue: {
      mutable_immediatevalue()->::CoreML::Specification::MILSpec::Value_ImmediateValue::MergeFrom(from.immediatevalue());
      break;
    }
    case kBlobFileValue: {
      mutable_blobfilevalue()->::CoreML::Specification::MILSpec::Value_BlobFileValue::MergeFrom(from.blobfilevalue());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  docstring_.Swap(&other->docstring_);
  std::swap(type_, other->type_);
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Value::GetTypeName() const {
  return "CoreML.Specification.MILSpec.Value";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value

// string docString = 1;
void Value::clear_docstring() {
  docstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Value::docstring() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Value.docString)
  return docstring_.GetNoArena();
}
void Value::set_docstring(const ::std::string& value) {
  
  docstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.Value.docString)
}
#if LANG_CXX11
void Value::set_docstring(::std::string&& value) {
  
  docstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.MILSpec.Value.docString)
}
#endif
void Value::set_docstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  docstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.MILSpec.Value.docString)
}
void Value::set_docstring(const char* value, size_t size) {
  
  docstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.MILSpec.Value.docString)
}
::std::string* Value::mutable_docstring() {
  
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Value.docString)
  return docstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Value::release_docstring() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Value.docString)
  
  return docstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Value::set_allocated_docstring(::std::string* docstring) {
  if (docstring != NULL) {
    
  } else {
    
  }
  docstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docstring);
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Value.docString)
}

// .CoreML.Specification.MILSpec.ValueType type = 2;
bool Value::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
void Value::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) delete type_;
  type_ = NULL;
}
const ::CoreML::Specification::MILSpec::ValueType& Value::type() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Value.type)
  return type_ != NULL ? *type_
                         : *::CoreML::Specification::MILSpec::ValueType::internal_default_instance();
}
::CoreML::Specification::MILSpec::ValueType* Value::mutable_type() {
  
  if (type_ == NULL) {
    type_ = new ::CoreML::Specification::MILSpec::ValueType;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Value.type)
  return type_;
}
::CoreML::Specification::MILSpec::ValueType* Value::release_type() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Value.type)
  
  ::CoreML::Specification::MILSpec::ValueType* temp = type_;
  type_ = NULL;
  return temp;
}
void Value::set_allocated_type(::CoreML::Specification::MILSpec::ValueType* type) {
  delete type_;
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Value.type)
}

// .CoreML.Specification.MILSpec.Value.ImmediateValue immediateValue = 3;
bool Value::has_immediatevalue() const {
  return value_case() == kImmediateValue;
}
void Value::set_has_immediatevalue() {
  _oneof_case_[0] = kImmediateValue;
}
void Value::clear_immediatevalue() {
  if (has_immediatevalue()) {
    delete value_.immediatevalue_;
    clear_has_value();
  }
}
 const ::CoreML::Specification::MILSpec::Value_ImmediateValue& Value::immediatevalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Value.immediateValue)
  return has_immediatevalue()
      ? *value_.immediatevalue_
      : ::CoreML::Specification::MILSpec::Value_ImmediateValue::default_instance();
}
::CoreML::Specification::MILSpec::Value_ImmediateValue* Value::mutable_immediatevalue() {
  if (!has_immediatevalue()) {
    clear_value();
    set_has_immediatevalue();
    value_.immediatevalue_ = new ::CoreML::Specification::MILSpec::Value_ImmediateValue;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Value.immediateValue)
  return value_.immediatevalue_;
}
::CoreML::Specification::MILSpec::Value_ImmediateValue* Value::release_immediatevalue() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Value.immediateValue)
  if (has_immediatevalue()) {
    clear_has_value();
    ::CoreML::Specification::MILSpec::Value_ImmediateValue* temp = value_.immediatevalue_;
    value_.immediatevalue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Value::set_allocated_immediatevalue(::CoreML::Specification::MILSpec::Value_ImmediateValue* immediatevalue) {
  clear_value();
  if (immediatevalue) {
    set_has_immediatevalue();
    value_.immediatevalue_ = immediatevalue;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Value.immediateValue)
}

// .CoreML.Specification.MILSpec.Value.BlobFileValue blobFileValue = 5;
bool Value::has_blobfilevalue() const {
  return value_case() == kBlobFileValue;
}
void Value::set_has_blobfilevalue() {
  _oneof_case_[0] = kBlobFileValue;
}
void Value::clear_blobfilevalue() {
  if (has_blobfilevalue()) {
    delete value_.blobfilevalue_;
    clear_has_value();
  }
}
 const ::CoreML::Specification::MILSpec::Value_BlobFileValue& Value::blobfilevalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.Value.blobFileValue)
  return has_blobfilevalue()
      ? *value_.blobfilevalue_
      : ::CoreML::Specification::MILSpec::Value_BlobFileValue::default_instance();
}
::CoreML::Specification::MILSpec::Value_BlobFileValue* Value::mutable_blobfilevalue() {
  if (!has_blobfilevalue()) {
    clear_value();
    set_has_blobfilevalue();
    value_.blobfilevalue_ = new ::CoreML::Specification::MILSpec::Value_BlobFileValue;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.Value.blobFileValue)
  return value_.blobfilevalue_;
}
::CoreML::Specification::MILSpec::Value_BlobFileValue* Value::release_blobfilevalue() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.Value.blobFileValue)
  if (has_blobfilevalue()) {
    clear_has_value();
    ::CoreML::Specification::MILSpec::Value_BlobFileValue* temp = value_.blobfilevalue_;
    value_.blobfilevalue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Value::set_allocated_blobfilevalue(::CoreML::Specification::MILSpec::Value_BlobFileValue* blobfilevalue) {
  clear_value();
  if (blobfilevalue) {
    set_has_blobfilevalue();
    value_.blobfilevalue_ = blobfilevalue;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.Value.blobFileValue)
}

bool Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
Value::ValueCase Value::value_case() const {
  return Value::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorValue_RepeatedFloats::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorValue_RepeatedFloats::TensorValue_RepeatedFloats()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats)
}
TensorValue_RepeatedFloats::TensorValue_RepeatedFloats(const TensorValue_RepeatedFloats& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats)
}

void TensorValue_RepeatedFloats::SharedCtor() {
  _cached_size_ = 0;
}

TensorValue_RepeatedFloats::~TensorValue_RepeatedFloats() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats)
  SharedDtor();
}

void TensorValue_RepeatedFloats::SharedDtor() {
}

void TensorValue_RepeatedFloats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TensorValue_RepeatedFloats& TensorValue_RepeatedFloats::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorValue_RepeatedFloats* TensorValue_RepeatedFloats::New(::google::protobuf::Arena* arena) const {
  TensorValue_RepeatedFloats* n = new TensorValue_RepeatedFloats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorValue_RepeatedFloats::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats)
  values_.Clear();
}

bool TensorValue_RepeatedFloats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float values = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_values())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats)
  return false;
#undef DO_
}

void TensorValue_RepeatedFloats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float values = 1 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->values().data(), this->values_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats)
}

size_t TensorValue_RepeatedFloats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats)
  size_t total_size = 0;

  // repeated float values = 1 [packed = true];
  {
    unsigned int count = this->values_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorValue_RepeatedFloats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TensorValue_RepeatedFloats*>(&from));
}

void TensorValue_RepeatedFloats::MergeFrom(const TensorValue_RepeatedFloats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void TensorValue_RepeatedFloats::CopyFrom(const TensorValue_RepeatedFloats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorValue_RepeatedFloats::IsInitialized() const {
  return true;
}

void TensorValue_RepeatedFloats::Swap(TensorValue_RepeatedFloats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorValue_RepeatedFloats::InternalSwap(TensorValue_RepeatedFloats* other) {
  values_.InternalSwap(&other->values_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TensorValue_RepeatedFloats::GetTypeName() const {
  return "CoreML.Specification.MILSpec.TensorValue.RepeatedFloats";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorValue_RepeatedFloats

// repeated float values = 1 [packed = true];
int TensorValue_RepeatedFloats::values_size() const {
  return values_.size();
}
void TensorValue_RepeatedFloats::clear_values() {
  values_.Clear();
}
float TensorValue_RepeatedFloats::values(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats.values)
  return values_.Get(index);
}
void TensorValue_RepeatedFloats::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats.values)
}
void TensorValue_RepeatedFloats::add_values(float value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats.values)
}
const ::google::protobuf::RepeatedField< float >&
TensorValue_RepeatedFloats::values() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats.values)
  return values_;
}
::google::protobuf::RepeatedField< float >*
TensorValue_RepeatedFloats::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.TensorValue.RepeatedFloats.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorValue_RepeatedDoubles::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles)
}
TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles(const TensorValue_RepeatedDoubles& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles)
}

void TensorValue_RepeatedDoubles::SharedCtor() {
  _cached_size_ = 0;
}

TensorValue_RepeatedDoubles::~TensorValue_RepeatedDoubles() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles)
  SharedDtor();
}

void TensorValue_RepeatedDoubles::SharedDtor() {
}

void TensorValue_RepeatedDoubles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TensorValue_RepeatedDoubles& TensorValue_RepeatedDoubles::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorValue_RepeatedDoubles* TensorValue_RepeatedDoubles::New(::google::protobuf::Arena* arena) const {
  TensorValue_RepeatedDoubles* n = new TensorValue_RepeatedDoubles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorValue_RepeatedDoubles::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles)
  values_.Clear();
}

bool TensorValue_RepeatedDoubles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double values = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles)
  return false;
#undef DO_
}

void TensorValue_RepeatedDoubles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double values = 1 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->values().data(), this->values_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles)
}

size_t TensorValue_RepeatedDoubles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles)
  size_t total_size = 0;

  // repeated double values = 1 [packed = true];
  {
    unsigned int count = this->values_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorValue_RepeatedDoubles::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TensorValue_RepeatedDoubles*>(&from));
}

void TensorValue_RepeatedDoubles::MergeFrom(const TensorValue_RepeatedDoubles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void TensorValue_RepeatedDoubles::CopyFrom(const TensorValue_RepeatedDoubles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorValue_RepeatedDoubles::IsInitialized() const {
  return true;
}

void TensorValue_RepeatedDoubles::Swap(TensorValue_RepeatedDoubles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorValue_RepeatedDoubles::InternalSwap(TensorValue_RepeatedDoubles* other) {
  values_.InternalSwap(&other->values_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TensorValue_RepeatedDoubles::GetTypeName() const {
  return "CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorValue_RepeatedDoubles

// repeated double values = 1 [packed = true];
int TensorValue_RepeatedDoubles::values_size() const {
  return values_.size();
}
void TensorValue_RepeatedDoubles::clear_values() {
  values_.Clear();
}
double TensorValue_RepeatedDoubles::values(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles.values)
  return values_.Get(index);
}
void TensorValue_RepeatedDoubles::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles.values)
}
void TensorValue_RepeatedDoubles::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles.values)
}
const ::google::protobuf::RepeatedField< double >&
TensorValue_RepeatedDoubles::values() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles.values)
  return values_;
}
::google::protobuf::RepeatedField< double >*
TensorValue_RepeatedDoubles::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorValue_RepeatedInts::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorValue_RepeatedInts::TensorValue_RepeatedInts()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.TensorValue.RepeatedInts)
}
TensorValue_RepeatedInts::TensorValue_RepeatedInts(const TensorValue_RepeatedInts& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.TensorValue.RepeatedInts)
}

void TensorValue_RepeatedInts::SharedCtor() {
  _cached_size_ = 0;
}

TensorValue_RepeatedInts::~TensorValue_RepeatedInts() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.TensorValue.RepeatedInts)
  SharedDtor();
}

void TensorValue_RepeatedInts::SharedDtor() {
}

void TensorValue_RepeatedInts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TensorValue_RepeatedInts& TensorValue_RepeatedInts::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorValue_RepeatedInts* TensorValue_RepeatedInts::New(::google::protobuf::Arena* arena) const {
  TensorValue_RepeatedInts* n = new TensorValue_RepeatedInts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorValue_RepeatedInts::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.TensorValue.RepeatedInts)
  values_.Clear();
}

bool TensorValue_RepeatedInts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.TensorValue.RepeatedInts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 values = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.TensorValue.RepeatedInts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.TensorValue.RepeatedInts)
  return false;
#undef DO_
}

void TensorValue_RepeatedInts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.TensorValue.RepeatedInts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 values = 1 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
  }
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.TensorValue.RepeatedInts)
}

size_t TensorValue_RepeatedInts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.TensorValue.RepeatedInts)
  size_t total_size = 0;

  // repeated int32 values = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorValue_RepeatedInts::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TensorValue_RepeatedInts*>(&from));
}

void TensorValue_RepeatedInts::MergeFrom(const TensorValue_RepeatedInts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.TensorValue.RepeatedInts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void TensorValue_RepeatedInts::CopyFrom(const TensorValue_RepeatedInts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.TensorValue.RepeatedInts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorValue_RepeatedInts::IsInitialized() const {
  return true;
}

void TensorValue_RepeatedInts::Swap(TensorValue_RepeatedInts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorValue_RepeatedInts::InternalSwap(TensorValue_RepeatedInts* other) {
  values_.InternalSwap(&other->values_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TensorValue_RepeatedInts::GetTypeName() const {
  return "CoreML.Specification.MILSpec.TensorValue.RepeatedInts";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorValue_RepeatedInts

// repeated int32 values = 1 [packed = true];
int TensorValue_RepeatedInts::values_size() const {
  return values_.size();
}
void TensorValue_RepeatedInts::clear_values() {
  values_.Clear();
}
::google::protobuf::int32 TensorValue_RepeatedInts::values(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorValue.RepeatedInts.values)
  return values_.Get(index);
}
void TensorValue_RepeatedInts::set_values(int index, ::google::protobuf::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.TensorValue.RepeatedInts.values)
}
void TensorValue_RepeatedInts::add_values(::google::protobuf::int32 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.TensorValue.RepeatedInts.values)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorValue_RepeatedInts::values() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.TensorValue.RepeatedInts.values)
  return values_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorValue_RepeatedInts::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.TensorValue.RepeatedInts.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorValue_RepeatedLongInts::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts)
}
TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts(const TensorValue_RepeatedLongInts& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts)
}

void TensorValue_RepeatedLongInts::SharedCtor() {
  _cached_size_ = 0;
}

TensorValue_RepeatedLongInts::~TensorValue_RepeatedLongInts() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts)
  SharedDtor();
}

void TensorValue_RepeatedLongInts::SharedDtor() {
}

void TensorValue_RepeatedLongInts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TensorValue_RepeatedLongInts& TensorValue_RepeatedLongInts::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorValue_RepeatedLongInts* TensorValue_RepeatedLongInts::New(::google::protobuf::Arena* arena) const {
  TensorValue_RepeatedLongInts* n = new TensorValue_RepeatedLongInts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorValue_RepeatedLongInts::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts)
  values_.Clear();
}

bool TensorValue_RepeatedLongInts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 values = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_values())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts)
  return false;
#undef DO_
}

void TensorValue_RepeatedLongInts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 values = 1 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
  }
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts)
}

size_t TensorValue_RepeatedLongInts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts)
  size_t total_size = 0;

  // repeated int64 values = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorValue_RepeatedLongInts::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TensorValue_RepeatedLongInts*>(&from));
}

void TensorValue_RepeatedLongInts::MergeFrom(const TensorValue_RepeatedLongInts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void TensorValue_RepeatedLongInts::CopyFrom(const TensorValue_RepeatedLongInts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorValue_RepeatedLongInts::IsInitialized() const {
  return true;
}

void TensorValue_RepeatedLongInts::Swap(TensorValue_RepeatedLongInts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorValue_RepeatedLongInts::InternalSwap(TensorValue_RepeatedLongInts* other) {
  values_.InternalSwap(&other->values_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TensorValue_RepeatedLongInts::GetTypeName() const {
  return "CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorValue_RepeatedLongInts

// repeated int64 values = 1 [packed = true];
int TensorValue_RepeatedLongInts::values_size() const {
  return values_.size();
}
void TensorValue_RepeatedLongInts::clear_values() {
  values_.Clear();
}
::google::protobuf::int64 TensorValue_RepeatedLongInts::values(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts.values)
  return values_.Get(index);
}
void TensorValue_RepeatedLongInts::set_values(int index, ::google::protobuf::int64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts.values)
}
void TensorValue_RepeatedLongInts::add_values(::google::protobuf::int64 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts.values)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorValue_RepeatedLongInts::values() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts.values)
  return values_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorValue_RepeatedLongInts::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorValue_RepeatedBools::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorValue_RepeatedBools::TensorValue_RepeatedBools()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.TensorValue.RepeatedBools)
}
TensorValue_RepeatedBools::TensorValue_RepeatedBools(const TensorValue_RepeatedBools& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.TensorValue.RepeatedBools)
}

void TensorValue_RepeatedBools::SharedCtor() {
  _cached_size_ = 0;
}

TensorValue_RepeatedBools::~TensorValue_RepeatedBools() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.TensorValue.RepeatedBools)
  SharedDtor();
}

void TensorValue_RepeatedBools::SharedDtor() {
}

void TensorValue_RepeatedBools::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TensorValue_RepeatedBools& TensorValue_RepeatedBools::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorValue_RepeatedBools* TensorValue_RepeatedBools::New(::google::protobuf::Arena* arena) const {
  TensorValue_RepeatedBools* n = new TensorValue_RepeatedBools;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorValue_RepeatedBools::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.TensorValue.RepeatedBools)
  values_.Clear();
}

bool TensorValue_RepeatedBools::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.TensorValue.RepeatedBools)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool values = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_values())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10u, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.TensorValue.RepeatedBools)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.TensorValue.RepeatedBools)
  return false;
#undef DO_
}

void TensorValue_RepeatedBools::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.TensorValue.RepeatedBools)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool values = 1 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->values().data(), this->values_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.TensorValue.RepeatedBools)
}

size_t TensorValue_RepeatedBools::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.TensorValue.RepeatedBools)
  size_t total_size = 0;

  // repeated bool values = 1 [packed = true];
  {
    unsigned int count = this->values_size();
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorValue_RepeatedBools::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TensorValue_RepeatedBools*>(&from));
}

void TensorValue_RepeatedBools::MergeFrom(const TensorValue_RepeatedBools& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.TensorValue.RepeatedBools)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void TensorValue_RepeatedBools::CopyFrom(const TensorValue_RepeatedBools& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.TensorValue.RepeatedBools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorValue_RepeatedBools::IsInitialized() const {
  return true;
}

void TensorValue_RepeatedBools::Swap(TensorValue_RepeatedBools* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorValue_RepeatedBools::InternalSwap(TensorValue_RepeatedBools* other) {
  values_.InternalSwap(&other->values_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TensorValue_RepeatedBools::GetTypeName() const {
  return "CoreML.Specification.MILSpec.TensorValue.RepeatedBools";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorValue_RepeatedBools

// repeated bool values = 1 [packed = true];
int TensorValue_RepeatedBools::values_size() const {
  return values_.size();
}
void TensorValue_RepeatedBools::clear_values() {
  values_.Clear();
}
bool TensorValue_RepeatedBools::values(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorValue.RepeatedBools.values)
  return values_.Get(index);
}
void TensorValue_RepeatedBools::set_values(int index, bool value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.TensorValue.RepeatedBools.values)
}
void TensorValue_RepeatedBools::add_values(bool value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.TensorValue.RepeatedBools.values)
}
const ::google::protobuf::RepeatedField< bool >&
TensorValue_RepeatedBools::values() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.TensorValue.RepeatedBools.values)
  return values_;
}
::google::protobuf::RepeatedField< bool >*
TensorValue_RepeatedBools::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.TensorValue.RepeatedBools.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorValue_RepeatedStrings::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorValue_RepeatedStrings::TensorValue_RepeatedStrings()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings)
}
TensorValue_RepeatedStrings::TensorValue_RepeatedStrings(const TensorValue_RepeatedStrings& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings)
}

void TensorValue_RepeatedStrings::SharedCtor() {
  _cached_size_ = 0;
}

TensorValue_RepeatedStrings::~TensorValue_RepeatedStrings() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings)
  SharedDtor();
}

void TensorValue_RepeatedStrings::SharedDtor() {
}

void TensorValue_RepeatedStrings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TensorValue_RepeatedStrings& TensorValue_RepeatedStrings::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorValue_RepeatedStrings* TensorValue_RepeatedStrings::New(::google::protobuf::Arena* arena) const {
  TensorValue_RepeatedStrings* n = new TensorValue_RepeatedStrings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorValue_RepeatedStrings::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings)
  values_.Clear();
}

bool TensorValue_RepeatedStrings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings)
  return false;
#undef DO_
}

void TensorValue_RepeatedStrings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings)
}

size_t TensorValue_RepeatedStrings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings)
  size_t total_size = 0;

  // repeated string values = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  for (int i = 0, n = this->values_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorValue_RepeatedStrings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TensorValue_RepeatedStrings*>(&from));
}

void TensorValue_RepeatedStrings::MergeFrom(const TensorValue_RepeatedStrings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void TensorValue_RepeatedStrings::CopyFrom(const TensorValue_RepeatedStrings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorValue_RepeatedStrings::IsInitialized() const {
  return true;
}

void TensorValue_RepeatedStrings::Swap(TensorValue_RepeatedStrings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorValue_RepeatedStrings::InternalSwap(TensorValue_RepeatedStrings* other) {
  values_.InternalSwap(&other->values_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TensorValue_RepeatedStrings::GetTypeName() const {
  return "CoreML.Specification.MILSpec.TensorValue.RepeatedStrings";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorValue_RepeatedStrings

// repeated string values = 1;
int TensorValue_RepeatedStrings::values_size() const {
  return values_.size();
}
void TensorValue_RepeatedStrings::clear_values() {
  values_.Clear();
}
const ::std::string& TensorValue_RepeatedStrings::values(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values)
  return values_.Get(index);
}
::std::string* TensorValue_RepeatedStrings::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values)
  return values_.Mutable(index);
}
void TensorValue_RepeatedStrings::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TensorValue_RepeatedStrings::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
void TensorValue_RepeatedStrings::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values)
}
void TensorValue_RepeatedStrings::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values)
}
::std::string* TensorValue_RepeatedStrings::add_values() {
  // @@protoc_insertion_point(field_add_mutable:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values)
  return values_.Add();
}
void TensorValue_RepeatedStrings::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values)
}
#if LANG_CXX11
void TensorValue_RepeatedStrings::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values)
}
#endif
void TensorValue_RepeatedStrings::add_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values)
}
void TensorValue_RepeatedStrings::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TensorValue_RepeatedStrings::values() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values)
  return values_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TensorValue_RepeatedStrings::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.TensorValue.RepeatedStrings.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorValue_RepeatedBytes::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorValue_RepeatedBytes::TensorValue_RepeatedBytes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes)
}
TensorValue_RepeatedBytes::TensorValue_RepeatedBytes(const TensorValue_RepeatedBytes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.values().size() > 0) {
    values_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.values_);
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes)
}

void TensorValue_RepeatedBytes::SharedCtor() {
  values_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TensorValue_RepeatedBytes::~TensorValue_RepeatedBytes() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes)
  SharedDtor();
}

void TensorValue_RepeatedBytes::SharedDtor() {
  values_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TensorValue_RepeatedBytes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TensorValue_RepeatedBytes& TensorValue_RepeatedBytes::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorValue_RepeatedBytes* TensorValue_RepeatedBytes::New(::google::protobuf::Arena* arena) const {
  TensorValue_RepeatedBytes* n = new TensorValue_RepeatedBytes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorValue_RepeatedBytes::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes)
  values_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TensorValue_RepeatedBytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes)
  return false;
#undef DO_
}

void TensorValue_RepeatedBytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes values = 1;
  if (this->values().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->values(), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes)
}

size_t TensorValue_RepeatedBytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes)
  size_t total_size = 0;

  // bytes values = 1;
  if (this->values().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->values());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorValue_RepeatedBytes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TensorValue_RepeatedBytes*>(&from));
}

void TensorValue_RepeatedBytes::MergeFrom(const TensorValue_RepeatedBytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.values().size() > 0) {

    values_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.values_);
  }
}

void TensorValue_RepeatedBytes::CopyFrom(const TensorValue_RepeatedBytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorValue_RepeatedBytes::IsInitialized() const {
  return true;
}

void TensorValue_RepeatedBytes::Swap(TensorValue_RepeatedBytes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorValue_RepeatedBytes::InternalSwap(TensorValue_RepeatedBytes* other) {
  values_.Swap(&other->values_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TensorValue_RepeatedBytes::GetTypeName() const {
  return "CoreML.Specification.MILSpec.TensorValue.RepeatedBytes";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorValue_RepeatedBytes

// bytes values = 1;
void TensorValue_RepeatedBytes::clear_values() {
  values_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TensorValue_RepeatedBytes::values() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes.values)
  return values_.GetNoArena();
}
void TensorValue_RepeatedBytes::set_values(const ::std::string& value) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes.values)
}
#if LANG_CXX11
void TensorValue_RepeatedBytes::set_values(::std::string&& value) {
  
  values_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes.values)
}
#endif
void TensorValue_RepeatedBytes::set_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes.values)
}
void TensorValue_RepeatedBytes::set_values(const void* value, size_t size) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes.values)
}
::std::string* TensorValue_RepeatedBytes::mutable_values() {
  
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes.values)
  return values_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TensorValue_RepeatedBytes::release_values() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes.values)
  
  return values_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TensorValue_RepeatedBytes::set_allocated_values(::std::string* values) {
  if (values != NULL) {
    
  } else {
    
  }
  values_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), values);
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.TensorValue.RepeatedBytes.values)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorValue::kFloatsFieldNumber;
const int TensorValue::kIntsFieldNumber;
const int TensorValue::kBoolsFieldNumber;
const int TensorValue::kStringsFieldNumber;
const int TensorValue::kLongIntsFieldNumber;
const int TensorValue::kDoublesFieldNumber;
const int TensorValue::kBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorValue::TensorValue()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.TensorValue)
}
TensorValue::TensorValue(const TensorValue& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kFloats: {
      mutable_floats()->::CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergeFrom(from.floats());
      break;
    }
    case kInts: {
      mutable_ints()->::CoreML::Specification::MILSpec::TensorValue_RepeatedInts::MergeFrom(from.ints());
      break;
    }
    case kBools: {
      mutable_bools()->::CoreML::Specification::MILSpec::TensorValue_RepeatedBools::MergeFrom(from.bools());
      break;
    }
    case kStrings: {
      mutable_strings()->::CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom(from.strings());
      break;
    }
    case kLongInts: {
      mutable_longints()->::CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom(from.longints());
      break;
    }
    case kDoubles: {
      mutable_doubles()->::CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::MergeFrom(from.doubles());
      break;
    }
    case kBytes: {
      mutable_bytes()->::CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::MergeFrom(from.bytes());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.TensorValue)
}

void TensorValue::SharedCtor() {
  clear_has_value();
  _cached_size_ = 0;
}

TensorValue::~TensorValue() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.TensorValue)
  SharedDtor();
}

void TensorValue::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void TensorValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TensorValue& TensorValue::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorValue* TensorValue::New(::google::protobuf::Arena* arena) const {
  TensorValue* n = new TensorValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.MILSpec.TensorValue)
  switch (value_case()) {
    case kFloats: {
      delete value_.floats_;
      break;
    }
    case kInts: {
      delete value_.ints_;
      break;
    }
    case kBools: {
      delete value_.bools_;
      break;
    }
    case kStrings: {
      delete value_.strings_;
      break;
    }
    case kLongInts: {
      delete value_.longints_;
      break;
    }
    case kDoubles: {
      delete value_.doubles_;
      break;
    }
    case kBytes: {
      delete value_.bytes_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void TensorValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.TensorValue)
  clear_value();
}

bool TensorValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.TensorValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CoreML.Specification.MILSpec.TensorValue.RepeatedFloats floats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_floats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.TensorValue.RepeatedInts ints = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.TensorValue.RepeatedBools bools = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bools()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.TensorValue.RepeatedStrings strings = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts longInts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_longints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles doubles = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doubles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.TensorValue.RepeatedBytes bytes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.TensorValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.TensorValue)
  return false;
#undef DO_
}

void TensorValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.TensorValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CoreML.Specification.MILSpec.TensorValue.RepeatedFloats floats = 1;
  if (has_floats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *value_.floats_, output);
  }

  // .CoreML.Specification.MILSpec.TensorValue.RepeatedInts ints = 2;
  if (has_ints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *value_.ints_, output);
  }

  // .CoreML.Specification.MILSpec.TensorValue.RepeatedBools bools = 3;
  if (has_bools()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *value_.bools_, output);
  }

  // .CoreML.Specification.MILSpec.TensorValue.RepeatedStrings strings = 4;
  if (has_strings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *value_.strings_, output);
  }

  // .CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts longInts = 5;
  if (has_longints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *value_.longints_, output);
  }

  // .CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles doubles = 6;
  if (has_doubles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *value_.doubles_, output);
  }

  // .CoreML.Specification.MILSpec.TensorValue.RepeatedBytes bytes = 7;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *value_.bytes_, output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.TensorValue)
}

size_t TensorValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.TensorValue)
  size_t total_size = 0;

  switch (value_case()) {
    // .CoreML.Specification.MILSpec.TensorValue.RepeatedFloats floats = 1;
    case kFloats: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.floats_);
      break;
    }
    // .CoreML.Specification.MILSpec.TensorValue.RepeatedInts ints = 2;
    case kInts: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.ints_);
      break;
    }
    // .CoreML.Specification.MILSpec.TensorValue.RepeatedBools bools = 3;
    case kBools: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.bools_);
      break;
    }
    // .CoreML.Specification.MILSpec.TensorValue.RepeatedStrings strings = 4;
    case kStrings: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.strings_);
      break;
    }
    // .CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts longInts = 5;
    case kLongInts: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.longints_);
      break;
    }
    // .CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles doubles = 6;
    case kDoubles: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.doubles_);
      break;
    }
    // .CoreML.Specification.MILSpec.TensorValue.RepeatedBytes bytes = 7;
    case kBytes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.bytes_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TensorValue*>(&from));
}

void TensorValue::MergeFrom(const TensorValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.TensorValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kFloats: {
      mutable_floats()->::CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::MergeFrom(from.floats());
      break;
    }
    case kInts: {
      mutable_ints()->::CoreML::Specification::MILSpec::TensorValue_RepeatedInts::MergeFrom(from.ints());
      break;
    }
    case kBools: {
      mutable_bools()->::CoreML::Specification::MILSpec::TensorValue_RepeatedBools::MergeFrom(from.bools());
      break;
    }
    case kStrings: {
      mutable_strings()->::CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::MergeFrom(from.strings());
      break;
    }
    case kLongInts: {
      mutable_longints()->::CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::MergeFrom(from.longints());
      break;
    }
    case kDoubles: {
      mutable_doubles()->::CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::MergeFrom(from.doubles());
      break;
    }
    case kBytes: {
      mutable_bytes()->::CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::MergeFrom(from.bytes());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void TensorValue::CopyFrom(const TensorValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.TensorValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorValue::IsInitialized() const {
  return true;
}

void TensorValue::Swap(TensorValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorValue::InternalSwap(TensorValue* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TensorValue::GetTypeName() const {
  return "CoreML.Specification.MILSpec.TensorValue";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorValue

// .CoreML.Specification.MILSpec.TensorValue.RepeatedFloats floats = 1;
bool TensorValue::has_floats() const {
  return value_case() == kFloats;
}
void TensorValue::set_has_floats() {
  _oneof_case_[0] = kFloats;
}
void TensorValue::clear_floats() {
  if (has_floats()) {
    delete value_.floats_;
    clear_has_value();
  }
}
 const ::CoreML::Specification::MILSpec::TensorValue_RepeatedFloats& TensorValue::floats() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorValue.floats)
  return has_floats()
      ? *value_.floats_
      : ::CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::default_instance();
}
::CoreML::Specification::MILSpec::TensorValue_RepeatedFloats* TensorValue::mutable_floats() {
  if (!has_floats()) {
    clear_value();
    set_has_floats();
    value_.floats_ = new ::CoreML::Specification::MILSpec::TensorValue_RepeatedFloats;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.TensorValue.floats)
  return value_.floats_;
}
::CoreML::Specification::MILSpec::TensorValue_RepeatedFloats* TensorValue::release_floats() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.TensorValue.floats)
  if (has_floats()) {
    clear_has_value();
    ::CoreML::Specification::MILSpec::TensorValue_RepeatedFloats* temp = value_.floats_;
    value_.floats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TensorValue::set_allocated_floats(::CoreML::Specification::MILSpec::TensorValue_RepeatedFloats* floats) {
  clear_value();
  if (floats) {
    set_has_floats();
    value_.floats_ = floats;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.TensorValue.floats)
}

// .CoreML.Specification.MILSpec.TensorValue.RepeatedInts ints = 2;
bool TensorValue::has_ints() const {
  return value_case() == kInts;
}
void TensorValue::set_has_ints() {
  _oneof_case_[0] = kInts;
}
void TensorValue::clear_ints() {
  if (has_ints()) {
    delete value_.ints_;
    clear_has_value();
  }
}
 const ::CoreML::Specification::MILSpec::TensorValue_RepeatedInts& TensorValue::ints() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorValue.ints)
  return has_ints()
      ? *value_.ints_
      : ::CoreML::Specification::MILSpec::TensorValue_RepeatedInts::default_instance();
}
::CoreML::Specification::MILSpec::TensorValue_RepeatedInts* TensorValue::mutable_ints() {
  if (!has_ints()) {
    clear_value();
    set_has_ints();
    value_.ints_ = new ::CoreML::Specification::MILSpec::TensorValue_RepeatedInts;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.TensorValue.ints)
  return value_.ints_;
}
::CoreML::Specification::MILSpec::TensorValue_RepeatedInts* TensorValue::release_ints() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.TensorValue.ints)
  if (has_ints()) {
    clear_has_value();
    ::CoreML::Specification::MILSpec::TensorValue_RepeatedInts* temp = value_.ints_;
    value_.ints_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TensorValue::set_allocated_ints(::CoreML::Specification::MILSpec::TensorValue_RepeatedInts* ints) {
  clear_value();
  if (ints) {
    set_has_ints();
    value_.ints_ = ints;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.TensorValue.ints)
}

// .CoreML.Specification.MILSpec.TensorValue.RepeatedBools bools = 3;
bool TensorValue::has_bools() const {
  return value_case() == kBools;
}
void TensorValue::set_has_bools() {
  _oneof_case_[0] = kBools;
}
void TensorValue::clear_bools() {
  if (has_bools()) {
    delete value_.bools_;
    clear_has_value();
  }
}
 const ::CoreML::Specification::MILSpec::TensorValue_RepeatedBools& TensorValue::bools() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorValue.bools)
  return has_bools()
      ? *value_.bools_
      : ::CoreML::Specification::MILSpec::TensorValue_RepeatedBools::default_instance();
}
::CoreML::Specification::MILSpec::TensorValue_RepeatedBools* TensorValue::mutable_bools() {
  if (!has_bools()) {
    clear_value();
    set_has_bools();
    value_.bools_ = new ::CoreML::Specification::MILSpec::TensorValue_RepeatedBools;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.TensorValue.bools)
  return value_.bools_;
}
::CoreML::Specification::MILSpec::TensorValue_RepeatedBools* TensorValue::release_bools() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.TensorValue.bools)
  if (has_bools()) {
    clear_has_value();
    ::CoreML::Specification::MILSpec::TensorValue_RepeatedBools* temp = value_.bools_;
    value_.bools_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TensorValue::set_allocated_bools(::CoreML::Specification::MILSpec::TensorValue_RepeatedBools* bools) {
  clear_value();
  if (bools) {
    set_has_bools();
    value_.bools_ = bools;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.TensorValue.bools)
}

// .CoreML.Specification.MILSpec.TensorValue.RepeatedStrings strings = 4;
bool TensorValue::has_strings() const {
  return value_case() == kStrings;
}
void TensorValue::set_has_strings() {
  _oneof_case_[0] = kStrings;
}
void TensorValue::clear_strings() {
  if (has_strings()) {
    delete value_.strings_;
    clear_has_value();
  }
}
 const ::CoreML::Specification::MILSpec::TensorValue_RepeatedStrings& TensorValue::strings() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorValue.strings)
  return has_strings()
      ? *value_.strings_
      : ::CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::default_instance();
}
::CoreML::Specification::MILSpec::TensorValue_RepeatedStrings* TensorValue::mutable_strings() {
  if (!has_strings()) {
    clear_value();
    set_has_strings();
    value_.strings_ = new ::CoreML::Specification::MILSpec::TensorValue_RepeatedStrings;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.TensorValue.strings)
  return value_.strings_;
}
::CoreML::Specification::MILSpec::TensorValue_RepeatedStrings* TensorValue::release_strings() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.TensorValue.strings)
  if (has_strings()) {
    clear_has_value();
    ::CoreML::Specification::MILSpec::TensorValue_RepeatedStrings* temp = value_.strings_;
    value_.strings_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TensorValue::set_allocated_strings(::CoreML::Specification::MILSpec::TensorValue_RepeatedStrings* strings) {
  clear_value();
  if (strings) {
    set_has_strings();
    value_.strings_ = strings;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.TensorValue.strings)
}

// .CoreML.Specification.MILSpec.TensorValue.RepeatedLongInts longInts = 5;
bool TensorValue::has_longints() const {
  return value_case() == kLongInts;
}
void TensorValue::set_has_longints() {
  _oneof_case_[0] = kLongInts;
}
void TensorValue::clear_longints() {
  if (has_longints()) {
    delete value_.longints_;
    clear_has_value();
  }
}
 const ::CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts& TensorValue::longints() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorValue.longInts)
  return has_longints()
      ? *value_.longints_
      : ::CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::default_instance();
}
::CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts* TensorValue::mutable_longints() {
  if (!has_longints()) {
    clear_value();
    set_has_longints();
    value_.longints_ = new ::CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.TensorValue.longInts)
  return value_.longints_;
}
::CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts* TensorValue::release_longints() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.TensorValue.longInts)
  if (has_longints()) {
    clear_has_value();
    ::CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts* temp = value_.longints_;
    value_.longints_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TensorValue::set_allocated_longints(::CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts* longints) {
  clear_value();
  if (longints) {
    set_has_longints();
    value_.longints_ = longints;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.TensorValue.longInts)
}

// .CoreML.Specification.MILSpec.TensorValue.RepeatedDoubles doubles = 6;
bool TensorValue::has_doubles() const {
  return value_case() == kDoubles;
}
void TensorValue::set_has_doubles() {
  _oneof_case_[0] = kDoubles;
}
void TensorValue::clear_doubles() {
  if (has_doubles()) {
    delete value_.doubles_;
    clear_has_value();
  }
}
 const ::CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles& TensorValue::doubles() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorValue.doubles)
  return has_doubles()
      ? *value_.doubles_
      : ::CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::default_instance();
}
::CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles* TensorValue::mutable_doubles() {
  if (!has_doubles()) {
    clear_value();
    set_has_doubles();
    value_.doubles_ = new ::CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.TensorValue.doubles)
  return value_.doubles_;
}
::CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles* TensorValue::release_doubles() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.TensorValue.doubles)
  if (has_doubles()) {
    clear_has_value();
    ::CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles* temp = value_.doubles_;
    value_.doubles_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TensorValue::set_allocated_doubles(::CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles* doubles) {
  clear_value();
  if (doubles) {
    set_has_doubles();
    value_.doubles_ = doubles;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.TensorValue.doubles)
}

// .CoreML.Specification.MILSpec.TensorValue.RepeatedBytes bytes = 7;
bool TensorValue::has_bytes() const {
  return value_case() == kBytes;
}
void TensorValue::set_has_bytes() {
  _oneof_case_[0] = kBytes;
}
void TensorValue::clear_bytes() {
  if (has_bytes()) {
    delete value_.bytes_;
    clear_has_value();
  }
}
 const ::CoreML::Specification::MILSpec::TensorValue_RepeatedBytes& TensorValue::bytes() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TensorValue.bytes)
  return has_bytes()
      ? *value_.bytes_
      : ::CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance();
}
::CoreML::Specification::MILSpec::TensorValue_RepeatedBytes* TensorValue::mutable_bytes() {
  if (!has_bytes()) {
    clear_value();
    set_has_bytes();
    value_.bytes_ = new ::CoreML::Specification::MILSpec::TensorValue_RepeatedBytes;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.TensorValue.bytes)
  return value_.bytes_;
}
::CoreML::Specification::MILSpec::TensorValue_RepeatedBytes* TensorValue::release_bytes() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.TensorValue.bytes)
  if (has_bytes()) {
    clear_has_value();
    ::CoreML::Specification::MILSpec::TensorValue_RepeatedBytes* temp = value_.bytes_;
    value_.bytes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TensorValue::set_allocated_bytes(::CoreML::Specification::MILSpec::TensorValue_RepeatedBytes* bytes) {
  clear_value();
  if (bytes) {
    set_has_bytes();
    value_.bytes_ = bytes;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.TensorValue.bytes)
}

bool TensorValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void TensorValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
TensorValue::ValueCase TensorValue::value_case() const {
  return TensorValue::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TupleValue::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TupleValue::TupleValue()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.TupleValue)
}
TupleValue::TupleValue(const TupleValue& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.TupleValue)
}

void TupleValue::SharedCtor() {
  _cached_size_ = 0;
}

TupleValue::~TupleValue() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.TupleValue)
  SharedDtor();
}

void TupleValue::SharedDtor() {
}

void TupleValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TupleValue& TupleValue::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

TupleValue* TupleValue::New(::google::protobuf::Arena* arena) const {
  TupleValue* n = new TupleValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TupleValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.TupleValue)
  values_.Clear();
}

bool TupleValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.TupleValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CoreML.Specification.MILSpec.Value values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.TupleValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.TupleValue)
  return false;
#undef DO_
}

void TupleValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.TupleValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CoreML.Specification.MILSpec.Value values = 1;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.TupleValue)
}

size_t TupleValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.TupleValue)
  size_t total_size = 0;

  // repeated .CoreML.Specification.MILSpec.Value values = 1;
  {
    unsigned int count = this->values_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TupleValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TupleValue*>(&from));
}

void TupleValue::MergeFrom(const TupleValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.TupleValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void TupleValue::CopyFrom(const TupleValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.TupleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TupleValue::IsInitialized() const {
  return true;
}

void TupleValue::Swap(TupleValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TupleValue::InternalSwap(TupleValue* other) {
  values_.InternalSwap(&other->values_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TupleValue::GetTypeName() const {
  return "CoreML.Specification.MILSpec.TupleValue";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TupleValue

// repeated .CoreML.Specification.MILSpec.Value values = 1;
int TupleValue::values_size() const {
  return values_.size();
}
void TupleValue::clear_values() {
  values_.Clear();
}
const ::CoreML::Specification::MILSpec::Value& TupleValue::values(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.TupleValue.values)
  return values_.Get(index);
}
::CoreML::Specification::MILSpec::Value* TupleValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.TupleValue.values)
  return values_.Mutable(index);
}
::CoreML::Specification::MILSpec::Value* TupleValue::add_values() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.TupleValue.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::Value >*
TupleValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.TupleValue.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::Value >&
TupleValue::values() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.TupleValue.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListValue::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListValue::ListValue()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.ListValue)
}
ListValue::ListValue(const ListValue& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.ListValue)
}

void ListValue::SharedCtor() {
  _cached_size_ = 0;
}

ListValue::~ListValue() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.ListValue)
  SharedDtor();
}

void ListValue::SharedDtor() {
}

void ListValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ListValue& ListValue::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListValue* ListValue::New(::google::protobuf::Arena* arena) const {
  ListValue* n = new ListValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.ListValue)
  values_.Clear();
}

bool ListValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.ListValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CoreML.Specification.MILSpec.Value values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.ListValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.ListValue)
  return false;
#undef DO_
}

void ListValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.ListValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CoreML.Specification.MILSpec.Value values = 1;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.ListValue)
}

size_t ListValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.ListValue)
  size_t total_size = 0;

  // repeated .CoreML.Specification.MILSpec.Value values = 1;
  {
    unsigned int count = this->values_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ListValue*>(&from));
}

void ListValue::MergeFrom(const ListValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.ListValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ListValue::CopyFrom(const ListValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.ListValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListValue::IsInitialized() const {
  return true;
}

void ListValue::Swap(ListValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListValue::InternalSwap(ListValue* other) {
  values_.InternalSwap(&other->values_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ListValue::GetTypeName() const {
  return "CoreML.Specification.MILSpec.ListValue";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListValue

// repeated .CoreML.Specification.MILSpec.Value values = 1;
int ListValue::values_size() const {
  return values_.size();
}
void ListValue::clear_values() {
  values_.Clear();
}
const ::CoreML::Specification::MILSpec::Value& ListValue::values(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.ListValue.values)
  return values_.Get(index);
}
::CoreML::Specification::MILSpec::Value* ListValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.ListValue.values)
  return values_.Mutable(index);
}
::CoreML::Specification::MILSpec::Value* ListValue::add_values() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.ListValue.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::Value >*
ListValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.ListValue.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::Value >&
ListValue::values() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.ListValue.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DictionaryValue_KeyValuePair::kKeyFieldNumber;
const int DictionaryValue_KeyValuePair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair)
}
DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(const DictionaryValue_KeyValuePair& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::CoreML::Specification::MILSpec::Value(*from.key_);
  } else {
    key_ = NULL;
  }
  if (from.has_value()) {
    value_ = new ::CoreML::Specification::MILSpec::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair)
}

void DictionaryValue_KeyValuePair::SharedCtor() {
  ::memset(&key_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_) + sizeof(value_));
  _cached_size_ = 0;
}

DictionaryValue_KeyValuePair::~DictionaryValue_KeyValuePair() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair)
  SharedDtor();
}

void DictionaryValue_KeyValuePair::SharedDtor() {
  if (this != internal_default_instance()) {
    delete key_;
  }
  if (this != internal_default_instance()) {
    delete value_;
  }
}

void DictionaryValue_KeyValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DictionaryValue_KeyValuePair& DictionaryValue_KeyValuePair::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

DictionaryValue_KeyValuePair* DictionaryValue_KeyValuePair::New(::google::protobuf::Arena* arena) const {
  DictionaryValue_KeyValuePair* n = new DictionaryValue_KeyValuePair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DictionaryValue_KeyValuePair::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair)
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}

bool DictionaryValue_KeyValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CoreML.Specification.MILSpec.Value key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.MILSpec.Value value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair)
  return false;
#undef DO_
}

void DictionaryValue_KeyValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CoreML.Specification.MILSpec.Value key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->key_, output);
  }

  // .CoreML.Specification.MILSpec.Value value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair)
}

size_t DictionaryValue_KeyValuePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair)
  size_t total_size = 0;

  // .CoreML.Specification.MILSpec.Value key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // .CoreML.Specification.MILSpec.Value value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DictionaryValue_KeyValuePair::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DictionaryValue_KeyValuePair*>(&from));
}

void DictionaryValue_KeyValuePair::MergeFrom(const DictionaryValue_KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    mutable_key()->::CoreML::Specification::MILSpec::Value::MergeFrom(from.key());
  }
  if (from.has_value()) {
    mutable_value()->::CoreML::Specification::MILSpec::Value::MergeFrom(from.value());
  }
}

void DictionaryValue_KeyValuePair::CopyFrom(const DictionaryValue_KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictionaryValue_KeyValuePair::IsInitialized() const {
  return true;
}

void DictionaryValue_KeyValuePair::Swap(DictionaryValue_KeyValuePair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DictionaryValue_KeyValuePair::InternalSwap(DictionaryValue_KeyValuePair* other) {
  std::swap(key_, other->key_);
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DictionaryValue_KeyValuePair::GetTypeName() const {
  return "CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DictionaryValue_KeyValuePair

// .CoreML.Specification.MILSpec.Value key = 1;
bool DictionaryValue_KeyValuePair::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void DictionaryValue_KeyValuePair::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::CoreML::Specification::MILSpec::Value& DictionaryValue_KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair.key)
  return key_ != NULL ? *key_
                         : *::CoreML::Specification::MILSpec::Value::internal_default_instance();
}
::CoreML::Specification::MILSpec::Value* DictionaryValue_KeyValuePair::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::CoreML::Specification::MILSpec::Value;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair.key)
  return key_;
}
::CoreML::Specification::MILSpec::Value* DictionaryValue_KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair.key)
  
  ::CoreML::Specification::MILSpec::Value* temp = key_;
  key_ = NULL;
  return temp;
}
void DictionaryValue_KeyValuePair::set_allocated_key(::CoreML::Specification::MILSpec::Value* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair.key)
}

// .CoreML.Specification.MILSpec.Value value = 2;
bool DictionaryValue_KeyValuePair::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void DictionaryValue_KeyValuePair::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::CoreML::Specification::MILSpec::Value& DictionaryValue_KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair.value)
  return value_ != NULL ? *value_
                         : *::CoreML::Specification::MILSpec::Value::internal_default_instance();
}
::CoreML::Specification::MILSpec::Value* DictionaryValue_KeyValuePair::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::CoreML::Specification::MILSpec::Value;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair.value)
  return value_;
}
::CoreML::Specification::MILSpec::Value* DictionaryValue_KeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair.value)
  
  ::CoreML::Specification::MILSpec::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void DictionaryValue_KeyValuePair::set_allocated_value(::CoreML::Specification::MILSpec::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DictionaryValue::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DictionaryValue::DictionaryValue()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MIL_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.MILSpec.DictionaryValue)
}
DictionaryValue::DictionaryValue(const DictionaryValue& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.MILSpec.DictionaryValue)
}

void DictionaryValue::SharedCtor() {
  _cached_size_ = 0;
}

DictionaryValue::~DictionaryValue() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.MILSpec.DictionaryValue)
  SharedDtor();
}

void DictionaryValue::SharedDtor() {
}

void DictionaryValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DictionaryValue& DictionaryValue::default_instance() {
  protobuf_MIL_2eproto::InitDefaults();
  return *internal_default_instance();
}

DictionaryValue* DictionaryValue::New(::google::protobuf::Arena* arena) const {
  DictionaryValue* n = new DictionaryValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DictionaryValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.MILSpec.DictionaryValue)
  values_.Clear();
}

bool DictionaryValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.MILSpec.DictionaryValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.MILSpec.DictionaryValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.MILSpec.DictionaryValue)
  return false;
#undef DO_
}

void DictionaryValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.MILSpec.DictionaryValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair values = 1;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.MILSpec.DictionaryValue)
}

size_t DictionaryValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.MILSpec.DictionaryValue)
  size_t total_size = 0;

  // repeated .CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair values = 1;
  {
    unsigned int count = this->values_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DictionaryValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DictionaryValue*>(&from));
}

void DictionaryValue::MergeFrom(const DictionaryValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.MILSpec.DictionaryValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void DictionaryValue::CopyFrom(const DictionaryValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.MILSpec.DictionaryValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictionaryValue::IsInitialized() const {
  return true;
}

void DictionaryValue::Swap(DictionaryValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DictionaryValue::InternalSwap(DictionaryValue* other) {
  values_.InternalSwap(&other->values_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DictionaryValue::GetTypeName() const {
  return "CoreML.Specification.MILSpec.DictionaryValue";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DictionaryValue

// repeated .CoreML.Specification.MILSpec.DictionaryValue.KeyValuePair values = 1;
int DictionaryValue::values_size() const {
  return values_.size();
}
void DictionaryValue::clear_values() {
  values_.Clear();
}
const ::CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair& DictionaryValue::values(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.MILSpec.DictionaryValue.values)
  return values_.Get(index);
}
::CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair* DictionaryValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.MILSpec.DictionaryValue.values)
  return values_.Mutable(index);
}
::CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair* DictionaryValue::add_values() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.MILSpec.DictionaryValue.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair >*
DictionaryValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.MILSpec.DictionaryValue.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair >&
DictionaryValue::values() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.MILSpec.DictionaryValue.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace MILSpec
}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)
