// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LinkedModel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LinkedModel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LinkedModel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "Parameters.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LinkedModel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LinkedModel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace CoreML {
namespace Specification {
class LinkedModel;
struct LinkedModelDefaultTypeInternal;
extern LinkedModelDefaultTypeInternal _LinkedModel_default_instance_;
class LinkedModelFile;
struct LinkedModelFileDefaultTypeInternal;
extern LinkedModelFileDefaultTypeInternal _LinkedModelFile_default_instance_;
}  // namespace Specification
}  // namespace CoreML
PROTOBUF_NAMESPACE_OPEN
template<> ::CoreML::Specification::LinkedModel* Arena::CreateMaybeMessage<::CoreML::Specification::LinkedModel>(Arena*);
template<> ::CoreML::Specification::LinkedModelFile* Arena::CreateMaybeMessage<::CoreML::Specification::LinkedModelFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CoreML {
namespace Specification {

// ===================================================================

class LinkedModel final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.LinkedModel) */ {
 public:
  inline LinkedModel() : LinkedModel(nullptr) {}
  ~LinkedModel() override;
  explicit constexpr LinkedModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkedModel(const LinkedModel& from);
  LinkedModel(LinkedModel&& from) noexcept
    : LinkedModel() {
    *this = ::std::move(from);
  }

  inline LinkedModel& operator=(const LinkedModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkedModel& operator=(LinkedModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LinkedModel& default_instance() {
    return *internal_default_instance();
  }
  enum LinkTypeCase {
    kLinkedModelFile = 1,
    LINKTYPE_NOT_SET = 0,
  };

  static inline const LinkedModel* internal_default_instance() {
    return reinterpret_cast<const LinkedModel*>(
               &_LinkedModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LinkedModel& a, LinkedModel& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkedModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkedModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkedModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkedModel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LinkedModel& from);
  void MergeFrom(const LinkedModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LinkedModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.LinkedModel";
  }
  protected:
  explicit LinkedModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkedModelFileFieldNumber = 1,
  };
  // .CoreML.Specification.LinkedModelFile linkedModelFile = 1;
  bool has_linkedmodelfile() const;
  private:
  bool _internal_has_linkedmodelfile() const;
  public:
  void clear_linkedmodelfile();
  const ::CoreML::Specification::LinkedModelFile& linkedmodelfile() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::LinkedModelFile* release_linkedmodelfile();
  ::CoreML::Specification::LinkedModelFile* mutable_linkedmodelfile();
  void set_allocated_linkedmodelfile(::CoreML::Specification::LinkedModelFile* linkedmodelfile);
  private:
  const ::CoreML::Specification::LinkedModelFile& _internal_linkedmodelfile() const;
  ::CoreML::Specification::LinkedModelFile* _internal_mutable_linkedmodelfile();
  public:
  void unsafe_arena_set_allocated_linkedmodelfile(
      ::CoreML::Specification::LinkedModelFile* linkedmodelfile);
  ::CoreML::Specification::LinkedModelFile* unsafe_arena_release_linkedmodelfile();

  void clear_LinkType();
  LinkTypeCase LinkType_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.LinkedModel)
 private:
  class _Internal;
  void set_has_linkedmodelfile();

  inline bool has_LinkType() const;
  inline void clear_has_LinkType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union LinkTypeUnion {
    constexpr LinkTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CoreML::Specification::LinkedModelFile* linkedmodelfile_;
  } LinkType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_LinkedModel_2eproto;
};
// -------------------------------------------------------------------

class LinkedModelFile final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.LinkedModelFile) */ {
 public:
  inline LinkedModelFile() : LinkedModelFile(nullptr) {}
  ~LinkedModelFile() override;
  explicit constexpr LinkedModelFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkedModelFile(const LinkedModelFile& from);
  LinkedModelFile(LinkedModelFile&& from) noexcept
    : LinkedModelFile() {
    *this = ::std::move(from);
  }

  inline LinkedModelFile& operator=(const LinkedModelFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkedModelFile& operator=(LinkedModelFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LinkedModelFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkedModelFile* internal_default_instance() {
    return reinterpret_cast<const LinkedModelFile*>(
               &_LinkedModelFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LinkedModelFile& a, LinkedModelFile& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkedModelFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkedModelFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkedModelFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkedModelFile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LinkedModelFile& from);
  void MergeFrom(const LinkedModelFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LinkedModelFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.LinkedModelFile";
  }
  protected:
  explicit LinkedModelFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkedModelFileNameFieldNumber = 1,
    kLinkedModelSearchPathFieldNumber = 2,
  };
  // .CoreML.Specification.StringParameter linkedModelFileName = 1;
  bool has_linkedmodelfilename() const;
  private:
  bool _internal_has_linkedmodelfilename() const;
  public:
  void clear_linkedmodelfilename();
  const ::CoreML::Specification::StringParameter& linkedmodelfilename() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::StringParameter* release_linkedmodelfilename();
  ::CoreML::Specification::StringParameter* mutable_linkedmodelfilename();
  void set_allocated_linkedmodelfilename(::CoreML::Specification::StringParameter* linkedmodelfilename);
  private:
  const ::CoreML::Specification::StringParameter& _internal_linkedmodelfilename() const;
  ::CoreML::Specification::StringParameter* _internal_mutable_linkedmodelfilename();
  public:
  void unsafe_arena_set_allocated_linkedmodelfilename(
      ::CoreML::Specification::StringParameter* linkedmodelfilename);
  ::CoreML::Specification::StringParameter* unsafe_arena_release_linkedmodelfilename();

  // .CoreML.Specification.StringParameter linkedModelSearchPath = 2;
  bool has_linkedmodelsearchpath() const;
  private:
  bool _internal_has_linkedmodelsearchpath() const;
  public:
  void clear_linkedmodelsearchpath();
  const ::CoreML::Specification::StringParameter& linkedmodelsearchpath() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::StringParameter* release_linkedmodelsearchpath();
  ::CoreML::Specification::StringParameter* mutable_linkedmodelsearchpath();
  void set_allocated_linkedmodelsearchpath(::CoreML::Specification::StringParameter* linkedmodelsearchpath);
  private:
  const ::CoreML::Specification::StringParameter& _internal_linkedmodelsearchpath() const;
  ::CoreML::Specification::StringParameter* _internal_mutable_linkedmodelsearchpath();
  public:
  void unsafe_arena_set_allocated_linkedmodelsearchpath(
      ::CoreML::Specification::StringParameter* linkedmodelsearchpath);
  ::CoreML::Specification::StringParameter* unsafe_arena_release_linkedmodelsearchpath();

  // @@protoc_insertion_point(class_scope:CoreML.Specification.LinkedModelFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CoreML::Specification::StringParameter* linkedmodelfilename_;
  ::CoreML::Specification::StringParameter* linkedmodelsearchpath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LinkedModel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LinkedModel

// .CoreML.Specification.LinkedModelFile linkedModelFile = 1;
inline bool LinkedModel::_internal_has_linkedmodelfile() const {
  return LinkType_case() == kLinkedModelFile;
}
inline bool LinkedModel::has_linkedmodelfile() const {
  return _internal_has_linkedmodelfile();
}
inline void LinkedModel::set_has_linkedmodelfile() {
  _oneof_case_[0] = kLinkedModelFile;
}
inline void LinkedModel::clear_linkedmodelfile() {
  if (_internal_has_linkedmodelfile()) {
    if (GetArenaForAllocation() == nullptr) {
      delete LinkType_.linkedmodelfile_;
    }
    clear_has_LinkType();
  }
}
inline ::CoreML::Specification::LinkedModelFile* LinkedModel::release_linkedmodelfile() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.LinkedModel.linkedModelFile)
  if (_internal_has_linkedmodelfile()) {
    clear_has_LinkType();
      ::CoreML::Specification::LinkedModelFile* temp = LinkType_.linkedmodelfile_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    LinkType_.linkedmodelfile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CoreML::Specification::LinkedModelFile& LinkedModel::_internal_linkedmodelfile() const {
  return _internal_has_linkedmodelfile()
      ? *LinkType_.linkedmodelfile_
      : reinterpret_cast< ::CoreML::Specification::LinkedModelFile&>(::CoreML::Specification::_LinkedModelFile_default_instance_);
}
inline const ::CoreML::Specification::LinkedModelFile& LinkedModel::linkedmodelfile() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.LinkedModel.linkedModelFile)
  return _internal_linkedmodelfile();
}
inline ::CoreML::Specification::LinkedModelFile* LinkedModel::unsafe_arena_release_linkedmodelfile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CoreML.Specification.LinkedModel.linkedModelFile)
  if (_internal_has_linkedmodelfile()) {
    clear_has_LinkType();
    ::CoreML::Specification::LinkedModelFile* temp = LinkType_.linkedmodelfile_;
    LinkType_.linkedmodelfile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LinkedModel::unsafe_arena_set_allocated_linkedmodelfile(::CoreML::Specification::LinkedModelFile* linkedmodelfile) {
  clear_LinkType();
  if (linkedmodelfile) {
    set_has_linkedmodelfile();
    LinkType_.linkedmodelfile_ = linkedmodelfile;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.LinkedModel.linkedModelFile)
}
inline ::CoreML::Specification::LinkedModelFile* LinkedModel::_internal_mutable_linkedmodelfile() {
  if (!_internal_has_linkedmodelfile()) {
    clear_LinkType();
    set_has_linkedmodelfile();
    LinkType_.linkedmodelfile_ = CreateMaybeMessage< ::CoreML::Specification::LinkedModelFile >(GetArenaForAllocation());
  }
  return LinkType_.linkedmodelfile_;
}
inline ::CoreML::Specification::LinkedModelFile* LinkedModel::mutable_linkedmodelfile() {
  ::CoreML::Specification::LinkedModelFile* _msg = _internal_mutable_linkedmodelfile();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.LinkedModel.linkedModelFile)
  return _msg;
}

inline bool LinkedModel::has_LinkType() const {
  return LinkType_case() != LINKTYPE_NOT_SET;
}
inline void LinkedModel::clear_has_LinkType() {
  _oneof_case_[0] = LINKTYPE_NOT_SET;
}
inline LinkedModel::LinkTypeCase LinkedModel::LinkType_case() const {
  return LinkedModel::LinkTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LinkedModelFile

// .CoreML.Specification.StringParameter linkedModelFileName = 1;
inline bool LinkedModelFile::_internal_has_linkedmodelfilename() const {
  return this != internal_default_instance() && linkedmodelfilename_ != nullptr;
}
inline bool LinkedModelFile::has_linkedmodelfilename() const {
  return _internal_has_linkedmodelfilename();
}
inline const ::CoreML::Specification::StringParameter& LinkedModelFile::_internal_linkedmodelfilename() const {
  const ::CoreML::Specification::StringParameter* p = linkedmodelfilename_;
  return p != nullptr ? *p : reinterpret_cast<const ::CoreML::Specification::StringParameter&>(
      ::CoreML::Specification::_StringParameter_default_instance_);
}
inline const ::CoreML::Specification::StringParameter& LinkedModelFile::linkedmodelfilename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.LinkedModelFile.linkedModelFileName)
  return _internal_linkedmodelfilename();
}
inline void LinkedModelFile::unsafe_arena_set_allocated_linkedmodelfilename(
    ::CoreML::Specification::StringParameter* linkedmodelfilename) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linkedmodelfilename_);
  }
  linkedmodelfilename_ = linkedmodelfilename;
  if (linkedmodelfilename) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.LinkedModelFile.linkedModelFileName)
}
inline ::CoreML::Specification::StringParameter* LinkedModelFile::release_linkedmodelfilename() {
  
  ::CoreML::Specification::StringParameter* temp = linkedmodelfilename_;
  linkedmodelfilename_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CoreML::Specification::StringParameter* LinkedModelFile::unsafe_arena_release_linkedmodelfilename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.LinkedModelFile.linkedModelFileName)
  
  ::CoreML::Specification::StringParameter* temp = linkedmodelfilename_;
  linkedmodelfilename_ = nullptr;
  return temp;
}
inline ::CoreML::Specification::StringParameter* LinkedModelFile::_internal_mutable_linkedmodelfilename() {
  
  if (linkedmodelfilename_ == nullptr) {
    auto* p = CreateMaybeMessage<::CoreML::Specification::StringParameter>(GetArenaForAllocation());
    linkedmodelfilename_ = p;
  }
  return linkedmodelfilename_;
}
inline ::CoreML::Specification::StringParameter* LinkedModelFile::mutable_linkedmodelfilename() {
  ::CoreML::Specification::StringParameter* _msg = _internal_mutable_linkedmodelfilename();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.LinkedModelFile.linkedModelFileName)
  return _msg;
}
inline void LinkedModelFile::set_allocated_linkedmodelfilename(::CoreML::Specification::StringParameter* linkedmodelfilename) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linkedmodelfilename_);
  }
  if (linkedmodelfilename) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linkedmodelfilename));
    if (message_arena != submessage_arena) {
      linkedmodelfilename = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linkedmodelfilename, submessage_arena);
    }
    
  } else {
    
  }
  linkedmodelfilename_ = linkedmodelfilename;
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.LinkedModelFile.linkedModelFileName)
}

// .CoreML.Specification.StringParameter linkedModelSearchPath = 2;
inline bool LinkedModelFile::_internal_has_linkedmodelsearchpath() const {
  return this != internal_default_instance() && linkedmodelsearchpath_ != nullptr;
}
inline bool LinkedModelFile::has_linkedmodelsearchpath() const {
  return _internal_has_linkedmodelsearchpath();
}
inline const ::CoreML::Specification::StringParameter& LinkedModelFile::_internal_linkedmodelsearchpath() const {
  const ::CoreML::Specification::StringParameter* p = linkedmodelsearchpath_;
  return p != nullptr ? *p : reinterpret_cast<const ::CoreML::Specification::StringParameter&>(
      ::CoreML::Specification::_StringParameter_default_instance_);
}
inline const ::CoreML::Specification::StringParameter& LinkedModelFile::linkedmodelsearchpath() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.LinkedModelFile.linkedModelSearchPath)
  return _internal_linkedmodelsearchpath();
}
inline void LinkedModelFile::unsafe_arena_set_allocated_linkedmodelsearchpath(
    ::CoreML::Specification::StringParameter* linkedmodelsearchpath) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linkedmodelsearchpath_);
  }
  linkedmodelsearchpath_ = linkedmodelsearchpath;
  if (linkedmodelsearchpath) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.LinkedModelFile.linkedModelSearchPath)
}
inline ::CoreML::Specification::StringParameter* LinkedModelFile::release_linkedmodelsearchpath() {
  
  ::CoreML::Specification::StringParameter* temp = linkedmodelsearchpath_;
  linkedmodelsearchpath_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CoreML::Specification::StringParameter* LinkedModelFile::unsafe_arena_release_linkedmodelsearchpath() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.LinkedModelFile.linkedModelSearchPath)
  
  ::CoreML::Specification::StringParameter* temp = linkedmodelsearchpath_;
  linkedmodelsearchpath_ = nullptr;
  return temp;
}
inline ::CoreML::Specification::StringParameter* LinkedModelFile::_internal_mutable_linkedmodelsearchpath() {
  
  if (linkedmodelsearchpath_ == nullptr) {
    auto* p = CreateMaybeMessage<::CoreML::Specification::StringParameter>(GetArenaForAllocation());
    linkedmodelsearchpath_ = p;
  }
  return linkedmodelsearchpath_;
}
inline ::CoreML::Specification::StringParameter* LinkedModelFile::mutable_linkedmodelsearchpath() {
  ::CoreML::Specification::StringParameter* _msg = _internal_mutable_linkedmodelsearchpath();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.LinkedModelFile.linkedModelSearchPath)
  return _msg;
}
inline void LinkedModelFile::set_allocated_linkedmodelsearchpath(::CoreML::Specification::StringParameter* linkedmodelsearchpath) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linkedmodelsearchpath_);
  }
  if (linkedmodelsearchpath) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linkedmodelsearchpath));
    if (message_arena != submessage_arena) {
      linkedmodelsearchpath = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linkedmodelsearchpath, submessage_arena);
    }
    
  } else {
    
  }
  linkedmodelsearchpath_ = linkedmodelsearchpath;
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.LinkedModelFile.linkedModelSearchPath)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LinkedModel_2eproto
