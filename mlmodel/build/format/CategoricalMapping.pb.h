// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CategoricalMapping.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CategoricalMapping_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CategoricalMapping_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "DataStructures.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CategoricalMapping_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CategoricalMapping_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace CoreML {
namespace Specification {
class CategoricalMapping;
struct CategoricalMappingDefaultTypeInternal;
extern CategoricalMappingDefaultTypeInternal _CategoricalMapping_default_instance_;
}  // namespace Specification
}  // namespace CoreML
PROTOBUF_NAMESPACE_OPEN
template<> ::CoreML::Specification::CategoricalMapping* Arena::CreateMaybeMessage<::CoreML::Specification::CategoricalMapping>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CoreML {
namespace Specification {

// ===================================================================

class CategoricalMapping final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.CategoricalMapping) */ {
 public:
  inline CategoricalMapping() : CategoricalMapping(nullptr) {}
  ~CategoricalMapping() override;
  explicit constexpr CategoricalMapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoricalMapping(const CategoricalMapping& from);
  CategoricalMapping(CategoricalMapping&& from) noexcept
    : CategoricalMapping() {
    *this = ::std::move(from);
  }

  inline CategoricalMapping& operator=(const CategoricalMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoricalMapping& operator=(CategoricalMapping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CategoricalMapping& default_instance() {
    return *internal_default_instance();
  }
  enum MappingTypeCase {
    kStringToInt64Map = 1,
    kInt64ToStringMap = 2,
    MAPPINGTYPE_NOT_SET = 0,
  };

  enum ValueOnUnknownCase {
    kStrValue = 101,
    kInt64Value = 102,
    VALUEONUNKNOWN_NOT_SET = 0,
  };

  static inline const CategoricalMapping* internal_default_instance() {
    return reinterpret_cast<const CategoricalMapping*>(
               &_CategoricalMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CategoricalMapping& a, CategoricalMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoricalMapping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoricalMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CategoricalMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CategoricalMapping>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CategoricalMapping& from);
  void MergeFrom(const CategoricalMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CategoricalMapping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.CategoricalMapping";
  }
  protected:
  explicit CategoricalMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringToInt64MapFieldNumber = 1,
    kInt64ToStringMapFieldNumber = 2,
    kStrValueFieldNumber = 101,
    kInt64ValueFieldNumber = 102,
  };
  // .CoreML.Specification.StringToInt64Map stringToInt64Map = 1;
  bool has_stringtoint64map() const;
  private:
  bool _internal_has_stringtoint64map() const;
  public:
  void clear_stringtoint64map();
  const ::CoreML::Specification::StringToInt64Map& stringtoint64map() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::StringToInt64Map* release_stringtoint64map();
  ::CoreML::Specification::StringToInt64Map* mutable_stringtoint64map();
  void set_allocated_stringtoint64map(::CoreML::Specification::StringToInt64Map* stringtoint64map);
  private:
  const ::CoreML::Specification::StringToInt64Map& _internal_stringtoint64map() const;
  ::CoreML::Specification::StringToInt64Map* _internal_mutable_stringtoint64map();
  public:
  void unsafe_arena_set_allocated_stringtoint64map(
      ::CoreML::Specification::StringToInt64Map* stringtoint64map);
  ::CoreML::Specification::StringToInt64Map* unsafe_arena_release_stringtoint64map();

  // .CoreML.Specification.Int64ToStringMap int64ToStringMap = 2;
  bool has_int64tostringmap() const;
  private:
  bool _internal_has_int64tostringmap() const;
  public:
  void clear_int64tostringmap();
  const ::CoreML::Specification::Int64ToStringMap& int64tostringmap() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::Int64ToStringMap* release_int64tostringmap();
  ::CoreML::Specification::Int64ToStringMap* mutable_int64tostringmap();
  void set_allocated_int64tostringmap(::CoreML::Specification::Int64ToStringMap* int64tostringmap);
  private:
  const ::CoreML::Specification::Int64ToStringMap& _internal_int64tostringmap() const;
  ::CoreML::Specification::Int64ToStringMap* _internal_mutable_int64tostringmap();
  public:
  void unsafe_arena_set_allocated_int64tostringmap(
      ::CoreML::Specification::Int64ToStringMap* int64tostringmap);
  ::CoreML::Specification::Int64ToStringMap* unsafe_arena_release_int64tostringmap();

  // string strValue = 101;
  bool has_strvalue() const;
  private:
  bool _internal_has_strvalue() const;
  public:
  void clear_strvalue();
  const std::string& strvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strvalue();
  PROTOBUF_NODISCARD std::string* release_strvalue();
  void set_allocated_strvalue(std::string* strvalue);
  private:
  const std::string& _internal_strvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strvalue(const std::string& value);
  std::string* _internal_mutable_strvalue();
  public:

  // int64 int64Value = 102;
  bool has_int64value() const;
  private:
  bool _internal_has_int64value() const;
  public:
  void clear_int64value();
  int64_t int64value() const;
  void set_int64value(int64_t value);
  private:
  int64_t _internal_int64value() const;
  void _internal_set_int64value(int64_t value);
  public:

  void clear_MappingType();
  MappingTypeCase MappingType_case() const;
  void clear_ValueOnUnknown();
  ValueOnUnknownCase ValueOnUnknown_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.CategoricalMapping)
 private:
  class _Internal;
  void set_has_stringtoint64map();
  void set_has_int64tostringmap();
  void set_has_strvalue();
  void set_has_int64value();

  inline bool has_MappingType() const;
  inline void clear_has_MappingType();

  inline bool has_ValueOnUnknown() const;
  inline void clear_has_ValueOnUnknown();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MappingTypeUnion {
    constexpr MappingTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CoreML::Specification::StringToInt64Map* stringtoint64map_;
    ::CoreML::Specification::Int64ToStringMap* int64tostringmap_;
  } MappingType_;
  union ValueOnUnknownUnion {
    constexpr ValueOnUnknownUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strvalue_;
    int64_t int64value_;
  } ValueOnUnknown_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[2];

  friend struct ::TableStruct_CategoricalMapping_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CategoricalMapping

// .CoreML.Specification.StringToInt64Map stringToInt64Map = 1;
inline bool CategoricalMapping::_internal_has_stringtoint64map() const {
  return MappingType_case() == kStringToInt64Map;
}
inline bool CategoricalMapping::has_stringtoint64map() const {
  return _internal_has_stringtoint64map();
}
inline void CategoricalMapping::set_has_stringtoint64map() {
  _oneof_case_[0] = kStringToInt64Map;
}
inline ::CoreML::Specification::StringToInt64Map* CategoricalMapping::release_stringtoint64map() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CategoricalMapping.stringToInt64Map)
  if (_internal_has_stringtoint64map()) {
    clear_has_MappingType();
      ::CoreML::Specification::StringToInt64Map* temp = MappingType_.stringtoint64map_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MappingType_.stringtoint64map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CoreML::Specification::StringToInt64Map& CategoricalMapping::_internal_stringtoint64map() const {
  return _internal_has_stringtoint64map()
      ? *MappingType_.stringtoint64map_
      : reinterpret_cast< ::CoreML::Specification::StringToInt64Map&>(::CoreML::Specification::_StringToInt64Map_default_instance_);
}
inline const ::CoreML::Specification::StringToInt64Map& CategoricalMapping::stringtoint64map() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CategoricalMapping.stringToInt64Map)
  return _internal_stringtoint64map();
}
inline ::CoreML::Specification::StringToInt64Map* CategoricalMapping::unsafe_arena_release_stringtoint64map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CoreML.Specification.CategoricalMapping.stringToInt64Map)
  if (_internal_has_stringtoint64map()) {
    clear_has_MappingType();
    ::CoreML::Specification::StringToInt64Map* temp = MappingType_.stringtoint64map_;
    MappingType_.stringtoint64map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CategoricalMapping::unsafe_arena_set_allocated_stringtoint64map(::CoreML::Specification::StringToInt64Map* stringtoint64map) {
  clear_MappingType();
  if (stringtoint64map) {
    set_has_stringtoint64map();
    MappingType_.stringtoint64map_ = stringtoint64map;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.CategoricalMapping.stringToInt64Map)
}
inline ::CoreML::Specification::StringToInt64Map* CategoricalMapping::_internal_mutable_stringtoint64map() {
  if (!_internal_has_stringtoint64map()) {
    clear_MappingType();
    set_has_stringtoint64map();
    MappingType_.stringtoint64map_ = CreateMaybeMessage< ::CoreML::Specification::StringToInt64Map >(GetArenaForAllocation());
  }
  return MappingType_.stringtoint64map_;
}
inline ::CoreML::Specification::StringToInt64Map* CategoricalMapping::mutable_stringtoint64map() {
  ::CoreML::Specification::StringToInt64Map* _msg = _internal_mutable_stringtoint64map();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CategoricalMapping.stringToInt64Map)
  return _msg;
}

// .CoreML.Specification.Int64ToStringMap int64ToStringMap = 2;
inline bool CategoricalMapping::_internal_has_int64tostringmap() const {
  return MappingType_case() == kInt64ToStringMap;
}
inline bool CategoricalMapping::has_int64tostringmap() const {
  return _internal_has_int64tostringmap();
}
inline void CategoricalMapping::set_has_int64tostringmap() {
  _oneof_case_[0] = kInt64ToStringMap;
}
inline ::CoreML::Specification::Int64ToStringMap* CategoricalMapping::release_int64tostringmap() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CategoricalMapping.int64ToStringMap)
  if (_internal_has_int64tostringmap()) {
    clear_has_MappingType();
      ::CoreML::Specification::Int64ToStringMap* temp = MappingType_.int64tostringmap_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MappingType_.int64tostringmap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CoreML::Specification::Int64ToStringMap& CategoricalMapping::_internal_int64tostringmap() const {
  return _internal_has_int64tostringmap()
      ? *MappingType_.int64tostringmap_
      : reinterpret_cast< ::CoreML::Specification::Int64ToStringMap&>(::CoreML::Specification::_Int64ToStringMap_default_instance_);
}
inline const ::CoreML::Specification::Int64ToStringMap& CategoricalMapping::int64tostringmap() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CategoricalMapping.int64ToStringMap)
  return _internal_int64tostringmap();
}
inline ::CoreML::Specification::Int64ToStringMap* CategoricalMapping::unsafe_arena_release_int64tostringmap() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CoreML.Specification.CategoricalMapping.int64ToStringMap)
  if (_internal_has_int64tostringmap()) {
    clear_has_MappingType();
    ::CoreML::Specification::Int64ToStringMap* temp = MappingType_.int64tostringmap_;
    MappingType_.int64tostringmap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CategoricalMapping::unsafe_arena_set_allocated_int64tostringmap(::CoreML::Specification::Int64ToStringMap* int64tostringmap) {
  clear_MappingType();
  if (int64tostringmap) {
    set_has_int64tostringmap();
    MappingType_.int64tostringmap_ = int64tostringmap;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.CategoricalMapping.int64ToStringMap)
}
inline ::CoreML::Specification::Int64ToStringMap* CategoricalMapping::_internal_mutable_int64tostringmap() {
  if (!_internal_has_int64tostringmap()) {
    clear_MappingType();
    set_has_int64tostringmap();
    MappingType_.int64tostringmap_ = CreateMaybeMessage< ::CoreML::Specification::Int64ToStringMap >(GetArenaForAllocation());
  }
  return MappingType_.int64tostringmap_;
}
inline ::CoreML::Specification::Int64ToStringMap* CategoricalMapping::mutable_int64tostringmap() {
  ::CoreML::Specification::Int64ToStringMap* _msg = _internal_mutable_int64tostringmap();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CategoricalMapping.int64ToStringMap)
  return _msg;
}

// string strValue = 101;
inline bool CategoricalMapping::_internal_has_strvalue() const {
  return ValueOnUnknown_case() == kStrValue;
}
inline bool CategoricalMapping::has_strvalue() const {
  return _internal_has_strvalue();
}
inline void CategoricalMapping::set_has_strvalue() {
  _oneof_case_[1] = kStrValue;
}
inline void CategoricalMapping::clear_strvalue() {
  if (_internal_has_strvalue()) {
    ValueOnUnknown_.strvalue_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_ValueOnUnknown();
  }
}
inline const std::string& CategoricalMapping::strvalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CategoricalMapping.strValue)
  return _internal_strvalue();
}
template <typename ArgT0, typename... ArgT>
inline void CategoricalMapping::set_strvalue(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_strvalue()) {
    clear_ValueOnUnknown();
    set_has_strvalue();
    ValueOnUnknown_.strvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ValueOnUnknown_.strvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CoreML.Specification.CategoricalMapping.strValue)
}
inline std::string* CategoricalMapping::mutable_strvalue() {
  std::string* _s = _internal_mutable_strvalue();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CategoricalMapping.strValue)
  return _s;
}
inline const std::string& CategoricalMapping::_internal_strvalue() const {
  if (_internal_has_strvalue()) {
    return ValueOnUnknown_.strvalue_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CategoricalMapping::_internal_set_strvalue(const std::string& value) {
  if (!_internal_has_strvalue()) {
    clear_ValueOnUnknown();
    set_has_strvalue();
    ValueOnUnknown_.strvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ValueOnUnknown_.strvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CategoricalMapping::_internal_mutable_strvalue() {
  if (!_internal_has_strvalue()) {
    clear_ValueOnUnknown();
    set_has_strvalue();
    ValueOnUnknown_.strvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return ValueOnUnknown_.strvalue_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CategoricalMapping::release_strvalue() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CategoricalMapping.strValue)
  if (_internal_has_strvalue()) {
    clear_has_ValueOnUnknown();
    return ValueOnUnknown_.strvalue_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void CategoricalMapping::set_allocated_strvalue(std::string* strvalue) {
  if (has_ValueOnUnknown()) {
    clear_ValueOnUnknown();
  }
  if (strvalue != nullptr) {
    set_has_strvalue();
    ValueOnUnknown_.strvalue_.UnsafeSetDefault(strvalue);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(strvalue);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.CategoricalMapping.strValue)
}

// int64 int64Value = 102;
inline bool CategoricalMapping::_internal_has_int64value() const {
  return ValueOnUnknown_case() == kInt64Value;
}
inline bool CategoricalMapping::has_int64value() const {
  return _internal_has_int64value();
}
inline void CategoricalMapping::set_has_int64value() {
  _oneof_case_[1] = kInt64Value;
}
inline void CategoricalMapping::clear_int64value() {
  if (_internal_has_int64value()) {
    ValueOnUnknown_.int64value_ = int64_t{0};
    clear_has_ValueOnUnknown();
  }
}
inline int64_t CategoricalMapping::_internal_int64value() const {
  if (_internal_has_int64value()) {
    return ValueOnUnknown_.int64value_;
  }
  return int64_t{0};
}
inline void CategoricalMapping::_internal_set_int64value(int64_t value) {
  if (!_internal_has_int64value()) {
    clear_ValueOnUnknown();
    set_has_int64value();
  }
  ValueOnUnknown_.int64value_ = value;
}
inline int64_t CategoricalMapping::int64value() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CategoricalMapping.int64Value)
  return _internal_int64value();
}
inline void CategoricalMapping::set_int64value(int64_t value) {
  _internal_set_int64value(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.CategoricalMapping.int64Value)
}

inline bool CategoricalMapping::has_MappingType() const {
  return MappingType_case() != MAPPINGTYPE_NOT_SET;
}
inline void CategoricalMapping::clear_has_MappingType() {
  _oneof_case_[0] = MAPPINGTYPE_NOT_SET;
}
inline bool CategoricalMapping::has_ValueOnUnknown() const {
  return ValueOnUnknown_case() != VALUEONUNKNOWN_NOT_SET;
}
inline void CategoricalMapping::clear_has_ValueOnUnknown() {
  _oneof_case_[1] = VALUEONUNKNOWN_NOT_SET;
}
inline CategoricalMapping::MappingTypeCase CategoricalMapping::MappingType_case() const {
  return CategoricalMapping::MappingTypeCase(_oneof_case_[0]);
}
inline CategoricalMapping::ValueOnUnknownCase CategoricalMapping::ValueOnUnknown_case() const {
  return CategoricalMapping::ValueOnUnknownCase(_oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CategoricalMapping_2eproto
