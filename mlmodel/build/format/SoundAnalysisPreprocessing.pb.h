// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SoundAnalysisPreprocessing.proto

#ifndef PROTOBUF_SoundAnalysisPreprocessing_2eproto__INCLUDED
#define PROTOBUF_SoundAnalysisPreprocessing_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace CoreML {
namespace Specification {
namespace CoreMLModels {
class SoundAnalysisPreprocessing;
class SoundAnalysisPreprocessingDefaultTypeInternal;
extern SoundAnalysisPreprocessingDefaultTypeInternal _SoundAnalysisPreprocessing_default_instance_;
class SoundAnalysisPreprocessing_Vggish;
class SoundAnalysisPreprocessing_VggishDefaultTypeInternal;
extern SoundAnalysisPreprocessing_VggishDefaultTypeInternal _SoundAnalysisPreprocessing_Vggish_default_instance_;
}  // namespace CoreMLModels
}  // namespace Specification
}  // namespace CoreML

namespace CoreML {
namespace Specification {
namespace CoreMLModels {

namespace protobuf_SoundAnalysisPreprocessing_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_SoundAnalysisPreprocessing_2eproto

// ===================================================================

class SoundAnalysisPreprocessing_Vggish : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish) */ {
 public:
  SoundAnalysisPreprocessing_Vggish();
  virtual ~SoundAnalysisPreprocessing_Vggish();

  SoundAnalysisPreprocessing_Vggish(const SoundAnalysisPreprocessing_Vggish& from);

  inline SoundAnalysisPreprocessing_Vggish& operator=(const SoundAnalysisPreprocessing_Vggish& from) {
    CopyFrom(from);
    return *this;
  }

  static const SoundAnalysisPreprocessing_Vggish& default_instance();

  static inline const SoundAnalysisPreprocessing_Vggish* internal_default_instance() {
    return reinterpret_cast<const SoundAnalysisPreprocessing_Vggish*>(
               &_SoundAnalysisPreprocessing_Vggish_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SoundAnalysisPreprocessing_Vggish* other);

  // implements Message ----------------------------------------------

  inline SoundAnalysisPreprocessing_Vggish* New() const PROTOBUF_FINAL { return New(NULL); }

  SoundAnalysisPreprocessing_Vggish* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SoundAnalysisPreprocessing_Vggish& from);
  void MergeFrom(const SoundAnalysisPreprocessing_Vggish& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SoundAnalysisPreprocessing_Vggish* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SoundAnalysisPreprocessing : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing) */ {
 public:
  SoundAnalysisPreprocessing();
  virtual ~SoundAnalysisPreprocessing();

  SoundAnalysisPreprocessing(const SoundAnalysisPreprocessing& from);

  inline SoundAnalysisPreprocessing& operator=(const SoundAnalysisPreprocessing& from) {
    CopyFrom(from);
    return *this;
  }

  static const SoundAnalysisPreprocessing& default_instance();

  enum SoundAnalysisPreprocessingTypeCase {
    kVggish = 20,
    SOUNDANALYSISPREPROCESSINGTYPE_NOT_SET = 0,
  };

  static inline const SoundAnalysisPreprocessing* internal_default_instance() {
    return reinterpret_cast<const SoundAnalysisPreprocessing*>(
               &_SoundAnalysisPreprocessing_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SoundAnalysisPreprocessing* other);

  // implements Message ----------------------------------------------

  inline SoundAnalysisPreprocessing* New() const PROTOBUF_FINAL { return New(NULL); }

  SoundAnalysisPreprocessing* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SoundAnalysisPreprocessing& from);
  void MergeFrom(const SoundAnalysisPreprocessing& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SoundAnalysisPreprocessing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SoundAnalysisPreprocessing_Vggish Vggish;

  // accessors -------------------------------------------------------

  // .CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish vggish = 20;
  bool has_vggish() const;
  void clear_vggish();
  static const int kVggishFieldNumber = 20;
  const ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish& vggish() const;
  ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* mutable_vggish();
  ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* release_vggish();
  void set_allocated_vggish(::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* vggish);

  SoundAnalysisPreprocessingTypeCase SoundAnalysisPreprocessingType_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing)
 private:
  void set_has_vggish();

  inline bool has_SoundAnalysisPreprocessingType() const;
  void clear_SoundAnalysisPreprocessingType();
  inline void clear_has_SoundAnalysisPreprocessingType();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  union SoundAnalysisPreprocessingTypeUnion {
    SoundAnalysisPreprocessingTypeUnion() {}
    ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* vggish_;
  } SoundAnalysisPreprocessingType_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SoundAnalysisPreprocessing_Vggish

// -------------------------------------------------------------------

// SoundAnalysisPreprocessing

// .CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish vggish = 20;
inline bool SoundAnalysisPreprocessing::has_vggish() const {
  return SoundAnalysisPreprocessingType_case() == kVggish;
}
inline void SoundAnalysisPreprocessing::set_has_vggish() {
  _oneof_case_[0] = kVggish;
}
inline void SoundAnalysisPreprocessing::clear_vggish() {
  if (has_vggish()) {
    delete SoundAnalysisPreprocessingType_.vggish_;
    clear_has_SoundAnalysisPreprocessingType();
  }
}
inline  const ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish& SoundAnalysisPreprocessing::vggish() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.vggish)
  return has_vggish()
      ? *SoundAnalysisPreprocessingType_.vggish_
      : ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::default_instance();
}
inline ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* SoundAnalysisPreprocessing::mutable_vggish() {
  if (!has_vggish()) {
    clear_SoundAnalysisPreprocessingType();
    set_has_vggish();
    SoundAnalysisPreprocessingType_.vggish_ = new ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.vggish)
  return SoundAnalysisPreprocessingType_.vggish_;
}
inline ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* SoundAnalysisPreprocessing::release_vggish() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.vggish)
  if (has_vggish()) {
    clear_has_SoundAnalysisPreprocessingType();
    ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* temp = SoundAnalysisPreprocessingType_.vggish_;
    SoundAnalysisPreprocessingType_.vggish_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SoundAnalysisPreprocessing::set_allocated_vggish(::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* vggish) {
  clear_SoundAnalysisPreprocessingType();
  if (vggish) {
    set_has_vggish();
    SoundAnalysisPreprocessingType_.vggish_ = vggish;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.vggish)
}

inline bool SoundAnalysisPreprocessing::has_SoundAnalysisPreprocessingType() const {
  return SoundAnalysisPreprocessingType_case() != SOUNDANALYSISPREPROCESSINGTYPE_NOT_SET;
}
inline void SoundAnalysisPreprocessing::clear_has_SoundAnalysisPreprocessingType() {
  _oneof_case_[0] = SOUNDANALYSISPREPROCESSINGTYPE_NOT_SET;
}
inline SoundAnalysisPreprocessing::SoundAnalysisPreprocessingTypeCase SoundAnalysisPreprocessing::SoundAnalysisPreprocessingType_case() const {
  return SoundAnalysisPreprocessing::SoundAnalysisPreprocessingTypeCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace CoreMLModels
}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SoundAnalysisPreprocessing_2eproto__INCLUDED
