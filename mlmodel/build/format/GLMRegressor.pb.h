// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GLMRegressor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GLMRegressor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GLMRegressor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GLMRegressor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GLMRegressor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace CoreML {
namespace Specification {
class GLMRegressor;
struct GLMRegressorDefaultTypeInternal;
extern GLMRegressorDefaultTypeInternal _GLMRegressor_default_instance_;
class GLMRegressor_DoubleArray;
struct GLMRegressor_DoubleArrayDefaultTypeInternal;
extern GLMRegressor_DoubleArrayDefaultTypeInternal _GLMRegressor_DoubleArray_default_instance_;
}  // namespace Specification
}  // namespace CoreML
PROTOBUF_NAMESPACE_OPEN
template<> ::CoreML::Specification::GLMRegressor* Arena::CreateMaybeMessage<::CoreML::Specification::GLMRegressor>(Arena*);
template<> ::CoreML::Specification::GLMRegressor_DoubleArray* Arena::CreateMaybeMessage<::CoreML::Specification::GLMRegressor_DoubleArray>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CoreML {
namespace Specification {

enum GLMRegressor_PostEvaluationTransform : int {
  GLMRegressor_PostEvaluationTransform_NoTransform = 0,
  GLMRegressor_PostEvaluationTransform_Logit = 1,
  GLMRegressor_PostEvaluationTransform_Probit = 2,
  GLMRegressor_PostEvaluationTransform_GLMRegressor_PostEvaluationTransform_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GLMRegressor_PostEvaluationTransform_GLMRegressor_PostEvaluationTransform_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GLMRegressor_PostEvaluationTransform_IsValid(int value);
constexpr GLMRegressor_PostEvaluationTransform GLMRegressor_PostEvaluationTransform_PostEvaluationTransform_MIN = GLMRegressor_PostEvaluationTransform_NoTransform;
constexpr GLMRegressor_PostEvaluationTransform GLMRegressor_PostEvaluationTransform_PostEvaluationTransform_MAX = GLMRegressor_PostEvaluationTransform_Probit;
constexpr int GLMRegressor_PostEvaluationTransform_PostEvaluationTransform_ARRAYSIZE = GLMRegressor_PostEvaluationTransform_PostEvaluationTransform_MAX + 1;

const std::string& GLMRegressor_PostEvaluationTransform_Name(GLMRegressor_PostEvaluationTransform value);
template<typename T>
inline const std::string& GLMRegressor_PostEvaluationTransform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GLMRegressor_PostEvaluationTransform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GLMRegressor_PostEvaluationTransform_Name.");
  return GLMRegressor_PostEvaluationTransform_Name(static_cast<GLMRegressor_PostEvaluationTransform>(enum_t_value));
}
bool GLMRegressor_PostEvaluationTransform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GLMRegressor_PostEvaluationTransform* value);
// ===================================================================

class GLMRegressor_DoubleArray final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.GLMRegressor.DoubleArray) */ {
 public:
  inline GLMRegressor_DoubleArray() : GLMRegressor_DoubleArray(nullptr) {}
  ~GLMRegressor_DoubleArray() override;
  explicit constexpr GLMRegressor_DoubleArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GLMRegressor_DoubleArray(const GLMRegressor_DoubleArray& from);
  GLMRegressor_DoubleArray(GLMRegressor_DoubleArray&& from) noexcept
    : GLMRegressor_DoubleArray() {
    *this = ::std::move(from);
  }

  inline GLMRegressor_DoubleArray& operator=(const GLMRegressor_DoubleArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline GLMRegressor_DoubleArray& operator=(GLMRegressor_DoubleArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GLMRegressor_DoubleArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const GLMRegressor_DoubleArray* internal_default_instance() {
    return reinterpret_cast<const GLMRegressor_DoubleArray*>(
               &_GLMRegressor_DoubleArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GLMRegressor_DoubleArray& a, GLMRegressor_DoubleArray& b) {
    a.Swap(&b);
  }
  inline void Swap(GLMRegressor_DoubleArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GLMRegressor_DoubleArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GLMRegressor_DoubleArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GLMRegressor_DoubleArray>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GLMRegressor_DoubleArray& from);
  void MergeFrom(const GLMRegressor_DoubleArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GLMRegressor_DoubleArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.GLMRegressor.DoubleArray";
  }
  protected:
  explicit GLMRegressor_DoubleArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated double value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:CoreML.Specification.GLMRegressor.DoubleArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GLMRegressor_2eproto;
};
// -------------------------------------------------------------------

class GLMRegressor final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.GLMRegressor) */ {
 public:
  inline GLMRegressor() : GLMRegressor(nullptr) {}
  ~GLMRegressor() override;
  explicit constexpr GLMRegressor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GLMRegressor(const GLMRegressor& from);
  GLMRegressor(GLMRegressor&& from) noexcept
    : GLMRegressor() {
    *this = ::std::move(from);
  }

  inline GLMRegressor& operator=(const GLMRegressor& from) {
    CopyFrom(from);
    return *this;
  }
  inline GLMRegressor& operator=(GLMRegressor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GLMRegressor& default_instance() {
    return *internal_default_instance();
  }
  static inline const GLMRegressor* internal_default_instance() {
    return reinterpret_cast<const GLMRegressor*>(
               &_GLMRegressor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GLMRegressor& a, GLMRegressor& b) {
    a.Swap(&b);
  }
  inline void Swap(GLMRegressor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GLMRegressor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GLMRegressor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GLMRegressor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GLMRegressor& from);
  void MergeFrom(const GLMRegressor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GLMRegressor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.GLMRegressor";
  }
  protected:
  explicit GLMRegressor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GLMRegressor_DoubleArray DoubleArray;

  typedef GLMRegressor_PostEvaluationTransform PostEvaluationTransform;
  static constexpr PostEvaluationTransform NoTransform =
    GLMRegressor_PostEvaluationTransform_NoTransform;
  static constexpr PostEvaluationTransform Logit =
    GLMRegressor_PostEvaluationTransform_Logit;
  static constexpr PostEvaluationTransform Probit =
    GLMRegressor_PostEvaluationTransform_Probit;
  static inline bool PostEvaluationTransform_IsValid(int value) {
    return GLMRegressor_PostEvaluationTransform_IsValid(value);
  }
  static constexpr PostEvaluationTransform PostEvaluationTransform_MIN =
    GLMRegressor_PostEvaluationTransform_PostEvaluationTransform_MIN;
  static constexpr PostEvaluationTransform PostEvaluationTransform_MAX =
    GLMRegressor_PostEvaluationTransform_PostEvaluationTransform_MAX;
  static constexpr int PostEvaluationTransform_ARRAYSIZE =
    GLMRegressor_PostEvaluationTransform_PostEvaluationTransform_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PostEvaluationTransform_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PostEvaluationTransform>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PostEvaluationTransform_Name.");
    return GLMRegressor_PostEvaluationTransform_Name(enum_t_value);
  }
  static inline bool PostEvaluationTransform_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PostEvaluationTransform* value) {
    return GLMRegressor_PostEvaluationTransform_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kPostEvaluationTransformFieldNumber = 3,
  };
  // repeated .CoreML.Specification.GLMRegressor.DoubleArray weights = 1;
  int weights_size() const;
  private:
  int _internal_weights_size() const;
  public:
  void clear_weights();
  ::CoreML::Specification::GLMRegressor_DoubleArray* mutable_weights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CoreML::Specification::GLMRegressor_DoubleArray >*
      mutable_weights();
  private:
  const ::CoreML::Specification::GLMRegressor_DoubleArray& _internal_weights(int index) const;
  ::CoreML::Specification::GLMRegressor_DoubleArray* _internal_add_weights();
  public:
  const ::CoreML::Specification::GLMRegressor_DoubleArray& weights(int index) const;
  ::CoreML::Specification::GLMRegressor_DoubleArray* add_weights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CoreML::Specification::GLMRegressor_DoubleArray >&
      weights() const;

  // repeated double offset = 2;
  int offset_size() const;
  private:
  int _internal_offset_size() const;
  public:
  void clear_offset();
  private:
  double _internal_offset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_offset() const;
  void _internal_add_offset(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_offset();
  public:
  double offset(int index) const;
  void set_offset(int index, double value);
  void add_offset(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      offset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_offset();

  // .CoreML.Specification.GLMRegressor.PostEvaluationTransform postEvaluationTransform = 3;
  void clear_postevaluationtransform();
  ::CoreML::Specification::GLMRegressor_PostEvaluationTransform postevaluationtransform() const;
  void set_postevaluationtransform(::CoreML::Specification::GLMRegressor_PostEvaluationTransform value);
  private:
  ::CoreML::Specification::GLMRegressor_PostEvaluationTransform _internal_postevaluationtransform() const;
  void _internal_set_postevaluationtransform(::CoreML::Specification::GLMRegressor_PostEvaluationTransform value);
  public:

  // @@protoc_insertion_point(class_scope:CoreML.Specification.GLMRegressor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CoreML::Specification::GLMRegressor_DoubleArray > weights_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > offset_;
  int postevaluationtransform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GLMRegressor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GLMRegressor_DoubleArray

// repeated double value = 1;
inline int GLMRegressor_DoubleArray::_internal_value_size() const {
  return value_.size();
}
inline int GLMRegressor_DoubleArray::value_size() const {
  return _internal_value_size();
}
inline void GLMRegressor_DoubleArray::clear_value() {
  value_.Clear();
}
inline double GLMRegressor_DoubleArray::_internal_value(int index) const {
  return value_.Get(index);
}
inline double GLMRegressor_DoubleArray::value(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.GLMRegressor.DoubleArray.value)
  return _internal_value(index);
}
inline void GLMRegressor_DoubleArray::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.GLMRegressor.DoubleArray.value)
}
inline void GLMRegressor_DoubleArray::_internal_add_value(double value) {
  value_.Add(value);
}
inline void GLMRegressor_DoubleArray::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.GLMRegressor.DoubleArray.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GLMRegressor_DoubleArray::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GLMRegressor_DoubleArray::value() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.GLMRegressor.DoubleArray.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GLMRegressor_DoubleArray::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GLMRegressor_DoubleArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.GLMRegressor.DoubleArray.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// GLMRegressor

// repeated .CoreML.Specification.GLMRegressor.DoubleArray weights = 1;
inline int GLMRegressor::_internal_weights_size() const {
  return weights_.size();
}
inline int GLMRegressor::weights_size() const {
  return _internal_weights_size();
}
inline void GLMRegressor::clear_weights() {
  weights_.Clear();
}
inline ::CoreML::Specification::GLMRegressor_DoubleArray* GLMRegressor::mutable_weights(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.GLMRegressor.weights)
  return weights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CoreML::Specification::GLMRegressor_DoubleArray >*
GLMRegressor::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.GLMRegressor.weights)
  return &weights_;
}
inline const ::CoreML::Specification::GLMRegressor_DoubleArray& GLMRegressor::_internal_weights(int index) const {
  return weights_.Get(index);
}
inline const ::CoreML::Specification::GLMRegressor_DoubleArray& GLMRegressor::weights(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.GLMRegressor.weights)
  return _internal_weights(index);
}
inline ::CoreML::Specification::GLMRegressor_DoubleArray* GLMRegressor::_internal_add_weights() {
  return weights_.Add();
}
inline ::CoreML::Specification::GLMRegressor_DoubleArray* GLMRegressor::add_weights() {
  ::CoreML::Specification::GLMRegressor_DoubleArray* _add = _internal_add_weights();
  // @@protoc_insertion_point(field_add:CoreML.Specification.GLMRegressor.weights)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CoreML::Specification::GLMRegressor_DoubleArray >&
GLMRegressor::weights() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.GLMRegressor.weights)
  return weights_;
}

// repeated double offset = 2;
inline int GLMRegressor::_internal_offset_size() const {
  return offset_.size();
}
inline int GLMRegressor::offset_size() const {
  return _internal_offset_size();
}
inline void GLMRegressor::clear_offset() {
  offset_.Clear();
}
inline double GLMRegressor::_internal_offset(int index) const {
  return offset_.Get(index);
}
inline double GLMRegressor::offset(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.GLMRegressor.offset)
  return _internal_offset(index);
}
inline void GLMRegressor::set_offset(int index, double value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.GLMRegressor.offset)
}
inline void GLMRegressor::_internal_add_offset(double value) {
  offset_.Add(value);
}
inline void GLMRegressor::add_offset(double value) {
  _internal_add_offset(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.GLMRegressor.offset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GLMRegressor::_internal_offset() const {
  return offset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GLMRegressor::offset() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.GLMRegressor.offset)
  return _internal_offset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GLMRegressor::_internal_mutable_offset() {
  return &offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GLMRegressor::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.GLMRegressor.offset)
  return _internal_mutable_offset();
}

// .CoreML.Specification.GLMRegressor.PostEvaluationTransform postEvaluationTransform = 3;
inline void GLMRegressor::clear_postevaluationtransform() {
  postevaluationtransform_ = 0;
}
inline ::CoreML::Specification::GLMRegressor_PostEvaluationTransform GLMRegressor::_internal_postevaluationtransform() const {
  return static_cast< ::CoreML::Specification::GLMRegressor_PostEvaluationTransform >(postevaluationtransform_);
}
inline ::CoreML::Specification::GLMRegressor_PostEvaluationTransform GLMRegressor::postevaluationtransform() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.GLMRegressor.postEvaluationTransform)
  return _internal_postevaluationtransform();
}
inline void GLMRegressor::_internal_set_postevaluationtransform(::CoreML::Specification::GLMRegressor_PostEvaluationTransform value) {
  
  postevaluationtransform_ = value;
}
inline void GLMRegressor::set_postevaluationtransform(::CoreML::Specification::GLMRegressor_PostEvaluationTransform value) {
  _internal_set_postevaluationtransform(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.GLMRegressor.postEvaluationTransform)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CoreML::Specification::GLMRegressor_PostEvaluationTransform> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GLMRegressor_2eproto
