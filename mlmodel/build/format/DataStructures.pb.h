// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataStructures.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DataStructures_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DataStructures_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
#include "FeatureTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DataStructures_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DataStructures_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace CoreML {
namespace Specification {
class DoubleRange;
struct DoubleRangeDefaultTypeInternal;
extern DoubleRangeDefaultTypeInternal _DoubleRange_default_instance_;
class DoubleVector;
struct DoubleVectorDefaultTypeInternal;
extern DoubleVectorDefaultTypeInternal _DoubleVector_default_instance_;
class FloatVector;
struct FloatVectorDefaultTypeInternal;
extern FloatVectorDefaultTypeInternal _FloatVector_default_instance_;
class Int64Range;
struct Int64RangeDefaultTypeInternal;
extern Int64RangeDefaultTypeInternal _Int64Range_default_instance_;
class Int64Set;
struct Int64SetDefaultTypeInternal;
extern Int64SetDefaultTypeInternal _Int64Set_default_instance_;
class Int64ToDoubleMap;
struct Int64ToDoubleMapDefaultTypeInternal;
extern Int64ToDoubleMapDefaultTypeInternal _Int64ToDoubleMap_default_instance_;
class Int64ToDoubleMap_MapEntry_DoNotUse;
struct Int64ToDoubleMap_MapEntry_DoNotUseDefaultTypeInternal;
extern Int64ToDoubleMap_MapEntry_DoNotUseDefaultTypeInternal _Int64ToDoubleMap_MapEntry_DoNotUse_default_instance_;
class Int64ToStringMap;
struct Int64ToStringMapDefaultTypeInternal;
extern Int64ToStringMapDefaultTypeInternal _Int64ToStringMap_default_instance_;
class Int64ToStringMap_MapEntry_DoNotUse;
struct Int64ToStringMap_MapEntry_DoNotUseDefaultTypeInternal;
extern Int64ToStringMap_MapEntry_DoNotUseDefaultTypeInternal _Int64ToStringMap_MapEntry_DoNotUse_default_instance_;
class Int64Vector;
struct Int64VectorDefaultTypeInternal;
extern Int64VectorDefaultTypeInternal _Int64Vector_default_instance_;
class PrecisionRecallCurve;
struct PrecisionRecallCurveDefaultTypeInternal;
extern PrecisionRecallCurveDefaultTypeInternal _PrecisionRecallCurve_default_instance_;
class StringToDoubleMap;
struct StringToDoubleMapDefaultTypeInternal;
extern StringToDoubleMapDefaultTypeInternal _StringToDoubleMap_default_instance_;
class StringToDoubleMap_MapEntry_DoNotUse;
struct StringToDoubleMap_MapEntry_DoNotUseDefaultTypeInternal;
extern StringToDoubleMap_MapEntry_DoNotUseDefaultTypeInternal _StringToDoubleMap_MapEntry_DoNotUse_default_instance_;
class StringToInt64Map;
struct StringToInt64MapDefaultTypeInternal;
extern StringToInt64MapDefaultTypeInternal _StringToInt64Map_default_instance_;
class StringToInt64Map_MapEntry_DoNotUse;
struct StringToInt64Map_MapEntry_DoNotUseDefaultTypeInternal;
extern StringToInt64Map_MapEntry_DoNotUseDefaultTypeInternal _StringToInt64Map_MapEntry_DoNotUse_default_instance_;
class StringVector;
struct StringVectorDefaultTypeInternal;
extern StringVectorDefaultTypeInternal _StringVector_default_instance_;
}  // namespace Specification
}  // namespace CoreML
PROTOBUF_NAMESPACE_OPEN
template<> ::CoreML::Specification::DoubleRange* Arena::CreateMaybeMessage<::CoreML::Specification::DoubleRange>(Arena*);
template<> ::CoreML::Specification::DoubleVector* Arena::CreateMaybeMessage<::CoreML::Specification::DoubleVector>(Arena*);
template<> ::CoreML::Specification::FloatVector* Arena::CreateMaybeMessage<::CoreML::Specification::FloatVector>(Arena*);
template<> ::CoreML::Specification::Int64Range* Arena::CreateMaybeMessage<::CoreML::Specification::Int64Range>(Arena*);
template<> ::CoreML::Specification::Int64Set* Arena::CreateMaybeMessage<::CoreML::Specification::Int64Set>(Arena*);
template<> ::CoreML::Specification::Int64ToDoubleMap* Arena::CreateMaybeMessage<::CoreML::Specification::Int64ToDoubleMap>(Arena*);
template<> ::CoreML::Specification::Int64ToDoubleMap_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::CoreML::Specification::Int64ToDoubleMap_MapEntry_DoNotUse>(Arena*);
template<> ::CoreML::Specification::Int64ToStringMap* Arena::CreateMaybeMessage<::CoreML::Specification::Int64ToStringMap>(Arena*);
template<> ::CoreML::Specification::Int64ToStringMap_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::CoreML::Specification::Int64ToStringMap_MapEntry_DoNotUse>(Arena*);
template<> ::CoreML::Specification::Int64Vector* Arena::CreateMaybeMessage<::CoreML::Specification::Int64Vector>(Arena*);
template<> ::CoreML::Specification::PrecisionRecallCurve* Arena::CreateMaybeMessage<::CoreML::Specification::PrecisionRecallCurve>(Arena*);
template<> ::CoreML::Specification::StringToDoubleMap* Arena::CreateMaybeMessage<::CoreML::Specification::StringToDoubleMap>(Arena*);
template<> ::CoreML::Specification::StringToDoubleMap_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::CoreML::Specification::StringToDoubleMap_MapEntry_DoNotUse>(Arena*);
template<> ::CoreML::Specification::StringToInt64Map* Arena::CreateMaybeMessage<::CoreML::Specification::StringToInt64Map>(Arena*);
template<> ::CoreML::Specification::StringToInt64Map_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::CoreML::Specification::StringToInt64Map_MapEntry_DoNotUse>(Arena*);
template<> ::CoreML::Specification::StringVector* Arena::CreateMaybeMessage<::CoreML::Specification::StringVector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CoreML {
namespace Specification {

// ===================================================================

class StringToInt64Map_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<StringToInt64Map_MapEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<StringToInt64Map_MapEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  StringToInt64Map_MapEntry_DoNotUse();
  explicit constexpr StringToInt64Map_MapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StringToInt64Map_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StringToInt64Map_MapEntry_DoNotUse& other);
  static const StringToInt64Map_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StringToInt64Map_MapEntry_DoNotUse*>(&_StringToInt64Map_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "CoreML.Specification.StringToInt64Map.MapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class StringToInt64Map final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.StringToInt64Map) */ {
 public:
  inline StringToInt64Map() : StringToInt64Map(nullptr) {}
  ~StringToInt64Map() override;
  explicit constexpr StringToInt64Map(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringToInt64Map(const StringToInt64Map& from);
  StringToInt64Map(StringToInt64Map&& from) noexcept
    : StringToInt64Map() {
    *this = ::std::move(from);
  }

  inline StringToInt64Map& operator=(const StringToInt64Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringToInt64Map& operator=(StringToInt64Map&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const StringToInt64Map& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringToInt64Map* internal_default_instance() {
    return reinterpret_cast<const StringToInt64Map*>(
               &_StringToInt64Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StringToInt64Map& a, StringToInt64Map& b) {
    a.Swap(&b);
  }
  inline void Swap(StringToInt64Map* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringToInt64Map* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringToInt64Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringToInt64Map>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StringToInt64Map& from);
  void MergeFrom(const StringToInt64Map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringToInt64Map* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.StringToInt64Map";
  }
  protected:
  explicit StringToInt64Map(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // map<string, int64> map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:CoreML.Specification.StringToInt64Map)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      StringToInt64Map_MapEntry_DoNotUse,
      std::string, int64_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataStructures_2eproto;
};
// -------------------------------------------------------------------

class Int64ToStringMap_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Int64ToStringMap_MapEntry_DoNotUse, 
    int64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Int64ToStringMap_MapEntry_DoNotUse, 
    int64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Int64ToStringMap_MapEntry_DoNotUse();
  explicit constexpr Int64ToStringMap_MapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Int64ToStringMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Int64ToStringMap_MapEntry_DoNotUse& other);
  static const Int64ToStringMap_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Int64ToStringMap_MapEntry_DoNotUse*>(&_Int64ToStringMap_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "CoreML.Specification.Int64ToStringMap.MapEntry.value");
 }
};

// -------------------------------------------------------------------

class Int64ToStringMap final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.Int64ToStringMap) */ {
 public:
  inline Int64ToStringMap() : Int64ToStringMap(nullptr) {}
  ~Int64ToStringMap() override;
  explicit constexpr Int64ToStringMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int64ToStringMap(const Int64ToStringMap& from);
  Int64ToStringMap(Int64ToStringMap&& from) noexcept
    : Int64ToStringMap() {
    *this = ::std::move(from);
  }

  inline Int64ToStringMap& operator=(const Int64ToStringMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64ToStringMap& operator=(Int64ToStringMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Int64ToStringMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64ToStringMap* internal_default_instance() {
    return reinterpret_cast<const Int64ToStringMap*>(
               &_Int64ToStringMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Int64ToStringMap& a, Int64ToStringMap& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64ToStringMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64ToStringMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64ToStringMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64ToStringMap>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Int64ToStringMap& from);
  void MergeFrom(const Int64ToStringMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Int64ToStringMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.Int64ToStringMap";
  }
  protected:
  explicit Int64ToStringMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // map<int64, string> map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:CoreML.Specification.Int64ToStringMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      Int64ToStringMap_MapEntry_DoNotUse,
      int64_t, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataStructures_2eproto;
};
// -------------------------------------------------------------------

class StringToDoubleMap_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<StringToDoubleMap_MapEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<StringToDoubleMap_MapEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  StringToDoubleMap_MapEntry_DoNotUse();
  explicit constexpr StringToDoubleMap_MapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StringToDoubleMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StringToDoubleMap_MapEntry_DoNotUse& other);
  static const StringToDoubleMap_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StringToDoubleMap_MapEntry_DoNotUse*>(&_StringToDoubleMap_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "CoreML.Specification.StringToDoubleMap.MapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class StringToDoubleMap final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.StringToDoubleMap) */ {
 public:
  inline StringToDoubleMap() : StringToDoubleMap(nullptr) {}
  ~StringToDoubleMap() override;
  explicit constexpr StringToDoubleMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringToDoubleMap(const StringToDoubleMap& from);
  StringToDoubleMap(StringToDoubleMap&& from) noexcept
    : StringToDoubleMap() {
    *this = ::std::move(from);
  }

  inline StringToDoubleMap& operator=(const StringToDoubleMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringToDoubleMap& operator=(StringToDoubleMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const StringToDoubleMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringToDoubleMap* internal_default_instance() {
    return reinterpret_cast<const StringToDoubleMap*>(
               &_StringToDoubleMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StringToDoubleMap& a, StringToDoubleMap& b) {
    a.Swap(&b);
  }
  inline void Swap(StringToDoubleMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringToDoubleMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringToDoubleMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringToDoubleMap>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StringToDoubleMap& from);
  void MergeFrom(const StringToDoubleMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringToDoubleMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.StringToDoubleMap";
  }
  protected:
  explicit StringToDoubleMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // map<string, double> map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:CoreML.Specification.StringToDoubleMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      StringToDoubleMap_MapEntry_DoNotUse,
      std::string, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataStructures_2eproto;
};
// -------------------------------------------------------------------

class Int64ToDoubleMap_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Int64ToDoubleMap_MapEntry_DoNotUse, 
    int64_t, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Int64ToDoubleMap_MapEntry_DoNotUse, 
    int64_t, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  Int64ToDoubleMap_MapEntry_DoNotUse();
  explicit constexpr Int64ToDoubleMap_MapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Int64ToDoubleMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Int64ToDoubleMap_MapEntry_DoNotUse& other);
  static const Int64ToDoubleMap_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Int64ToDoubleMap_MapEntry_DoNotUse*>(&_Int64ToDoubleMap_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class Int64ToDoubleMap final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.Int64ToDoubleMap) */ {
 public:
  inline Int64ToDoubleMap() : Int64ToDoubleMap(nullptr) {}
  ~Int64ToDoubleMap() override;
  explicit constexpr Int64ToDoubleMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int64ToDoubleMap(const Int64ToDoubleMap& from);
  Int64ToDoubleMap(Int64ToDoubleMap&& from) noexcept
    : Int64ToDoubleMap() {
    *this = ::std::move(from);
  }

  inline Int64ToDoubleMap& operator=(const Int64ToDoubleMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64ToDoubleMap& operator=(Int64ToDoubleMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Int64ToDoubleMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64ToDoubleMap* internal_default_instance() {
    return reinterpret_cast<const Int64ToDoubleMap*>(
               &_Int64ToDoubleMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Int64ToDoubleMap& a, Int64ToDoubleMap& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64ToDoubleMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64ToDoubleMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64ToDoubleMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64ToDoubleMap>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Int64ToDoubleMap& from);
  void MergeFrom(const Int64ToDoubleMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Int64ToDoubleMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.Int64ToDoubleMap";
  }
  protected:
  explicit Int64ToDoubleMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // map<int64, double> map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:CoreML.Specification.Int64ToDoubleMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      Int64ToDoubleMap_MapEntry_DoNotUse,
      int64_t, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataStructures_2eproto;
};
// -------------------------------------------------------------------

class StringVector final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.StringVector) */ {
 public:
  inline StringVector() : StringVector(nullptr) {}
  ~StringVector() override;
  explicit constexpr StringVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringVector(const StringVector& from);
  StringVector(StringVector&& from) noexcept
    : StringVector() {
    *this = ::std::move(from);
  }

  inline StringVector& operator=(const StringVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringVector& operator=(StringVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const StringVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringVector* internal_default_instance() {
    return reinterpret_cast<const StringVector*>(
               &_StringVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StringVector& a, StringVector& b) {
    a.Swap(&b);
  }
  inline void Swap(StringVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringVector>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StringVector& from);
  void MergeFrom(const StringVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.StringVector";
  }
  protected:
  explicit StringVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
  };
  // repeated string vector = 1;
  int vector_size() const;
  private:
  int _internal_vector_size() const;
  public:
  void clear_vector();
  const std::string& vector(int index) const;
  std::string* mutable_vector(int index);
  void set_vector(int index, const std::string& value);
  void set_vector(int index, std::string&& value);
  void set_vector(int index, const char* value);
  void set_vector(int index, const char* value, size_t size);
  std::string* add_vector();
  void add_vector(const std::string& value);
  void add_vector(std::string&& value);
  void add_vector(const char* value);
  void add_vector(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vector();
  private:
  const std::string& _internal_vector(int index) const;
  std::string* _internal_add_vector();
  public:

  // @@protoc_insertion_point(class_scope:CoreML.Specification.StringVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataStructures_2eproto;
};
// -------------------------------------------------------------------

class Int64Vector final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.Int64Vector) */ {
 public:
  inline Int64Vector() : Int64Vector(nullptr) {}
  ~Int64Vector() override;
  explicit constexpr Int64Vector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int64Vector(const Int64Vector& from);
  Int64Vector(Int64Vector&& from) noexcept
    : Int64Vector() {
    *this = ::std::move(from);
  }

  inline Int64Vector& operator=(const Int64Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Vector& operator=(Int64Vector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Int64Vector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64Vector* internal_default_instance() {
    return reinterpret_cast<const Int64Vector*>(
               &_Int64Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Int64Vector& a, Int64Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Vector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64Vector>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Int64Vector& from);
  void MergeFrom(const Int64Vector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Int64Vector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.Int64Vector";
  }
  protected:
  explicit Int64Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
  };
  // repeated int64 vector = 1;
  int vector_size() const;
  private:
  int _internal_vector_size() const;
  public:
  void clear_vector();
  private:
  int64_t _internal_vector(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_vector() const;
  void _internal_add_vector(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_vector();
  public:
  int64_t vector(int index) const;
  void set_vector(int index, int64_t value);
  void add_vector(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      vector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_vector();

  // @@protoc_insertion_point(class_scope:CoreML.Specification.Int64Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > vector_;
  mutable std::atomic<int> _vector_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataStructures_2eproto;
};
// -------------------------------------------------------------------

class FloatVector final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.FloatVector) */ {
 public:
  inline FloatVector() : FloatVector(nullptr) {}
  ~FloatVector() override;
  explicit constexpr FloatVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatVector(const FloatVector& from);
  FloatVector(FloatVector&& from) noexcept
    : FloatVector() {
    *this = ::std::move(from);
  }

  inline FloatVector& operator=(const FloatVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatVector& operator=(FloatVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FloatVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatVector* internal_default_instance() {
    return reinterpret_cast<const FloatVector*>(
               &_FloatVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FloatVector& a, FloatVector& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatVector>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FloatVector& from);
  void MergeFrom(const FloatVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FloatVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.FloatVector";
  }
  protected:
  explicit FloatVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
  };
  // repeated float vector = 1;
  int vector_size() const;
  private:
  int _internal_vector_size() const;
  public:
  void clear_vector();
  private:
  float _internal_vector(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vector() const;
  void _internal_add_vector(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vector();
  public:
  float vector(int index) const;
  void set_vector(int index, float value);
  void add_vector(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vector();

  // @@protoc_insertion_point(class_scope:CoreML.Specification.FloatVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataStructures_2eproto;
};
// -------------------------------------------------------------------

class DoubleVector final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.DoubleVector) */ {
 public:
  inline DoubleVector() : DoubleVector(nullptr) {}
  ~DoubleVector() override;
  explicit constexpr DoubleVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoubleVector(const DoubleVector& from);
  DoubleVector(DoubleVector&& from) noexcept
    : DoubleVector() {
    *this = ::std::move(from);
  }

  inline DoubleVector& operator=(const DoubleVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleVector& operator=(DoubleVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DoubleVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoubleVector* internal_default_instance() {
    return reinterpret_cast<const DoubleVector*>(
               &_DoubleVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DoubleVector& a, DoubleVector& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoubleVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DoubleVector>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DoubleVector& from);
  void MergeFrom(const DoubleVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DoubleVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.DoubleVector";
  }
  protected:
  explicit DoubleVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
  };
  // repeated double vector = 1;
  int vector_size() const;
  private:
  int _internal_vector_size() const;
  public:
  void clear_vector();
  private:
  double _internal_vector(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_vector() const;
  void _internal_add_vector(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_vector();
  public:
  double vector(int index) const;
  void set_vector(int index, double value);
  void add_vector(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      vector() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_vector();

  // @@protoc_insertion_point(class_scope:CoreML.Specification.DoubleVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > vector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataStructures_2eproto;
};
// -------------------------------------------------------------------

class Int64Range final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.Int64Range) */ {
 public:
  inline Int64Range() : Int64Range(nullptr) {}
  ~Int64Range() override;
  explicit constexpr Int64Range(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int64Range(const Int64Range& from);
  Int64Range(Int64Range&& from) noexcept
    : Int64Range() {
    *this = ::std::move(from);
  }

  inline Int64Range& operator=(const Int64Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Range& operator=(Int64Range&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Int64Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64Range* internal_default_instance() {
    return reinterpret_cast<const Int64Range*>(
               &_Int64Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Int64Range& a, Int64Range& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Range* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Range* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64Range>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Int64Range& from);
  void MergeFrom(const Int64Range& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Int64Range* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.Int64Range";
  }
  protected:
  explicit Int64Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinValueFieldNumber = 1,
    kMaxValueFieldNumber = 2,
  };
  // int64 minValue = 1;
  void clear_minvalue();
  int64_t minvalue() const;
  void set_minvalue(int64_t value);
  private:
  int64_t _internal_minvalue() const;
  void _internal_set_minvalue(int64_t value);
  public:

  // int64 maxValue = 2;
  void clear_maxvalue();
  int64_t maxvalue() const;
  void set_maxvalue(int64_t value);
  private:
  int64_t _internal_maxvalue() const;
  void _internal_set_maxvalue(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CoreML.Specification.Int64Range)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t minvalue_;
  int64_t maxvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataStructures_2eproto;
};
// -------------------------------------------------------------------

class Int64Set final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.Int64Set) */ {
 public:
  inline Int64Set() : Int64Set(nullptr) {}
  ~Int64Set() override;
  explicit constexpr Int64Set(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int64Set(const Int64Set& from);
  Int64Set(Int64Set&& from) noexcept
    : Int64Set() {
    *this = ::std::move(from);
  }

  inline Int64Set& operator=(const Int64Set& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Set& operator=(Int64Set&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Int64Set& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64Set* internal_default_instance() {
    return reinterpret_cast<const Int64Set*>(
               &_Int64Set_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Int64Set& a, Int64Set& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Set* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Set* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64Set* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64Set>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Int64Set& from);
  void MergeFrom(const Int64Set& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Int64Set* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.Int64Set";
  }
  protected:
  explicit Int64Set(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated int64 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  int64_t _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_values() const;
  void _internal_add_values(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_values();
  public:
  int64_t values(int index) const;
  void set_values(int index, int64_t value);
  void add_values(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:CoreML.Specification.Int64Set)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataStructures_2eproto;
};
// -------------------------------------------------------------------

class DoubleRange final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.DoubleRange) */ {
 public:
  inline DoubleRange() : DoubleRange(nullptr) {}
  ~DoubleRange() override;
  explicit constexpr DoubleRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoubleRange(const DoubleRange& from);
  DoubleRange(DoubleRange&& from) noexcept
    : DoubleRange() {
    *this = ::std::move(from);
  }

  inline DoubleRange& operator=(const DoubleRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleRange& operator=(DoubleRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DoubleRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoubleRange* internal_default_instance() {
    return reinterpret_cast<const DoubleRange*>(
               &_DoubleRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DoubleRange& a, DoubleRange& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoubleRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DoubleRange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DoubleRange& from);
  void MergeFrom(const DoubleRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DoubleRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.DoubleRange";
  }
  protected:
  explicit DoubleRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinValueFieldNumber = 1,
    kMaxValueFieldNumber = 2,
  };
  // double minValue = 1;
  void clear_minvalue();
  double minvalue() const;
  void set_minvalue(double value);
  private:
  double _internal_minvalue() const;
  void _internal_set_minvalue(double value);
  public:

  // double maxValue = 2;
  void clear_maxvalue();
  double maxvalue() const;
  void set_maxvalue(double value);
  private:
  double _internal_maxvalue() const;
  void _internal_set_maxvalue(double value);
  public:

  // @@protoc_insertion_point(class_scope:CoreML.Specification.DoubleRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double minvalue_;
  double maxvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataStructures_2eproto;
};
// -------------------------------------------------------------------

class PrecisionRecallCurve final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.PrecisionRecallCurve) */ {
 public:
  inline PrecisionRecallCurve() : PrecisionRecallCurve(nullptr) {}
  ~PrecisionRecallCurve() override;
  explicit constexpr PrecisionRecallCurve(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrecisionRecallCurve(const PrecisionRecallCurve& from);
  PrecisionRecallCurve(PrecisionRecallCurve&& from) noexcept
    : PrecisionRecallCurve() {
    *this = ::std::move(from);
  }

  inline PrecisionRecallCurve& operator=(const PrecisionRecallCurve& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrecisionRecallCurve& operator=(PrecisionRecallCurve&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PrecisionRecallCurve& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrecisionRecallCurve* internal_default_instance() {
    return reinterpret_cast<const PrecisionRecallCurve*>(
               &_PrecisionRecallCurve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PrecisionRecallCurve& a, PrecisionRecallCurve& b) {
    a.Swap(&b);
  }
  inline void Swap(PrecisionRecallCurve* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrecisionRecallCurve* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrecisionRecallCurve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrecisionRecallCurve>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PrecisionRecallCurve& from);
  void MergeFrom(const PrecisionRecallCurve& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrecisionRecallCurve* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.PrecisionRecallCurve";
  }
  protected:
  explicit PrecisionRecallCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrecisionValuesFieldNumber = 1,
    kPrecisionConfidenceThresholdsFieldNumber = 2,
    kRecallValuesFieldNumber = 3,
    kRecallConfidenceThresholdsFieldNumber = 4,
  };
  // .CoreML.Specification.FloatVector precisionValues = 1;
  bool has_precisionvalues() const;
  private:
  bool _internal_has_precisionvalues() const;
  public:
  void clear_precisionvalues();
  const ::CoreML::Specification::FloatVector& precisionvalues() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::FloatVector* release_precisionvalues();
  ::CoreML::Specification::FloatVector* mutable_precisionvalues();
  void set_allocated_precisionvalues(::CoreML::Specification::FloatVector* precisionvalues);
  private:
  const ::CoreML::Specification::FloatVector& _internal_precisionvalues() const;
  ::CoreML::Specification::FloatVector* _internal_mutable_precisionvalues();
  public:
  void unsafe_arena_set_allocated_precisionvalues(
      ::CoreML::Specification::FloatVector* precisionvalues);
  ::CoreML::Specification::FloatVector* unsafe_arena_release_precisionvalues();

  // .CoreML.Specification.FloatVector precisionConfidenceThresholds = 2;
  bool has_precisionconfidencethresholds() const;
  private:
  bool _internal_has_precisionconfidencethresholds() const;
  public:
  void clear_precisionconfidencethresholds();
  const ::CoreML::Specification::FloatVector& precisionconfidencethresholds() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::FloatVector* release_precisionconfidencethresholds();
  ::CoreML::Specification::FloatVector* mutable_precisionconfidencethresholds();
  void set_allocated_precisionconfidencethresholds(::CoreML::Specification::FloatVector* precisionconfidencethresholds);
  private:
  const ::CoreML::Specification::FloatVector& _internal_precisionconfidencethresholds() const;
  ::CoreML::Specification::FloatVector* _internal_mutable_precisionconfidencethresholds();
  public:
  void unsafe_arena_set_allocated_precisionconfidencethresholds(
      ::CoreML::Specification::FloatVector* precisionconfidencethresholds);
  ::CoreML::Specification::FloatVector* unsafe_arena_release_precisionconfidencethresholds();

  // .CoreML.Specification.FloatVector recallValues = 3;
  bool has_recallvalues() const;
  private:
  bool _internal_has_recallvalues() const;
  public:
  void clear_recallvalues();
  const ::CoreML::Specification::FloatVector& recallvalues() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::FloatVector* release_recallvalues();
  ::CoreML::Specification::FloatVector* mutable_recallvalues();
  void set_allocated_recallvalues(::CoreML::Specification::FloatVector* recallvalues);
  private:
  const ::CoreML::Specification::FloatVector& _internal_recallvalues() const;
  ::CoreML::Specification::FloatVector* _internal_mutable_recallvalues();
  public:
  void unsafe_arena_set_allocated_recallvalues(
      ::CoreML::Specification::FloatVector* recallvalues);
  ::CoreML::Specification::FloatVector* unsafe_arena_release_recallvalues();

  // .CoreML.Specification.FloatVector recallConfidenceThresholds = 4;
  bool has_recallconfidencethresholds() const;
  private:
  bool _internal_has_recallconfidencethresholds() const;
  public:
  void clear_recallconfidencethresholds();
  const ::CoreML::Specification::FloatVector& recallconfidencethresholds() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::FloatVector* release_recallconfidencethresholds();
  ::CoreML::Specification::FloatVector* mutable_recallconfidencethresholds();
  void set_allocated_recallconfidencethresholds(::CoreML::Specification::FloatVector* recallconfidencethresholds);
  private:
  const ::CoreML::Specification::FloatVector& _internal_recallconfidencethresholds() const;
  ::CoreML::Specification::FloatVector* _internal_mutable_recallconfidencethresholds();
  public:
  void unsafe_arena_set_allocated_recallconfidencethresholds(
      ::CoreML::Specification::FloatVector* recallconfidencethresholds);
  ::CoreML::Specification::FloatVector* unsafe_arena_release_recallconfidencethresholds();

  // @@protoc_insertion_point(class_scope:CoreML.Specification.PrecisionRecallCurve)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CoreML::Specification::FloatVector* precisionvalues_;
  ::CoreML::Specification::FloatVector* precisionconfidencethresholds_;
  ::CoreML::Specification::FloatVector* recallvalues_;
  ::CoreML::Specification::FloatVector* recallconfidencethresholds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataStructures_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StringToInt64Map

// map<string, int64> map = 1;
inline int StringToInt64Map::_internal_map_size() const {
  return map_.size();
}
inline int StringToInt64Map::map_size() const {
  return _internal_map_size();
}
inline void StringToInt64Map::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
StringToInt64Map::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
StringToInt64Map::map() const {
  // @@protoc_insertion_point(field_map:CoreML.Specification.StringToInt64Map.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
StringToInt64Map::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
StringToInt64Map::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:CoreML.Specification.StringToInt64Map.map)
  return _internal_mutable_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Int64ToStringMap

// map<int64, string> map = 1;
inline int Int64ToStringMap::_internal_map_size() const {
  return map_.size();
}
inline int Int64ToStringMap::map_size() const {
  return _internal_map_size();
}
inline void Int64ToStringMap::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >&
Int64ToStringMap::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >&
Int64ToStringMap::map() const {
  // @@protoc_insertion_point(field_map:CoreML.Specification.Int64ToStringMap.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >*
Int64ToStringMap::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >*
Int64ToStringMap::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:CoreML.Specification.Int64ToStringMap.map)
  return _internal_mutable_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StringToDoubleMap

// map<string, double> map = 1;
inline int StringToDoubleMap::_internal_map_size() const {
  return map_.size();
}
inline int StringToDoubleMap::map_size() const {
  return _internal_map_size();
}
inline void StringToDoubleMap::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
StringToDoubleMap::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
StringToDoubleMap::map() const {
  // @@protoc_insertion_point(field_map:CoreML.Specification.StringToDoubleMap.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
StringToDoubleMap::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
StringToDoubleMap::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:CoreML.Specification.StringToDoubleMap.map)
  return _internal_mutable_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Int64ToDoubleMap

// map<int64, double> map = 1;
inline int Int64ToDoubleMap::_internal_map_size() const {
  return map_.size();
}
inline int Int64ToDoubleMap::map_size() const {
  return _internal_map_size();
}
inline void Int64ToDoubleMap::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >&
Int64ToDoubleMap::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >&
Int64ToDoubleMap::map() const {
  // @@protoc_insertion_point(field_map:CoreML.Specification.Int64ToDoubleMap.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >*
Int64ToDoubleMap::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, double >*
Int64ToDoubleMap::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:CoreML.Specification.Int64ToDoubleMap.map)
  return _internal_mutable_map();
}

// -------------------------------------------------------------------

// StringVector

// repeated string vector = 1;
inline int StringVector::_internal_vector_size() const {
  return vector_.size();
}
inline int StringVector::vector_size() const {
  return _internal_vector_size();
}
inline void StringVector::clear_vector() {
  vector_.Clear();
}
inline std::string* StringVector::add_vector() {
  std::string* _s = _internal_add_vector();
  // @@protoc_insertion_point(field_add_mutable:CoreML.Specification.StringVector.vector)
  return _s;
}
inline const std::string& StringVector::_internal_vector(int index) const {
  return vector_.Get(index);
}
inline const std::string& StringVector::vector(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.StringVector.vector)
  return _internal_vector(index);
}
inline std::string* StringVector::mutable_vector(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.StringVector.vector)
  return vector_.Mutable(index);
}
inline void StringVector::set_vector(int index, const std::string& value) {
  vector_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.StringVector.vector)
}
inline void StringVector::set_vector(int index, std::string&& value) {
  vector_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CoreML.Specification.StringVector.vector)
}
inline void StringVector::set_vector(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vector_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.StringVector.vector)
}
inline void StringVector::set_vector(int index, const char* value, size_t size) {
  vector_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.StringVector.vector)
}
inline std::string* StringVector::_internal_add_vector() {
  return vector_.Add();
}
inline void StringVector::add_vector(const std::string& value) {
  vector_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.StringVector.vector)
}
inline void StringVector::add_vector(std::string&& value) {
  vector_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CoreML.Specification.StringVector.vector)
}
inline void StringVector::add_vector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vector_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CoreML.Specification.StringVector.vector)
}
inline void StringVector::add_vector(const char* value, size_t size) {
  vector_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CoreML.Specification.StringVector.vector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringVector::vector() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.StringVector.vector)
  return vector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringVector::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.StringVector.vector)
  return &vector_;
}

// -------------------------------------------------------------------

// Int64Vector

// repeated int64 vector = 1;
inline int Int64Vector::_internal_vector_size() const {
  return vector_.size();
}
inline int Int64Vector::vector_size() const {
  return _internal_vector_size();
}
inline void Int64Vector::clear_vector() {
  vector_.Clear();
}
inline int64_t Int64Vector::_internal_vector(int index) const {
  return vector_.Get(index);
}
inline int64_t Int64Vector::vector(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Int64Vector.vector)
  return _internal_vector(index);
}
inline void Int64Vector::set_vector(int index, int64_t value) {
  vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.Int64Vector.vector)
}
inline void Int64Vector::_internal_add_vector(int64_t value) {
  vector_.Add(value);
}
inline void Int64Vector::add_vector(int64_t value) {
  _internal_add_vector(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.Int64Vector.vector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Int64Vector::_internal_vector() const {
  return vector_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Int64Vector::vector() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.Int64Vector.vector)
  return _internal_vector();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Int64Vector::_internal_mutable_vector() {
  return &vector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Int64Vector::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.Int64Vector.vector)
  return _internal_mutable_vector();
}

// -------------------------------------------------------------------

// FloatVector

// repeated float vector = 1;
inline int FloatVector::_internal_vector_size() const {
  return vector_.size();
}
inline int FloatVector::vector_size() const {
  return _internal_vector_size();
}
inline void FloatVector::clear_vector() {
  vector_.Clear();
}
inline float FloatVector::_internal_vector(int index) const {
  return vector_.Get(index);
}
inline float FloatVector::vector(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.FloatVector.vector)
  return _internal_vector(index);
}
inline void FloatVector::set_vector(int index, float value) {
  vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.FloatVector.vector)
}
inline void FloatVector::_internal_add_vector(float value) {
  vector_.Add(value);
}
inline void FloatVector::add_vector(float value) {
  _internal_add_vector(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.FloatVector.vector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatVector::_internal_vector() const {
  return vector_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatVector::vector() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.FloatVector.vector)
  return _internal_vector();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatVector::_internal_mutable_vector() {
  return &vector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatVector::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.FloatVector.vector)
  return _internal_mutable_vector();
}

// -------------------------------------------------------------------

// DoubleVector

// repeated double vector = 1;
inline int DoubleVector::_internal_vector_size() const {
  return vector_.size();
}
inline int DoubleVector::vector_size() const {
  return _internal_vector_size();
}
inline void DoubleVector::clear_vector() {
  vector_.Clear();
}
inline double DoubleVector::_internal_vector(int index) const {
  return vector_.Get(index);
}
inline double DoubleVector::vector(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.DoubleVector.vector)
  return _internal_vector(index);
}
inline void DoubleVector::set_vector(int index, double value) {
  vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.DoubleVector.vector)
}
inline void DoubleVector::_internal_add_vector(double value) {
  vector_.Add(value);
}
inline void DoubleVector::add_vector(double value) {
  _internal_add_vector(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.DoubleVector.vector)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleVector::_internal_vector() const {
  return vector_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleVector::vector() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.DoubleVector.vector)
  return _internal_vector();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleVector::_internal_mutable_vector() {
  return &vector_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleVector::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.DoubleVector.vector)
  return _internal_mutable_vector();
}

// -------------------------------------------------------------------

// Int64Range

// int64 minValue = 1;
inline void Int64Range::clear_minvalue() {
  minvalue_ = int64_t{0};
}
inline int64_t Int64Range::_internal_minvalue() const {
  return minvalue_;
}
inline int64_t Int64Range::minvalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Int64Range.minValue)
  return _internal_minvalue();
}
inline void Int64Range::_internal_set_minvalue(int64_t value) {
  
  minvalue_ = value;
}
inline void Int64Range::set_minvalue(int64_t value) {
  _internal_set_minvalue(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.Int64Range.minValue)
}

// int64 maxValue = 2;
inline void Int64Range::clear_maxvalue() {
  maxvalue_ = int64_t{0};
}
inline int64_t Int64Range::_internal_maxvalue() const {
  return maxvalue_;
}
inline int64_t Int64Range::maxvalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Int64Range.maxValue)
  return _internal_maxvalue();
}
inline void Int64Range::_internal_set_maxvalue(int64_t value) {
  
  maxvalue_ = value;
}
inline void Int64Range::set_maxvalue(int64_t value) {
  _internal_set_maxvalue(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.Int64Range.maxValue)
}

// -------------------------------------------------------------------

// Int64Set

// repeated int64 values = 1;
inline int Int64Set::_internal_values_size() const {
  return values_.size();
}
inline int Int64Set::values_size() const {
  return _internal_values_size();
}
inline void Int64Set::clear_values() {
  values_.Clear();
}
inline int64_t Int64Set::_internal_values(int index) const {
  return values_.Get(index);
}
inline int64_t Int64Set::values(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Int64Set.values)
  return _internal_values(index);
}
inline void Int64Set::set_values(int index, int64_t value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.Int64Set.values)
}
inline void Int64Set::_internal_add_values(int64_t value) {
  values_.Add(value);
}
inline void Int64Set::add_values(int64_t value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.Int64Set.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Int64Set::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Int64Set::values() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.Int64Set.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Int64Set::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Int64Set::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.Int64Set.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// DoubleRange

// double minValue = 1;
inline void DoubleRange::clear_minvalue() {
  minvalue_ = 0;
}
inline double DoubleRange::_internal_minvalue() const {
  return minvalue_;
}
inline double DoubleRange::minvalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.DoubleRange.minValue)
  return _internal_minvalue();
}
inline void DoubleRange::_internal_set_minvalue(double value) {
  
  minvalue_ = value;
}
inline void DoubleRange::set_minvalue(double value) {
  _internal_set_minvalue(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.DoubleRange.minValue)
}

// double maxValue = 2;
inline void DoubleRange::clear_maxvalue() {
  maxvalue_ = 0;
}
inline double DoubleRange::_internal_maxvalue() const {
  return maxvalue_;
}
inline double DoubleRange::maxvalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.DoubleRange.maxValue)
  return _internal_maxvalue();
}
inline void DoubleRange::_internal_set_maxvalue(double value) {
  
  maxvalue_ = value;
}
inline void DoubleRange::set_maxvalue(double value) {
  _internal_set_maxvalue(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.DoubleRange.maxValue)
}

// -------------------------------------------------------------------

// PrecisionRecallCurve

// .CoreML.Specification.FloatVector precisionValues = 1;
inline bool PrecisionRecallCurve::_internal_has_precisionvalues() const {
  return this != internal_default_instance() && precisionvalues_ != nullptr;
}
inline bool PrecisionRecallCurve::has_precisionvalues() const {
  return _internal_has_precisionvalues();
}
inline void PrecisionRecallCurve::clear_precisionvalues() {
  if (GetArenaForAllocation() == nullptr && precisionvalues_ != nullptr) {
    delete precisionvalues_;
  }
  precisionvalues_ = nullptr;
}
inline const ::CoreML::Specification::FloatVector& PrecisionRecallCurve::_internal_precisionvalues() const {
  const ::CoreML::Specification::FloatVector* p = precisionvalues_;
  return p != nullptr ? *p : reinterpret_cast<const ::CoreML::Specification::FloatVector&>(
      ::CoreML::Specification::_FloatVector_default_instance_);
}
inline const ::CoreML::Specification::FloatVector& PrecisionRecallCurve::precisionvalues() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.PrecisionRecallCurve.precisionValues)
  return _internal_precisionvalues();
}
inline void PrecisionRecallCurve::unsafe_arena_set_allocated_precisionvalues(
    ::CoreML::Specification::FloatVector* precisionvalues) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(precisionvalues_);
  }
  precisionvalues_ = precisionvalues;
  if (precisionvalues) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.PrecisionRecallCurve.precisionValues)
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::release_precisionvalues() {
  
  ::CoreML::Specification::FloatVector* temp = precisionvalues_;
  precisionvalues_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::unsafe_arena_release_precisionvalues() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.PrecisionRecallCurve.precisionValues)
  
  ::CoreML::Specification::FloatVector* temp = precisionvalues_;
  precisionvalues_ = nullptr;
  return temp;
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::_internal_mutable_precisionvalues() {
  
  if (precisionvalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::CoreML::Specification::FloatVector>(GetArenaForAllocation());
    precisionvalues_ = p;
  }
  return precisionvalues_;
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::mutable_precisionvalues() {
  ::CoreML::Specification::FloatVector* _msg = _internal_mutable_precisionvalues();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.PrecisionRecallCurve.precisionValues)
  return _msg;
}
inline void PrecisionRecallCurve::set_allocated_precisionvalues(::CoreML::Specification::FloatVector* precisionvalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete precisionvalues_;
  }
  if (precisionvalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CoreML::Specification::FloatVector>::GetOwningArena(precisionvalues);
    if (message_arena != submessage_arena) {
      precisionvalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, precisionvalues, submessage_arena);
    }
    
  } else {
    
  }
  precisionvalues_ = precisionvalues;
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.PrecisionRecallCurve.precisionValues)
}

// .CoreML.Specification.FloatVector precisionConfidenceThresholds = 2;
inline bool PrecisionRecallCurve::_internal_has_precisionconfidencethresholds() const {
  return this != internal_default_instance() && precisionconfidencethresholds_ != nullptr;
}
inline bool PrecisionRecallCurve::has_precisionconfidencethresholds() const {
  return _internal_has_precisionconfidencethresholds();
}
inline void PrecisionRecallCurve::clear_precisionconfidencethresholds() {
  if (GetArenaForAllocation() == nullptr && precisionconfidencethresholds_ != nullptr) {
    delete precisionconfidencethresholds_;
  }
  precisionconfidencethresholds_ = nullptr;
}
inline const ::CoreML::Specification::FloatVector& PrecisionRecallCurve::_internal_precisionconfidencethresholds() const {
  const ::CoreML::Specification::FloatVector* p = precisionconfidencethresholds_;
  return p != nullptr ? *p : reinterpret_cast<const ::CoreML::Specification::FloatVector&>(
      ::CoreML::Specification::_FloatVector_default_instance_);
}
inline const ::CoreML::Specification::FloatVector& PrecisionRecallCurve::precisionconfidencethresholds() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.PrecisionRecallCurve.precisionConfidenceThresholds)
  return _internal_precisionconfidencethresholds();
}
inline void PrecisionRecallCurve::unsafe_arena_set_allocated_precisionconfidencethresholds(
    ::CoreML::Specification::FloatVector* precisionconfidencethresholds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(precisionconfidencethresholds_);
  }
  precisionconfidencethresholds_ = precisionconfidencethresholds;
  if (precisionconfidencethresholds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.PrecisionRecallCurve.precisionConfidenceThresholds)
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::release_precisionconfidencethresholds() {
  
  ::CoreML::Specification::FloatVector* temp = precisionconfidencethresholds_;
  precisionconfidencethresholds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::unsafe_arena_release_precisionconfidencethresholds() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.PrecisionRecallCurve.precisionConfidenceThresholds)
  
  ::CoreML::Specification::FloatVector* temp = precisionconfidencethresholds_;
  precisionconfidencethresholds_ = nullptr;
  return temp;
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::_internal_mutable_precisionconfidencethresholds() {
  
  if (precisionconfidencethresholds_ == nullptr) {
    auto* p = CreateMaybeMessage<::CoreML::Specification::FloatVector>(GetArenaForAllocation());
    precisionconfidencethresholds_ = p;
  }
  return precisionconfidencethresholds_;
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::mutable_precisionconfidencethresholds() {
  ::CoreML::Specification::FloatVector* _msg = _internal_mutable_precisionconfidencethresholds();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.PrecisionRecallCurve.precisionConfidenceThresholds)
  return _msg;
}
inline void PrecisionRecallCurve::set_allocated_precisionconfidencethresholds(::CoreML::Specification::FloatVector* precisionconfidencethresholds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete precisionconfidencethresholds_;
  }
  if (precisionconfidencethresholds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CoreML::Specification::FloatVector>::GetOwningArena(precisionconfidencethresholds);
    if (message_arena != submessage_arena) {
      precisionconfidencethresholds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, precisionconfidencethresholds, submessage_arena);
    }
    
  } else {
    
  }
  precisionconfidencethresholds_ = precisionconfidencethresholds;
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.PrecisionRecallCurve.precisionConfidenceThresholds)
}

// .CoreML.Specification.FloatVector recallValues = 3;
inline bool PrecisionRecallCurve::_internal_has_recallvalues() const {
  return this != internal_default_instance() && recallvalues_ != nullptr;
}
inline bool PrecisionRecallCurve::has_recallvalues() const {
  return _internal_has_recallvalues();
}
inline void PrecisionRecallCurve::clear_recallvalues() {
  if (GetArenaForAllocation() == nullptr && recallvalues_ != nullptr) {
    delete recallvalues_;
  }
  recallvalues_ = nullptr;
}
inline const ::CoreML::Specification::FloatVector& PrecisionRecallCurve::_internal_recallvalues() const {
  const ::CoreML::Specification::FloatVector* p = recallvalues_;
  return p != nullptr ? *p : reinterpret_cast<const ::CoreML::Specification::FloatVector&>(
      ::CoreML::Specification::_FloatVector_default_instance_);
}
inline const ::CoreML::Specification::FloatVector& PrecisionRecallCurve::recallvalues() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.PrecisionRecallCurve.recallValues)
  return _internal_recallvalues();
}
inline void PrecisionRecallCurve::unsafe_arena_set_allocated_recallvalues(
    ::CoreML::Specification::FloatVector* recallvalues) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recallvalues_);
  }
  recallvalues_ = recallvalues;
  if (recallvalues) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.PrecisionRecallCurve.recallValues)
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::release_recallvalues() {
  
  ::CoreML::Specification::FloatVector* temp = recallvalues_;
  recallvalues_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::unsafe_arena_release_recallvalues() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.PrecisionRecallCurve.recallValues)
  
  ::CoreML::Specification::FloatVector* temp = recallvalues_;
  recallvalues_ = nullptr;
  return temp;
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::_internal_mutable_recallvalues() {
  
  if (recallvalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::CoreML::Specification::FloatVector>(GetArenaForAllocation());
    recallvalues_ = p;
  }
  return recallvalues_;
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::mutable_recallvalues() {
  ::CoreML::Specification::FloatVector* _msg = _internal_mutable_recallvalues();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.PrecisionRecallCurve.recallValues)
  return _msg;
}
inline void PrecisionRecallCurve::set_allocated_recallvalues(::CoreML::Specification::FloatVector* recallvalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete recallvalues_;
  }
  if (recallvalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CoreML::Specification::FloatVector>::GetOwningArena(recallvalues);
    if (message_arena != submessage_arena) {
      recallvalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recallvalues, submessage_arena);
    }
    
  } else {
    
  }
  recallvalues_ = recallvalues;
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.PrecisionRecallCurve.recallValues)
}

// .CoreML.Specification.FloatVector recallConfidenceThresholds = 4;
inline bool PrecisionRecallCurve::_internal_has_recallconfidencethresholds() const {
  return this != internal_default_instance() && recallconfidencethresholds_ != nullptr;
}
inline bool PrecisionRecallCurve::has_recallconfidencethresholds() const {
  return _internal_has_recallconfidencethresholds();
}
inline void PrecisionRecallCurve::clear_recallconfidencethresholds() {
  if (GetArenaForAllocation() == nullptr && recallconfidencethresholds_ != nullptr) {
    delete recallconfidencethresholds_;
  }
  recallconfidencethresholds_ = nullptr;
}
inline const ::CoreML::Specification::FloatVector& PrecisionRecallCurve::_internal_recallconfidencethresholds() const {
  const ::CoreML::Specification::FloatVector* p = recallconfidencethresholds_;
  return p != nullptr ? *p : reinterpret_cast<const ::CoreML::Specification::FloatVector&>(
      ::CoreML::Specification::_FloatVector_default_instance_);
}
inline const ::CoreML::Specification::FloatVector& PrecisionRecallCurve::recallconfidencethresholds() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.PrecisionRecallCurve.recallConfidenceThresholds)
  return _internal_recallconfidencethresholds();
}
inline void PrecisionRecallCurve::unsafe_arena_set_allocated_recallconfidencethresholds(
    ::CoreML::Specification::FloatVector* recallconfidencethresholds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recallconfidencethresholds_);
  }
  recallconfidencethresholds_ = recallconfidencethresholds;
  if (recallconfidencethresholds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.PrecisionRecallCurve.recallConfidenceThresholds)
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::release_recallconfidencethresholds() {
  
  ::CoreML::Specification::FloatVector* temp = recallconfidencethresholds_;
  recallconfidencethresholds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::unsafe_arena_release_recallconfidencethresholds() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.PrecisionRecallCurve.recallConfidenceThresholds)
  
  ::CoreML::Specification::FloatVector* temp = recallconfidencethresholds_;
  recallconfidencethresholds_ = nullptr;
  return temp;
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::_internal_mutable_recallconfidencethresholds() {
  
  if (recallconfidencethresholds_ == nullptr) {
    auto* p = CreateMaybeMessage<::CoreML::Specification::FloatVector>(GetArenaForAllocation());
    recallconfidencethresholds_ = p;
  }
  return recallconfidencethresholds_;
}
inline ::CoreML::Specification::FloatVector* PrecisionRecallCurve::mutable_recallconfidencethresholds() {
  ::CoreML::Specification::FloatVector* _msg = _internal_mutable_recallconfidencethresholds();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.PrecisionRecallCurve.recallConfidenceThresholds)
  return _msg;
}
inline void PrecisionRecallCurve::set_allocated_recallconfidencethresholds(::CoreML::Specification::FloatVector* recallconfidencethresholds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete recallconfidencethresholds_;
  }
  if (recallconfidencethresholds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CoreML::Specification::FloatVector>::GetOwningArena(recallconfidencethresholds);
    if (message_arena != submessage_arena) {
      recallconfidencethresholds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recallconfidencethresholds, submessage_arena);
    }
    
  } else {
    
  }
  recallconfidencethresholds_ = recallconfidencethresholds;
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.PrecisionRecallCurve.recallConfidenceThresholds)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DataStructures_2eproto
