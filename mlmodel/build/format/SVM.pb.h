// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SVM.proto

#ifndef PROTOBUF_SVM_2eproto__INCLUDED
#define PROTOBUF_SVM_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "DataStructures.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace CoreML {
namespace Specification {
class ArrayFeatureType;
class ArrayFeatureTypeDefaultTypeInternal;
extern ArrayFeatureTypeDefaultTypeInternal _ArrayFeatureType_default_instance_;
class ArrayFeatureType_EnumeratedShapes;
class ArrayFeatureType_EnumeratedShapesDefaultTypeInternal;
extern ArrayFeatureType_EnumeratedShapesDefaultTypeInternal _ArrayFeatureType_EnumeratedShapes_default_instance_;
class ArrayFeatureType_Shape;
class ArrayFeatureType_ShapeDefaultTypeInternal;
extern ArrayFeatureType_ShapeDefaultTypeInternal _ArrayFeatureType_Shape_default_instance_;
class ArrayFeatureType_ShapeRange;
class ArrayFeatureType_ShapeRangeDefaultTypeInternal;
extern ArrayFeatureType_ShapeRangeDefaultTypeInternal _ArrayFeatureType_ShapeRange_default_instance_;
class Coefficients;
class CoefficientsDefaultTypeInternal;
extern CoefficientsDefaultTypeInternal _Coefficients_default_instance_;
class DenseSupportVectors;
class DenseSupportVectorsDefaultTypeInternal;
extern DenseSupportVectorsDefaultTypeInternal _DenseSupportVectors_default_instance_;
class DenseVector;
class DenseVectorDefaultTypeInternal;
extern DenseVectorDefaultTypeInternal _DenseVector_default_instance_;
class DictionaryFeatureType;
class DictionaryFeatureTypeDefaultTypeInternal;
extern DictionaryFeatureTypeDefaultTypeInternal _DictionaryFeatureType_default_instance_;
class DoubleFeatureType;
class DoubleFeatureTypeDefaultTypeInternal;
extern DoubleFeatureTypeDefaultTypeInternal _DoubleFeatureType_default_instance_;
class DoubleVector;
class DoubleVectorDefaultTypeInternal;
extern DoubleVectorDefaultTypeInternal _DoubleVector_default_instance_;
class FeatureType;
class FeatureTypeDefaultTypeInternal;
extern FeatureTypeDefaultTypeInternal _FeatureType_default_instance_;
class ImageFeatureType;
class ImageFeatureTypeDefaultTypeInternal;
extern ImageFeatureTypeDefaultTypeInternal _ImageFeatureType_default_instance_;
class ImageFeatureType_EnumeratedImageSizes;
class ImageFeatureType_EnumeratedImageSizesDefaultTypeInternal;
extern ImageFeatureType_EnumeratedImageSizesDefaultTypeInternal _ImageFeatureType_EnumeratedImageSizes_default_instance_;
class ImageFeatureType_ImageSize;
class ImageFeatureType_ImageSizeDefaultTypeInternal;
extern ImageFeatureType_ImageSizeDefaultTypeInternal _ImageFeatureType_ImageSize_default_instance_;
class ImageFeatureType_ImageSizeRange;
class ImageFeatureType_ImageSizeRangeDefaultTypeInternal;
extern ImageFeatureType_ImageSizeRangeDefaultTypeInternal _ImageFeatureType_ImageSizeRange_default_instance_;
class Int64FeatureType;
class Int64FeatureTypeDefaultTypeInternal;
extern Int64FeatureTypeDefaultTypeInternal _Int64FeatureType_default_instance_;
class Int64ToDoubleMap;
class Int64ToDoubleMapDefaultTypeInternal;
extern Int64ToDoubleMapDefaultTypeInternal _Int64ToDoubleMap_default_instance_;
class Int64ToDoubleMap_MapEntry;
class Int64ToDoubleMap_MapEntryDefaultTypeInternal;
extern Int64ToDoubleMap_MapEntryDefaultTypeInternal _Int64ToDoubleMap_MapEntry_default_instance_;
class Int64ToStringMap;
class Int64ToStringMapDefaultTypeInternal;
extern Int64ToStringMapDefaultTypeInternal _Int64ToStringMap_default_instance_;
class Int64ToStringMap_MapEntry;
class Int64ToStringMap_MapEntryDefaultTypeInternal;
extern Int64ToStringMap_MapEntryDefaultTypeInternal _Int64ToStringMap_MapEntry_default_instance_;
class Int64Vector;
class Int64VectorDefaultTypeInternal;
extern Int64VectorDefaultTypeInternal _Int64Vector_default_instance_;
class Kernel;
class KernelDefaultTypeInternal;
extern KernelDefaultTypeInternal _Kernel_default_instance_;
class LinearKernel;
class LinearKernelDefaultTypeInternal;
extern LinearKernelDefaultTypeInternal _LinearKernel_default_instance_;
class PolyKernel;
class PolyKernelDefaultTypeInternal;
extern PolyKernelDefaultTypeInternal _PolyKernel_default_instance_;
class RBFKernel;
class RBFKernelDefaultTypeInternal;
extern RBFKernelDefaultTypeInternal _RBFKernel_default_instance_;
class SequenceFeatureType;
class SequenceFeatureTypeDefaultTypeInternal;
extern SequenceFeatureTypeDefaultTypeInternal _SequenceFeatureType_default_instance_;
class SigmoidKernel;
class SigmoidKernelDefaultTypeInternal;
extern SigmoidKernelDefaultTypeInternal _SigmoidKernel_default_instance_;
class SizeRange;
class SizeRangeDefaultTypeInternal;
extern SizeRangeDefaultTypeInternal _SizeRange_default_instance_;
class SparseNode;
class SparseNodeDefaultTypeInternal;
extern SparseNodeDefaultTypeInternal _SparseNode_default_instance_;
class SparseSupportVectors;
class SparseSupportVectorsDefaultTypeInternal;
extern SparseSupportVectorsDefaultTypeInternal _SparseSupportVectors_default_instance_;
class SparseVector;
class SparseVectorDefaultTypeInternal;
extern SparseVectorDefaultTypeInternal _SparseVector_default_instance_;
class StringFeatureType;
class StringFeatureTypeDefaultTypeInternal;
extern StringFeatureTypeDefaultTypeInternal _StringFeatureType_default_instance_;
class StringToDoubleMap;
class StringToDoubleMapDefaultTypeInternal;
extern StringToDoubleMapDefaultTypeInternal _StringToDoubleMap_default_instance_;
class StringToDoubleMap_MapEntry;
class StringToDoubleMap_MapEntryDefaultTypeInternal;
extern StringToDoubleMap_MapEntryDefaultTypeInternal _StringToDoubleMap_MapEntry_default_instance_;
class StringToInt64Map;
class StringToInt64MapDefaultTypeInternal;
extern StringToInt64MapDefaultTypeInternal _StringToInt64Map_default_instance_;
class StringToInt64Map_MapEntry;
class StringToInt64Map_MapEntryDefaultTypeInternal;
extern StringToInt64Map_MapEntryDefaultTypeInternal _StringToInt64Map_MapEntry_default_instance_;
class StringVector;
class StringVectorDefaultTypeInternal;
extern StringVectorDefaultTypeInternal _StringVector_default_instance_;
class SupportVectorClassifier;
class SupportVectorClassifierDefaultTypeInternal;
extern SupportVectorClassifierDefaultTypeInternal _SupportVectorClassifier_default_instance_;
class SupportVectorRegressor;
class SupportVectorRegressorDefaultTypeInternal;
extern SupportVectorRegressorDefaultTypeInternal _SupportVectorRegressor_default_instance_;
}  // namespace Specification
}  // namespace CoreML

namespace CoreML {
namespace Specification {

namespace protobuf_SVM_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_SVM_2eproto

// ===================================================================

class LinearKernel : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.LinearKernel) */ {
 public:
  LinearKernel();
  virtual ~LinearKernel();

  LinearKernel(const LinearKernel& from);

  inline LinearKernel& operator=(const LinearKernel& from) {
    CopyFrom(from);
    return *this;
  }

  static const LinearKernel& default_instance();

  static inline const LinearKernel* internal_default_instance() {
    return reinterpret_cast<const LinearKernel*>(
               &_LinearKernel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LinearKernel* other);

  // implements Message ----------------------------------------------

  inline LinearKernel* New() const PROTOBUF_FINAL { return New(NULL); }

  LinearKernel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LinearKernel& from);
  void MergeFrom(const LinearKernel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LinearKernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CoreML.Specification.LinearKernel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_SVM_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RBFKernel : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.RBFKernel) */ {
 public:
  RBFKernel();
  virtual ~RBFKernel();

  RBFKernel(const RBFKernel& from);

  inline RBFKernel& operator=(const RBFKernel& from) {
    CopyFrom(from);
    return *this;
  }

  static const RBFKernel& default_instance();

  static inline const RBFKernel* internal_default_instance() {
    return reinterpret_cast<const RBFKernel*>(
               &_RBFKernel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RBFKernel* other);

  // implements Message ----------------------------------------------

  inline RBFKernel* New() const PROTOBUF_FINAL { return New(NULL); }

  RBFKernel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RBFKernel& from);
  void MergeFrom(const RBFKernel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RBFKernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double gamma = 1;
  void clear_gamma();
  static const int kGammaFieldNumber = 1;
  double gamma() const;
  void set_gamma(double value);

  // @@protoc_insertion_point(class_scope:CoreML.Specification.RBFKernel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double gamma_;
  mutable int _cached_size_;
  friend struct protobuf_SVM_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PolyKernel : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.PolyKernel) */ {
 public:
  PolyKernel();
  virtual ~PolyKernel();

  PolyKernel(const PolyKernel& from);

  inline PolyKernel& operator=(const PolyKernel& from) {
    CopyFrom(from);
    return *this;
  }

  static const PolyKernel& default_instance();

  static inline const PolyKernel* internal_default_instance() {
    return reinterpret_cast<const PolyKernel*>(
               &_PolyKernel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PolyKernel* other);

  // implements Message ----------------------------------------------

  inline PolyKernel* New() const PROTOBUF_FINAL { return New(NULL); }

  PolyKernel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PolyKernel& from);
  void MergeFrom(const PolyKernel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PolyKernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double c = 2;
  void clear_c();
  static const int kCFieldNumber = 2;
  double c() const;
  void set_c(double value);

  // double gamma = 3;
  void clear_gamma();
  static const int kGammaFieldNumber = 3;
  double gamma() const;
  void set_gamma(double value);

  // int32 degree = 1;
  void clear_degree();
  static const int kDegreeFieldNumber = 1;
  ::google::protobuf::int32 degree() const;
  void set_degree(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CoreML.Specification.PolyKernel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double c_;
  double gamma_;
  ::google::protobuf::int32 degree_;
  mutable int _cached_size_;
  friend struct protobuf_SVM_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SigmoidKernel : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.SigmoidKernel) */ {
 public:
  SigmoidKernel();
  virtual ~SigmoidKernel();

  SigmoidKernel(const SigmoidKernel& from);

  inline SigmoidKernel& operator=(const SigmoidKernel& from) {
    CopyFrom(from);
    return *this;
  }

  static const SigmoidKernel& default_instance();

  static inline const SigmoidKernel* internal_default_instance() {
    return reinterpret_cast<const SigmoidKernel*>(
               &_SigmoidKernel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SigmoidKernel* other);

  // implements Message ----------------------------------------------

  inline SigmoidKernel* New() const PROTOBUF_FINAL { return New(NULL); }

  SigmoidKernel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SigmoidKernel& from);
  void MergeFrom(const SigmoidKernel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SigmoidKernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double gamma = 1;
  void clear_gamma();
  static const int kGammaFieldNumber = 1;
  double gamma() const;
  void set_gamma(double value);

  // double c = 2;
  void clear_c();
  static const int kCFieldNumber = 2;
  double c() const;
  void set_c(double value);

  // @@protoc_insertion_point(class_scope:CoreML.Specification.SigmoidKernel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double gamma_;
  double c_;
  mutable int _cached_size_;
  friend struct protobuf_SVM_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Kernel : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.Kernel) */ {
 public:
  Kernel();
  virtual ~Kernel();

  Kernel(const Kernel& from);

  inline Kernel& operator=(const Kernel& from) {
    CopyFrom(from);
    return *this;
  }

  static const Kernel& default_instance();

  enum KernelCase {
    kLinearKernel = 1,
    kRbfKernel = 2,
    kPolyKernel = 3,
    kSigmoidKernel = 4,
    KERNEL_NOT_SET = 0,
  };

  static inline const Kernel* internal_default_instance() {
    return reinterpret_cast<const Kernel*>(
               &_Kernel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Kernel* other);

  // implements Message ----------------------------------------------

  inline Kernel* New() const PROTOBUF_FINAL { return New(NULL); }

  Kernel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Kernel& from);
  void MergeFrom(const Kernel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Kernel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CoreML.Specification.LinearKernel linearKernel = 1;
  bool has_linearkernel() const;
  void clear_linearkernel();
  static const int kLinearKernelFieldNumber = 1;
  const ::CoreML::Specification::LinearKernel& linearkernel() const;
  ::CoreML::Specification::LinearKernel* mutable_linearkernel();
  ::CoreML::Specification::LinearKernel* release_linearkernel();
  void set_allocated_linearkernel(::CoreML::Specification::LinearKernel* linearkernel);

  // .CoreML.Specification.RBFKernel rbfKernel = 2;
  bool has_rbfkernel() const;
  void clear_rbfkernel();
  static const int kRbfKernelFieldNumber = 2;
  const ::CoreML::Specification::RBFKernel& rbfkernel() const;
  ::CoreML::Specification::RBFKernel* mutable_rbfkernel();
  ::CoreML::Specification::RBFKernel* release_rbfkernel();
  void set_allocated_rbfkernel(::CoreML::Specification::RBFKernel* rbfkernel);

  // .CoreML.Specification.PolyKernel polyKernel = 3;
  bool has_polykernel() const;
  void clear_polykernel();
  static const int kPolyKernelFieldNumber = 3;
  const ::CoreML::Specification::PolyKernel& polykernel() const;
  ::CoreML::Specification::PolyKernel* mutable_polykernel();
  ::CoreML::Specification::PolyKernel* release_polykernel();
  void set_allocated_polykernel(::CoreML::Specification::PolyKernel* polykernel);

  // .CoreML.Specification.SigmoidKernel sigmoidKernel = 4;
  bool has_sigmoidkernel() const;
  void clear_sigmoidkernel();
  static const int kSigmoidKernelFieldNumber = 4;
  const ::CoreML::Specification::SigmoidKernel& sigmoidkernel() const;
  ::CoreML::Specification::SigmoidKernel* mutable_sigmoidkernel();
  ::CoreML::Specification::SigmoidKernel* release_sigmoidkernel();
  void set_allocated_sigmoidkernel(::CoreML::Specification::SigmoidKernel* sigmoidkernel);

  KernelCase kernel_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.Kernel)
 private:
  void set_has_linearkernel();
  void set_has_rbfkernel();
  void set_has_polykernel();
  void set_has_sigmoidkernel();

  inline bool has_kernel() const;
  void clear_kernel();
  inline void clear_has_kernel();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  union KernelUnion {
    KernelUnion() {}
    ::CoreML::Specification::LinearKernel* linearkernel_;
    ::CoreML::Specification::RBFKernel* rbfkernel_;
    ::CoreML::Specification::PolyKernel* polykernel_;
    ::CoreML::Specification::SigmoidKernel* sigmoidkernel_;
  } kernel_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_SVM_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SparseNode : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.SparseNode) */ {
 public:
  SparseNode();
  virtual ~SparseNode();

  SparseNode(const SparseNode& from);

  inline SparseNode& operator=(const SparseNode& from) {
    CopyFrom(from);
    return *this;
  }

  static const SparseNode& default_instance();

  static inline const SparseNode* internal_default_instance() {
    return reinterpret_cast<const SparseNode*>(
               &_SparseNode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SparseNode* other);

  // implements Message ----------------------------------------------

  inline SparseNode* New() const PROTOBUF_FINAL { return New(NULL); }

  SparseNode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SparseNode& from);
  void MergeFrom(const SparseNode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SparseNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  double value() const;
  void set_value(double value);

  // int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CoreML.Specification.SparseNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double value_;
  ::google::protobuf::int32 index_;
  mutable int _cached_size_;
  friend struct protobuf_SVM_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SparseVector : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.SparseVector) */ {
 public:
  SparseVector();
  virtual ~SparseVector();

  SparseVector(const SparseVector& from);

  inline SparseVector& operator=(const SparseVector& from) {
    CopyFrom(from);
    return *this;
  }

  static const SparseVector& default_instance();

  static inline const SparseVector* internal_default_instance() {
    return reinterpret_cast<const SparseVector*>(
               &_SparseVector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SparseVector* other);

  // implements Message ----------------------------------------------

  inline SparseVector* New() const PROTOBUF_FINAL { return New(NULL); }

  SparseVector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SparseVector& from);
  void MergeFrom(const SparseVector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SparseVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CoreML.Specification.SparseNode nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  const ::CoreML::Specification::SparseNode& nodes(int index) const;
  ::CoreML::Specification::SparseNode* mutable_nodes(int index);
  ::CoreML::Specification::SparseNode* add_nodes();
  ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::SparseNode >*
      mutable_nodes();
  const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::SparseNode >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:CoreML.Specification.SparseVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::SparseNode > nodes_;
  mutable int _cached_size_;
  friend struct protobuf_SVM_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SparseSupportVectors : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.SparseSupportVectors) */ {
 public:
  SparseSupportVectors();
  virtual ~SparseSupportVectors();

  SparseSupportVectors(const SparseSupportVectors& from);

  inline SparseSupportVectors& operator=(const SparseSupportVectors& from) {
    CopyFrom(from);
    return *this;
  }

  static const SparseSupportVectors& default_instance();

  static inline const SparseSupportVectors* internal_default_instance() {
    return reinterpret_cast<const SparseSupportVectors*>(
               &_SparseSupportVectors_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SparseSupportVectors* other);

  // implements Message ----------------------------------------------

  inline SparseSupportVectors* New() const PROTOBUF_FINAL { return New(NULL); }

  SparseSupportVectors* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SparseSupportVectors& from);
  void MergeFrom(const SparseSupportVectors& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SparseSupportVectors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CoreML.Specification.SparseVector vectors = 1;
  int vectors_size() const;
  void clear_vectors();
  static const int kVectorsFieldNumber = 1;
  const ::CoreML::Specification::SparseVector& vectors(int index) const;
  ::CoreML::Specification::SparseVector* mutable_vectors(int index);
  ::CoreML::Specification::SparseVector* add_vectors();
  ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::SparseVector >*
      mutable_vectors();
  const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::SparseVector >&
      vectors() const;

  // @@protoc_insertion_point(class_scope:CoreML.Specification.SparseSupportVectors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::SparseVector > vectors_;
  mutable int _cached_size_;
  friend struct protobuf_SVM_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DenseVector : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.DenseVector) */ {
 public:
  DenseVector();
  virtual ~DenseVector();

  DenseVector(const DenseVector& from);

  inline DenseVector& operator=(const DenseVector& from) {
    CopyFrom(from);
    return *this;
  }

  static const DenseVector& default_instance();

  static inline const DenseVector* internal_default_instance() {
    return reinterpret_cast<const DenseVector*>(
               &_DenseVector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(DenseVector* other);

  // implements Message ----------------------------------------------

  inline DenseVector* New() const PROTOBUF_FINAL { return New(NULL); }

  DenseVector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DenseVector& from);
  void MergeFrom(const DenseVector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DenseVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::google::protobuf::RepeatedField< double >&
      values() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:CoreML.Specification.DenseVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< double > values_;
  mutable int _values_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_SVM_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DenseSupportVectors : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.DenseSupportVectors) */ {
 public:
  DenseSupportVectors();
  virtual ~DenseSupportVectors();

  DenseSupportVectors(const DenseSupportVectors& from);

  inline DenseSupportVectors& operator=(const DenseSupportVectors& from) {
    CopyFrom(from);
    return *this;
  }

  static const DenseSupportVectors& default_instance();

  static inline const DenseSupportVectors* internal_default_instance() {
    return reinterpret_cast<const DenseSupportVectors*>(
               &_DenseSupportVectors_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DenseSupportVectors* other);

  // implements Message ----------------------------------------------

  inline DenseSupportVectors* New() const PROTOBUF_FINAL { return New(NULL); }

  DenseSupportVectors* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DenseSupportVectors& from);
  void MergeFrom(const DenseSupportVectors& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DenseSupportVectors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CoreML.Specification.DenseVector vectors = 1;
  int vectors_size() const;
  void clear_vectors();
  static const int kVectorsFieldNumber = 1;
  const ::CoreML::Specification::DenseVector& vectors(int index) const;
  ::CoreML::Specification::DenseVector* mutable_vectors(int index);
  ::CoreML::Specification::DenseVector* add_vectors();
  ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::DenseVector >*
      mutable_vectors();
  const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::DenseVector >&
      vectors() const;

  // @@protoc_insertion_point(class_scope:CoreML.Specification.DenseSupportVectors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::DenseVector > vectors_;
  mutable int _cached_size_;
  friend struct protobuf_SVM_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Coefficients : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.Coefficients) */ {
 public:
  Coefficients();
  virtual ~Coefficients();

  Coefficients(const Coefficients& from);

  inline Coefficients& operator=(const Coefficients& from) {
    CopyFrom(from);
    return *this;
  }

  static const Coefficients& default_instance();

  static inline const Coefficients* internal_default_instance() {
    return reinterpret_cast<const Coefficients*>(
               &_Coefficients_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Coefficients* other);

  // implements Message ----------------------------------------------

  inline Coefficients* New() const PROTOBUF_FINAL { return New(NULL); }

  Coefficients* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Coefficients& from);
  void MergeFrom(const Coefficients& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Coefficients* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double alpha = 1;
  int alpha_size() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 1;
  double alpha(int index) const;
  void set_alpha(int index, double value);
  void add_alpha(double value);
  const ::google::protobuf::RepeatedField< double >&
      alpha() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_alpha();

  // @@protoc_insertion_point(class_scope:CoreML.Specification.Coefficients)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< double > alpha_;
  mutable int _alpha_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_SVM_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SupportVectorRegressor : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.SupportVectorRegressor) */ {
 public:
  SupportVectorRegressor();
  virtual ~SupportVectorRegressor();

  SupportVectorRegressor(const SupportVectorRegressor& from);

  inline SupportVectorRegressor& operator=(const SupportVectorRegressor& from) {
    CopyFrom(from);
    return *this;
  }

  static const SupportVectorRegressor& default_instance();

  enum SupportVectorsCase {
    kSparseSupportVectors = 2,
    kDenseSupportVectors = 3,
    SUPPORTVECTORS_NOT_SET = 0,
  };

  static inline const SupportVectorRegressor* internal_default_instance() {
    return reinterpret_cast<const SupportVectorRegressor*>(
               &_SupportVectorRegressor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(SupportVectorRegressor* other);

  // implements Message ----------------------------------------------

  inline SupportVectorRegressor* New() const PROTOBUF_FINAL { return New(NULL); }

  SupportVectorRegressor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SupportVectorRegressor& from);
  void MergeFrom(const SupportVectorRegressor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SupportVectorRegressor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CoreML.Specification.Kernel kernel = 1;
  bool has_kernel() const;
  void clear_kernel();
  static const int kKernelFieldNumber = 1;
  const ::CoreML::Specification::Kernel& kernel() const;
  ::CoreML::Specification::Kernel* mutable_kernel();
  ::CoreML::Specification::Kernel* release_kernel();
  void set_allocated_kernel(::CoreML::Specification::Kernel* kernel);

  // .CoreML.Specification.Coefficients coefficients = 4;
  bool has_coefficients() const;
  void clear_coefficients();
  static const int kCoefficientsFieldNumber = 4;
  const ::CoreML::Specification::Coefficients& coefficients() const;
  ::CoreML::Specification::Coefficients* mutable_coefficients();
  ::CoreML::Specification::Coefficients* release_coefficients();
  void set_allocated_coefficients(::CoreML::Specification::Coefficients* coefficients);

  // double rho = 5;
  void clear_rho();
  static const int kRhoFieldNumber = 5;
  double rho() const;
  void set_rho(double value);

  // .CoreML.Specification.SparseSupportVectors sparseSupportVectors = 2;
  bool has_sparsesupportvectors() const;
  void clear_sparsesupportvectors();
  static const int kSparseSupportVectorsFieldNumber = 2;
  const ::CoreML::Specification::SparseSupportVectors& sparsesupportvectors() const;
  ::CoreML::Specification::SparseSupportVectors* mutable_sparsesupportvectors();
  ::CoreML::Specification::SparseSupportVectors* release_sparsesupportvectors();
  void set_allocated_sparsesupportvectors(::CoreML::Specification::SparseSupportVectors* sparsesupportvectors);

  // .CoreML.Specification.DenseSupportVectors denseSupportVectors = 3;
  bool has_densesupportvectors() const;
  void clear_densesupportvectors();
  static const int kDenseSupportVectorsFieldNumber = 3;
  const ::CoreML::Specification::DenseSupportVectors& densesupportvectors() const;
  ::CoreML::Specification::DenseSupportVectors* mutable_densesupportvectors();
  ::CoreML::Specification::DenseSupportVectors* release_densesupportvectors();
  void set_allocated_densesupportvectors(::CoreML::Specification::DenseSupportVectors* densesupportvectors);

  SupportVectorsCase supportVectors_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.SupportVectorRegressor)
 private:
  void set_has_sparsesupportvectors();
  void set_has_densesupportvectors();

  inline bool has_supportVectors() const;
  void clear_supportVectors();
  inline void clear_has_supportVectors();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::CoreML::Specification::Kernel* kernel_;
  ::CoreML::Specification::Coefficients* coefficients_;
  double rho_;
  union SupportVectorsUnion {
    SupportVectorsUnion() {}
    ::CoreML::Specification::SparseSupportVectors* sparsesupportvectors_;
    ::CoreML::Specification::DenseSupportVectors* densesupportvectors_;
  } supportVectors_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_SVM_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SupportVectorClassifier : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.SupportVectorClassifier) */ {
 public:
  SupportVectorClassifier();
  virtual ~SupportVectorClassifier();

  SupportVectorClassifier(const SupportVectorClassifier& from);

  inline SupportVectorClassifier& operator=(const SupportVectorClassifier& from) {
    CopyFrom(from);
    return *this;
  }

  static const SupportVectorClassifier& default_instance();

  enum SupportVectorsCase {
    kSparseSupportVectors = 3,
    kDenseSupportVectors = 4,
    SUPPORTVECTORS_NOT_SET = 0,
  };

  enum ClassLabelsCase {
    kStringClassLabels = 100,
    kInt64ClassLabels = 101,
    CLASSLABELS_NOT_SET = 0,
  };

  static inline const SupportVectorClassifier* internal_default_instance() {
    return reinterpret_cast<const SupportVectorClassifier*>(
               &_SupportVectorClassifier_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(SupportVectorClassifier* other);

  // implements Message ----------------------------------------------

  inline SupportVectorClassifier* New() const PROTOBUF_FINAL { return New(NULL); }

  SupportVectorClassifier* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SupportVectorClassifier& from);
  void MergeFrom(const SupportVectorClassifier& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SupportVectorClassifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 numberOfSupportVectorsPerClass = 2;
  int numberofsupportvectorsperclass_size() const;
  void clear_numberofsupportvectorsperclass();
  static const int kNumberOfSupportVectorsPerClassFieldNumber = 2;
  ::google::protobuf::int32 numberofsupportvectorsperclass(int index) const;
  void set_numberofsupportvectorsperclass(int index, ::google::protobuf::int32 value);
  void add_numberofsupportvectorsperclass(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      numberofsupportvectorsperclass() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_numberofsupportvectorsperclass();

  // repeated .CoreML.Specification.Coefficients coefficients = 5;
  int coefficients_size() const;
  void clear_coefficients();
  static const int kCoefficientsFieldNumber = 5;
  const ::CoreML::Specification::Coefficients& coefficients(int index) const;
  ::CoreML::Specification::Coefficients* mutable_coefficients(int index);
  ::CoreML::Specification::Coefficients* add_coefficients();
  ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::Coefficients >*
      mutable_coefficients();
  const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::Coefficients >&
      coefficients() const;

  // repeated double rho = 6;
  int rho_size() const;
  void clear_rho();
  static const int kRhoFieldNumber = 6;
  double rho(int index) const;
  void set_rho(int index, double value);
  void add_rho(double value);
  const ::google::protobuf::RepeatedField< double >&
      rho() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_rho();

  // repeated double probA = 7;
  int proba_size() const;
  void clear_proba();
  static const int kProbAFieldNumber = 7;
  double proba(int index) const;
  void set_proba(int index, double value);
  void add_proba(double value);
  const ::google::protobuf::RepeatedField< double >&
      proba() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_proba();

  // repeated double probB = 8;
  int probb_size() const;
  void clear_probb();
  static const int kProbBFieldNumber = 8;
  double probb(int index) const;
  void set_probb(int index, double value);
  void add_probb(double value);
  const ::google::protobuf::RepeatedField< double >&
      probb() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_probb();

  // .CoreML.Specification.Kernel kernel = 1;
  bool has_kernel() const;
  void clear_kernel();
  static const int kKernelFieldNumber = 1;
  const ::CoreML::Specification::Kernel& kernel() const;
  ::CoreML::Specification::Kernel* mutable_kernel();
  ::CoreML::Specification::Kernel* release_kernel();
  void set_allocated_kernel(::CoreML::Specification::Kernel* kernel);

  // .CoreML.Specification.SparseSupportVectors sparseSupportVectors = 3;
  bool has_sparsesupportvectors() const;
  void clear_sparsesupportvectors();
  static const int kSparseSupportVectorsFieldNumber = 3;
  const ::CoreML::Specification::SparseSupportVectors& sparsesupportvectors() const;
  ::CoreML::Specification::SparseSupportVectors* mutable_sparsesupportvectors();
  ::CoreML::Specification::SparseSupportVectors* release_sparsesupportvectors();
  void set_allocated_sparsesupportvectors(::CoreML::Specification::SparseSupportVectors* sparsesupportvectors);

  // .CoreML.Specification.DenseSupportVectors denseSupportVectors = 4;
  bool has_densesupportvectors() const;
  void clear_densesupportvectors();
  static const int kDenseSupportVectorsFieldNumber = 4;
  const ::CoreML::Specification::DenseSupportVectors& densesupportvectors() const;
  ::CoreML::Specification::DenseSupportVectors* mutable_densesupportvectors();
  ::CoreML::Specification::DenseSupportVectors* release_densesupportvectors();
  void set_allocated_densesupportvectors(::CoreML::Specification::DenseSupportVectors* densesupportvectors);

  // .CoreML.Specification.StringVector stringClassLabels = 100;
  bool has_stringclasslabels() const;
  void clear_stringclasslabels();
  static const int kStringClassLabelsFieldNumber = 100;
  const ::CoreML::Specification::StringVector& stringclasslabels() const;
  ::CoreML::Specification::StringVector* mutable_stringclasslabels();
  ::CoreML::Specification::StringVector* release_stringclasslabels();
  void set_allocated_stringclasslabels(::CoreML::Specification::StringVector* stringclasslabels);

  // .CoreML.Specification.Int64Vector int64ClassLabels = 101;
  bool has_int64classlabels() const;
  void clear_int64classlabels();
  static const int kInt64ClassLabelsFieldNumber = 101;
  const ::CoreML::Specification::Int64Vector& int64classlabels() const;
  ::CoreML::Specification::Int64Vector* mutable_int64classlabels();
  ::CoreML::Specification::Int64Vector* release_int64classlabels();
  void set_allocated_int64classlabels(::CoreML::Specification::Int64Vector* int64classlabels);

  SupportVectorsCase supportVectors_case() const;
  ClassLabelsCase ClassLabels_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.SupportVectorClassifier)
 private:
  void set_has_sparsesupportvectors();
  void set_has_densesupportvectors();
  void set_has_stringclasslabels();
  void set_has_int64classlabels();

  inline bool has_supportVectors() const;
  void clear_supportVectors();
  inline void clear_has_supportVectors();

  inline bool has_ClassLabels() const;
  void clear_ClassLabels();
  inline void clear_has_ClassLabels();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > numberofsupportvectorsperclass_;
  mutable int _numberofsupportvectorsperclass_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::Coefficients > coefficients_;
  ::google::protobuf::RepeatedField< double > rho_;
  mutable int _rho_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > proba_;
  mutable int _proba_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > probb_;
  mutable int _probb_cached_byte_size_;
  ::CoreML::Specification::Kernel* kernel_;
  union SupportVectorsUnion {
    SupportVectorsUnion() {}
    ::CoreML::Specification::SparseSupportVectors* sparsesupportvectors_;
    ::CoreML::Specification::DenseSupportVectors* densesupportvectors_;
  } supportVectors_;
  union ClassLabelsUnion {
    ClassLabelsUnion() {}
    ::CoreML::Specification::StringVector* stringclasslabels_;
    ::CoreML::Specification::Int64Vector* int64classlabels_;
  } ClassLabels_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct protobuf_SVM_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LinearKernel

// -------------------------------------------------------------------

// RBFKernel

// double gamma = 1;
inline void RBFKernel::clear_gamma() {
  gamma_ = 0;
}
inline double RBFKernel::gamma() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.RBFKernel.gamma)
  return gamma_;
}
inline void RBFKernel::set_gamma(double value) {
  
  gamma_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.RBFKernel.gamma)
}

// -------------------------------------------------------------------

// PolyKernel

// int32 degree = 1;
inline void PolyKernel::clear_degree() {
  degree_ = 0;
}
inline ::google::protobuf::int32 PolyKernel::degree() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.PolyKernel.degree)
  return degree_;
}
inline void PolyKernel::set_degree(::google::protobuf::int32 value) {
  
  degree_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.PolyKernel.degree)
}

// double c = 2;
inline void PolyKernel::clear_c() {
  c_ = 0;
}
inline double PolyKernel::c() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.PolyKernel.c)
  return c_;
}
inline void PolyKernel::set_c(double value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.PolyKernel.c)
}

// double gamma = 3;
inline void PolyKernel::clear_gamma() {
  gamma_ = 0;
}
inline double PolyKernel::gamma() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.PolyKernel.gamma)
  return gamma_;
}
inline void PolyKernel::set_gamma(double value) {
  
  gamma_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.PolyKernel.gamma)
}

// -------------------------------------------------------------------

// SigmoidKernel

// double gamma = 1;
inline void SigmoidKernel::clear_gamma() {
  gamma_ = 0;
}
inline double SigmoidKernel::gamma() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SigmoidKernel.gamma)
  return gamma_;
}
inline void SigmoidKernel::set_gamma(double value) {
  
  gamma_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.SigmoidKernel.gamma)
}

// double c = 2;
inline void SigmoidKernel::clear_c() {
  c_ = 0;
}
inline double SigmoidKernel::c() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SigmoidKernel.c)
  return c_;
}
inline void SigmoidKernel::set_c(double value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.SigmoidKernel.c)
}

// -------------------------------------------------------------------

// Kernel

// .CoreML.Specification.LinearKernel linearKernel = 1;
inline bool Kernel::has_linearkernel() const {
  return kernel_case() == kLinearKernel;
}
inline void Kernel::set_has_linearkernel() {
  _oneof_case_[0] = kLinearKernel;
}
inline void Kernel::clear_linearkernel() {
  if (has_linearkernel()) {
    delete kernel_.linearkernel_;
    clear_has_kernel();
  }
}
inline  const ::CoreML::Specification::LinearKernel& Kernel::linearkernel() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Kernel.linearKernel)
  return has_linearkernel()
      ? *kernel_.linearkernel_
      : ::CoreML::Specification::LinearKernel::default_instance();
}
inline ::CoreML::Specification::LinearKernel* Kernel::mutable_linearkernel() {
  if (!has_linearkernel()) {
    clear_kernel();
    set_has_linearkernel();
    kernel_.linearkernel_ = new ::CoreML::Specification::LinearKernel;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Kernel.linearKernel)
  return kernel_.linearkernel_;
}
inline ::CoreML::Specification::LinearKernel* Kernel::release_linearkernel() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Kernel.linearKernel)
  if (has_linearkernel()) {
    clear_has_kernel();
    ::CoreML::Specification::LinearKernel* temp = kernel_.linearkernel_;
    kernel_.linearkernel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Kernel::set_allocated_linearkernel(::CoreML::Specification::LinearKernel* linearkernel) {
  clear_kernel();
  if (linearkernel) {
    set_has_linearkernel();
    kernel_.linearkernel_ = linearkernel;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Kernel.linearKernel)
}

// .CoreML.Specification.RBFKernel rbfKernel = 2;
inline bool Kernel::has_rbfkernel() const {
  return kernel_case() == kRbfKernel;
}
inline void Kernel::set_has_rbfkernel() {
  _oneof_case_[0] = kRbfKernel;
}
inline void Kernel::clear_rbfkernel() {
  if (has_rbfkernel()) {
    delete kernel_.rbfkernel_;
    clear_has_kernel();
  }
}
inline  const ::CoreML::Specification::RBFKernel& Kernel::rbfkernel() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Kernel.rbfKernel)
  return has_rbfkernel()
      ? *kernel_.rbfkernel_
      : ::CoreML::Specification::RBFKernel::default_instance();
}
inline ::CoreML::Specification::RBFKernel* Kernel::mutable_rbfkernel() {
  if (!has_rbfkernel()) {
    clear_kernel();
    set_has_rbfkernel();
    kernel_.rbfkernel_ = new ::CoreML::Specification::RBFKernel;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Kernel.rbfKernel)
  return kernel_.rbfkernel_;
}
inline ::CoreML::Specification::RBFKernel* Kernel::release_rbfkernel() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Kernel.rbfKernel)
  if (has_rbfkernel()) {
    clear_has_kernel();
    ::CoreML::Specification::RBFKernel* temp = kernel_.rbfkernel_;
    kernel_.rbfkernel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Kernel::set_allocated_rbfkernel(::CoreML::Specification::RBFKernel* rbfkernel) {
  clear_kernel();
  if (rbfkernel) {
    set_has_rbfkernel();
    kernel_.rbfkernel_ = rbfkernel;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Kernel.rbfKernel)
}

// .CoreML.Specification.PolyKernel polyKernel = 3;
inline bool Kernel::has_polykernel() const {
  return kernel_case() == kPolyKernel;
}
inline void Kernel::set_has_polykernel() {
  _oneof_case_[0] = kPolyKernel;
}
inline void Kernel::clear_polykernel() {
  if (has_polykernel()) {
    delete kernel_.polykernel_;
    clear_has_kernel();
  }
}
inline  const ::CoreML::Specification::PolyKernel& Kernel::polykernel() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Kernel.polyKernel)
  return has_polykernel()
      ? *kernel_.polykernel_
      : ::CoreML::Specification::PolyKernel::default_instance();
}
inline ::CoreML::Specification::PolyKernel* Kernel::mutable_polykernel() {
  if (!has_polykernel()) {
    clear_kernel();
    set_has_polykernel();
    kernel_.polykernel_ = new ::CoreML::Specification::PolyKernel;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Kernel.polyKernel)
  return kernel_.polykernel_;
}
inline ::CoreML::Specification::PolyKernel* Kernel::release_polykernel() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Kernel.polyKernel)
  if (has_polykernel()) {
    clear_has_kernel();
    ::CoreML::Specification::PolyKernel* temp = kernel_.polykernel_;
    kernel_.polykernel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Kernel::set_allocated_polykernel(::CoreML::Specification::PolyKernel* polykernel) {
  clear_kernel();
  if (polykernel) {
    set_has_polykernel();
    kernel_.polykernel_ = polykernel;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Kernel.polyKernel)
}

// .CoreML.Specification.SigmoidKernel sigmoidKernel = 4;
inline bool Kernel::has_sigmoidkernel() const {
  return kernel_case() == kSigmoidKernel;
}
inline void Kernel::set_has_sigmoidkernel() {
  _oneof_case_[0] = kSigmoidKernel;
}
inline void Kernel::clear_sigmoidkernel() {
  if (has_sigmoidkernel()) {
    delete kernel_.sigmoidkernel_;
    clear_has_kernel();
  }
}
inline  const ::CoreML::Specification::SigmoidKernel& Kernel::sigmoidkernel() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Kernel.sigmoidKernel)
  return has_sigmoidkernel()
      ? *kernel_.sigmoidkernel_
      : ::CoreML::Specification::SigmoidKernel::default_instance();
}
inline ::CoreML::Specification::SigmoidKernel* Kernel::mutable_sigmoidkernel() {
  if (!has_sigmoidkernel()) {
    clear_kernel();
    set_has_sigmoidkernel();
    kernel_.sigmoidkernel_ = new ::CoreML::Specification::SigmoidKernel;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Kernel.sigmoidKernel)
  return kernel_.sigmoidkernel_;
}
inline ::CoreML::Specification::SigmoidKernel* Kernel::release_sigmoidkernel() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Kernel.sigmoidKernel)
  if (has_sigmoidkernel()) {
    clear_has_kernel();
    ::CoreML::Specification::SigmoidKernel* temp = kernel_.sigmoidkernel_;
    kernel_.sigmoidkernel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Kernel::set_allocated_sigmoidkernel(::CoreML::Specification::SigmoidKernel* sigmoidkernel) {
  clear_kernel();
  if (sigmoidkernel) {
    set_has_sigmoidkernel();
    kernel_.sigmoidkernel_ = sigmoidkernel;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Kernel.sigmoidKernel)
}

inline bool Kernel::has_kernel() const {
  return kernel_case() != KERNEL_NOT_SET;
}
inline void Kernel::clear_has_kernel() {
  _oneof_case_[0] = KERNEL_NOT_SET;
}
inline Kernel::KernelCase Kernel::kernel_case() const {
  return Kernel::KernelCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SparseNode

// int32 index = 1;
inline void SparseNode::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 SparseNode::index() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SparseNode.index)
  return index_;
}
inline void SparseNode::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.SparseNode.index)
}

// double value = 2;
inline void SparseNode::clear_value() {
  value_ = 0;
}
inline double SparseNode::value() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SparseNode.value)
  return value_;
}
inline void SparseNode::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.SparseNode.value)
}

// -------------------------------------------------------------------

// SparseVector

// repeated .CoreML.Specification.SparseNode nodes = 1;
inline int SparseVector::nodes_size() const {
  return nodes_.size();
}
inline void SparseVector::clear_nodes() {
  nodes_.Clear();
}
inline const ::CoreML::Specification::SparseNode& SparseVector::nodes(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SparseVector.nodes)
  return nodes_.Get(index);
}
inline ::CoreML::Specification::SparseNode* SparseVector::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.SparseVector.nodes)
  return nodes_.Mutable(index);
}
inline ::CoreML::Specification::SparseNode* SparseVector::add_nodes() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.SparseVector.nodes)
  return nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::SparseNode >*
SparseVector::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.SparseVector.nodes)
  return &nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::SparseNode >&
SparseVector::nodes() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.SparseVector.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// SparseSupportVectors

// repeated .CoreML.Specification.SparseVector vectors = 1;
inline int SparseSupportVectors::vectors_size() const {
  return vectors_.size();
}
inline void SparseSupportVectors::clear_vectors() {
  vectors_.Clear();
}
inline const ::CoreML::Specification::SparseVector& SparseSupportVectors::vectors(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SparseSupportVectors.vectors)
  return vectors_.Get(index);
}
inline ::CoreML::Specification::SparseVector* SparseSupportVectors::mutable_vectors(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.SparseSupportVectors.vectors)
  return vectors_.Mutable(index);
}
inline ::CoreML::Specification::SparseVector* SparseSupportVectors::add_vectors() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.SparseSupportVectors.vectors)
  return vectors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::SparseVector >*
SparseSupportVectors::mutable_vectors() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.SparseSupportVectors.vectors)
  return &vectors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::SparseVector >&
SparseSupportVectors::vectors() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.SparseSupportVectors.vectors)
  return vectors_;
}

// -------------------------------------------------------------------

// DenseVector

// repeated double values = 1;
inline int DenseVector::values_size() const {
  return values_.size();
}
inline void DenseVector::clear_values() {
  values_.Clear();
}
inline double DenseVector::values(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.DenseVector.values)
  return values_.Get(index);
}
inline void DenseVector::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.DenseVector.values)
}
inline void DenseVector::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.DenseVector.values)
}
inline const ::google::protobuf::RepeatedField< double >&
DenseVector::values() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.DenseVector.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< double >*
DenseVector::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.DenseVector.values)
  return &values_;
}

// -------------------------------------------------------------------

// DenseSupportVectors

// repeated .CoreML.Specification.DenseVector vectors = 1;
inline int DenseSupportVectors::vectors_size() const {
  return vectors_.size();
}
inline void DenseSupportVectors::clear_vectors() {
  vectors_.Clear();
}
inline const ::CoreML::Specification::DenseVector& DenseSupportVectors::vectors(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.DenseSupportVectors.vectors)
  return vectors_.Get(index);
}
inline ::CoreML::Specification::DenseVector* DenseSupportVectors::mutable_vectors(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.DenseSupportVectors.vectors)
  return vectors_.Mutable(index);
}
inline ::CoreML::Specification::DenseVector* DenseSupportVectors::add_vectors() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.DenseSupportVectors.vectors)
  return vectors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::DenseVector >*
DenseSupportVectors::mutable_vectors() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.DenseSupportVectors.vectors)
  return &vectors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::DenseVector >&
DenseSupportVectors::vectors() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.DenseSupportVectors.vectors)
  return vectors_;
}

// -------------------------------------------------------------------

// Coefficients

// repeated double alpha = 1;
inline int Coefficients::alpha_size() const {
  return alpha_.size();
}
inline void Coefficients::clear_alpha() {
  alpha_.Clear();
}
inline double Coefficients::alpha(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Coefficients.alpha)
  return alpha_.Get(index);
}
inline void Coefficients::set_alpha(int index, double value) {
  alpha_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.Coefficients.alpha)
}
inline void Coefficients::add_alpha(double value) {
  alpha_.Add(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.Coefficients.alpha)
}
inline const ::google::protobuf::RepeatedField< double >&
Coefficients::alpha() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.Coefficients.alpha)
  return alpha_;
}
inline ::google::protobuf::RepeatedField< double >*
Coefficients::mutable_alpha() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.Coefficients.alpha)
  return &alpha_;
}

// -------------------------------------------------------------------

// SupportVectorRegressor

// .CoreML.Specification.Kernel kernel = 1;
inline bool SupportVectorRegressor::has_kernel() const {
  return this != internal_default_instance() && kernel_ != NULL;
}
inline void SupportVectorRegressor::clear_kernel() {
  if (GetArenaNoVirtual() == NULL && kernel_ != NULL) delete kernel_;
  kernel_ = NULL;
}
inline const ::CoreML::Specification::Kernel& SupportVectorRegressor::kernel() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SupportVectorRegressor.kernel)
  return kernel_ != NULL ? *kernel_
                         : *::CoreML::Specification::Kernel::internal_default_instance();
}
inline ::CoreML::Specification::Kernel* SupportVectorRegressor::mutable_kernel() {
  
  if (kernel_ == NULL) {
    kernel_ = new ::CoreML::Specification::Kernel;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.SupportVectorRegressor.kernel)
  return kernel_;
}
inline ::CoreML::Specification::Kernel* SupportVectorRegressor::release_kernel() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.SupportVectorRegressor.kernel)
  
  ::CoreML::Specification::Kernel* temp = kernel_;
  kernel_ = NULL;
  return temp;
}
inline void SupportVectorRegressor::set_allocated_kernel(::CoreML::Specification::Kernel* kernel) {
  delete kernel_;
  kernel_ = kernel;
  if (kernel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.SupportVectorRegressor.kernel)
}

// .CoreML.Specification.SparseSupportVectors sparseSupportVectors = 2;
inline bool SupportVectorRegressor::has_sparsesupportvectors() const {
  return supportVectors_case() == kSparseSupportVectors;
}
inline void SupportVectorRegressor::set_has_sparsesupportvectors() {
  _oneof_case_[0] = kSparseSupportVectors;
}
inline void SupportVectorRegressor::clear_sparsesupportvectors() {
  if (has_sparsesupportvectors()) {
    delete supportVectors_.sparsesupportvectors_;
    clear_has_supportVectors();
  }
}
inline  const ::CoreML::Specification::SparseSupportVectors& SupportVectorRegressor::sparsesupportvectors() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SupportVectorRegressor.sparseSupportVectors)
  return has_sparsesupportvectors()
      ? *supportVectors_.sparsesupportvectors_
      : ::CoreML::Specification::SparseSupportVectors::default_instance();
}
inline ::CoreML::Specification::SparseSupportVectors* SupportVectorRegressor::mutable_sparsesupportvectors() {
  if (!has_sparsesupportvectors()) {
    clear_supportVectors();
    set_has_sparsesupportvectors();
    supportVectors_.sparsesupportvectors_ = new ::CoreML::Specification::SparseSupportVectors;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.SupportVectorRegressor.sparseSupportVectors)
  return supportVectors_.sparsesupportvectors_;
}
inline ::CoreML::Specification::SparseSupportVectors* SupportVectorRegressor::release_sparsesupportvectors() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.SupportVectorRegressor.sparseSupportVectors)
  if (has_sparsesupportvectors()) {
    clear_has_supportVectors();
    ::CoreML::Specification::SparseSupportVectors* temp = supportVectors_.sparsesupportvectors_;
    supportVectors_.sparsesupportvectors_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SupportVectorRegressor::set_allocated_sparsesupportvectors(::CoreML::Specification::SparseSupportVectors* sparsesupportvectors) {
  clear_supportVectors();
  if (sparsesupportvectors) {
    set_has_sparsesupportvectors();
    supportVectors_.sparsesupportvectors_ = sparsesupportvectors;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.SupportVectorRegressor.sparseSupportVectors)
}

// .CoreML.Specification.DenseSupportVectors denseSupportVectors = 3;
inline bool SupportVectorRegressor::has_densesupportvectors() const {
  return supportVectors_case() == kDenseSupportVectors;
}
inline void SupportVectorRegressor::set_has_densesupportvectors() {
  _oneof_case_[0] = kDenseSupportVectors;
}
inline void SupportVectorRegressor::clear_densesupportvectors() {
  if (has_densesupportvectors()) {
    delete supportVectors_.densesupportvectors_;
    clear_has_supportVectors();
  }
}
inline  const ::CoreML::Specification::DenseSupportVectors& SupportVectorRegressor::densesupportvectors() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SupportVectorRegressor.denseSupportVectors)
  return has_densesupportvectors()
      ? *supportVectors_.densesupportvectors_
      : ::CoreML::Specification::DenseSupportVectors::default_instance();
}
inline ::CoreML::Specification::DenseSupportVectors* SupportVectorRegressor::mutable_densesupportvectors() {
  if (!has_densesupportvectors()) {
    clear_supportVectors();
    set_has_densesupportvectors();
    supportVectors_.densesupportvectors_ = new ::CoreML::Specification::DenseSupportVectors;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.SupportVectorRegressor.denseSupportVectors)
  return supportVectors_.densesupportvectors_;
}
inline ::CoreML::Specification::DenseSupportVectors* SupportVectorRegressor::release_densesupportvectors() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.SupportVectorRegressor.denseSupportVectors)
  if (has_densesupportvectors()) {
    clear_has_supportVectors();
    ::CoreML::Specification::DenseSupportVectors* temp = supportVectors_.densesupportvectors_;
    supportVectors_.densesupportvectors_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SupportVectorRegressor::set_allocated_densesupportvectors(::CoreML::Specification::DenseSupportVectors* densesupportvectors) {
  clear_supportVectors();
  if (densesupportvectors) {
    set_has_densesupportvectors();
    supportVectors_.densesupportvectors_ = densesupportvectors;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.SupportVectorRegressor.denseSupportVectors)
}

// .CoreML.Specification.Coefficients coefficients = 4;
inline bool SupportVectorRegressor::has_coefficients() const {
  return this != internal_default_instance() && coefficients_ != NULL;
}
inline void SupportVectorRegressor::clear_coefficients() {
  if (GetArenaNoVirtual() == NULL && coefficients_ != NULL) delete coefficients_;
  coefficients_ = NULL;
}
inline const ::CoreML::Specification::Coefficients& SupportVectorRegressor::coefficients() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SupportVectorRegressor.coefficients)
  return coefficients_ != NULL ? *coefficients_
                         : *::CoreML::Specification::Coefficients::internal_default_instance();
}
inline ::CoreML::Specification::Coefficients* SupportVectorRegressor::mutable_coefficients() {
  
  if (coefficients_ == NULL) {
    coefficients_ = new ::CoreML::Specification::Coefficients;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.SupportVectorRegressor.coefficients)
  return coefficients_;
}
inline ::CoreML::Specification::Coefficients* SupportVectorRegressor::release_coefficients() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.SupportVectorRegressor.coefficients)
  
  ::CoreML::Specification::Coefficients* temp = coefficients_;
  coefficients_ = NULL;
  return temp;
}
inline void SupportVectorRegressor::set_allocated_coefficients(::CoreML::Specification::Coefficients* coefficients) {
  delete coefficients_;
  coefficients_ = coefficients;
  if (coefficients) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.SupportVectorRegressor.coefficients)
}

// double rho = 5;
inline void SupportVectorRegressor::clear_rho() {
  rho_ = 0;
}
inline double SupportVectorRegressor::rho() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SupportVectorRegressor.rho)
  return rho_;
}
inline void SupportVectorRegressor::set_rho(double value) {
  
  rho_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.SupportVectorRegressor.rho)
}

inline bool SupportVectorRegressor::has_supportVectors() const {
  return supportVectors_case() != SUPPORTVECTORS_NOT_SET;
}
inline void SupportVectorRegressor::clear_has_supportVectors() {
  _oneof_case_[0] = SUPPORTVECTORS_NOT_SET;
}
inline SupportVectorRegressor::SupportVectorsCase SupportVectorRegressor::supportVectors_case() const {
  return SupportVectorRegressor::SupportVectorsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SupportVectorClassifier

// .CoreML.Specification.Kernel kernel = 1;
inline bool SupportVectorClassifier::has_kernel() const {
  return this != internal_default_instance() && kernel_ != NULL;
}
inline void SupportVectorClassifier::clear_kernel() {
  if (GetArenaNoVirtual() == NULL && kernel_ != NULL) delete kernel_;
  kernel_ = NULL;
}
inline const ::CoreML::Specification::Kernel& SupportVectorClassifier::kernel() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SupportVectorClassifier.kernel)
  return kernel_ != NULL ? *kernel_
                         : *::CoreML::Specification::Kernel::internal_default_instance();
}
inline ::CoreML::Specification::Kernel* SupportVectorClassifier::mutable_kernel() {
  
  if (kernel_ == NULL) {
    kernel_ = new ::CoreML::Specification::Kernel;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.SupportVectorClassifier.kernel)
  return kernel_;
}
inline ::CoreML::Specification::Kernel* SupportVectorClassifier::release_kernel() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.SupportVectorClassifier.kernel)
  
  ::CoreML::Specification::Kernel* temp = kernel_;
  kernel_ = NULL;
  return temp;
}
inline void SupportVectorClassifier::set_allocated_kernel(::CoreML::Specification::Kernel* kernel) {
  delete kernel_;
  kernel_ = kernel;
  if (kernel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.SupportVectorClassifier.kernel)
}

// repeated int32 numberOfSupportVectorsPerClass = 2;
inline int SupportVectorClassifier::numberofsupportvectorsperclass_size() const {
  return numberofsupportvectorsperclass_.size();
}
inline void SupportVectorClassifier::clear_numberofsupportvectorsperclass() {
  numberofsupportvectorsperclass_.Clear();
}
inline ::google::protobuf::int32 SupportVectorClassifier::numberofsupportvectorsperclass(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SupportVectorClassifier.numberOfSupportVectorsPerClass)
  return numberofsupportvectorsperclass_.Get(index);
}
inline void SupportVectorClassifier::set_numberofsupportvectorsperclass(int index, ::google::protobuf::int32 value) {
  numberofsupportvectorsperclass_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.SupportVectorClassifier.numberOfSupportVectorsPerClass)
}
inline void SupportVectorClassifier::add_numberofsupportvectorsperclass(::google::protobuf::int32 value) {
  numberofsupportvectorsperclass_.Add(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.SupportVectorClassifier.numberOfSupportVectorsPerClass)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SupportVectorClassifier::numberofsupportvectorsperclass() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.SupportVectorClassifier.numberOfSupportVectorsPerClass)
  return numberofsupportvectorsperclass_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SupportVectorClassifier::mutable_numberofsupportvectorsperclass() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.SupportVectorClassifier.numberOfSupportVectorsPerClass)
  return &numberofsupportvectorsperclass_;
}

// .CoreML.Specification.SparseSupportVectors sparseSupportVectors = 3;
inline bool SupportVectorClassifier::has_sparsesupportvectors() const {
  return supportVectors_case() == kSparseSupportVectors;
}
inline void SupportVectorClassifier::set_has_sparsesupportvectors() {
  _oneof_case_[0] = kSparseSupportVectors;
}
inline void SupportVectorClassifier::clear_sparsesupportvectors() {
  if (has_sparsesupportvectors()) {
    delete supportVectors_.sparsesupportvectors_;
    clear_has_supportVectors();
  }
}
inline  const ::CoreML::Specification::SparseSupportVectors& SupportVectorClassifier::sparsesupportvectors() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SupportVectorClassifier.sparseSupportVectors)
  return has_sparsesupportvectors()
      ? *supportVectors_.sparsesupportvectors_
      : ::CoreML::Specification::SparseSupportVectors::default_instance();
}
inline ::CoreML::Specification::SparseSupportVectors* SupportVectorClassifier::mutable_sparsesupportvectors() {
  if (!has_sparsesupportvectors()) {
    clear_supportVectors();
    set_has_sparsesupportvectors();
    supportVectors_.sparsesupportvectors_ = new ::CoreML::Specification::SparseSupportVectors;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.SupportVectorClassifier.sparseSupportVectors)
  return supportVectors_.sparsesupportvectors_;
}
inline ::CoreML::Specification::SparseSupportVectors* SupportVectorClassifier::release_sparsesupportvectors() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.SupportVectorClassifier.sparseSupportVectors)
  if (has_sparsesupportvectors()) {
    clear_has_supportVectors();
    ::CoreML::Specification::SparseSupportVectors* temp = supportVectors_.sparsesupportvectors_;
    supportVectors_.sparsesupportvectors_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SupportVectorClassifier::set_allocated_sparsesupportvectors(::CoreML::Specification::SparseSupportVectors* sparsesupportvectors) {
  clear_supportVectors();
  if (sparsesupportvectors) {
    set_has_sparsesupportvectors();
    supportVectors_.sparsesupportvectors_ = sparsesupportvectors;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.SupportVectorClassifier.sparseSupportVectors)
}

// .CoreML.Specification.DenseSupportVectors denseSupportVectors = 4;
inline bool SupportVectorClassifier::has_densesupportvectors() const {
  return supportVectors_case() == kDenseSupportVectors;
}
inline void SupportVectorClassifier::set_has_densesupportvectors() {
  _oneof_case_[0] = kDenseSupportVectors;
}
inline void SupportVectorClassifier::clear_densesupportvectors() {
  if (has_densesupportvectors()) {
    delete supportVectors_.densesupportvectors_;
    clear_has_supportVectors();
  }
}
inline  const ::CoreML::Specification::DenseSupportVectors& SupportVectorClassifier::densesupportvectors() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SupportVectorClassifier.denseSupportVectors)
  return has_densesupportvectors()
      ? *supportVectors_.densesupportvectors_
      : ::CoreML::Specification::DenseSupportVectors::default_instance();
}
inline ::CoreML::Specification::DenseSupportVectors* SupportVectorClassifier::mutable_densesupportvectors() {
  if (!has_densesupportvectors()) {
    clear_supportVectors();
    set_has_densesupportvectors();
    supportVectors_.densesupportvectors_ = new ::CoreML::Specification::DenseSupportVectors;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.SupportVectorClassifier.denseSupportVectors)
  return supportVectors_.densesupportvectors_;
}
inline ::CoreML::Specification::DenseSupportVectors* SupportVectorClassifier::release_densesupportvectors() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.SupportVectorClassifier.denseSupportVectors)
  if (has_densesupportvectors()) {
    clear_has_supportVectors();
    ::CoreML::Specification::DenseSupportVectors* temp = supportVectors_.densesupportvectors_;
    supportVectors_.densesupportvectors_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SupportVectorClassifier::set_allocated_densesupportvectors(::CoreML::Specification::DenseSupportVectors* densesupportvectors) {
  clear_supportVectors();
  if (densesupportvectors) {
    set_has_densesupportvectors();
    supportVectors_.densesupportvectors_ = densesupportvectors;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.SupportVectorClassifier.denseSupportVectors)
}

// repeated .CoreML.Specification.Coefficients coefficients = 5;
inline int SupportVectorClassifier::coefficients_size() const {
  return coefficients_.size();
}
inline void SupportVectorClassifier::clear_coefficients() {
  coefficients_.Clear();
}
inline const ::CoreML::Specification::Coefficients& SupportVectorClassifier::coefficients(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SupportVectorClassifier.coefficients)
  return coefficients_.Get(index);
}
inline ::CoreML::Specification::Coefficients* SupportVectorClassifier::mutable_coefficients(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.SupportVectorClassifier.coefficients)
  return coefficients_.Mutable(index);
}
inline ::CoreML::Specification::Coefficients* SupportVectorClassifier::add_coefficients() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.SupportVectorClassifier.coefficients)
  return coefficients_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::Coefficients >*
SupportVectorClassifier::mutable_coefficients() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.SupportVectorClassifier.coefficients)
  return &coefficients_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::Coefficients >&
SupportVectorClassifier::coefficients() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.SupportVectorClassifier.coefficients)
  return coefficients_;
}

// repeated double rho = 6;
inline int SupportVectorClassifier::rho_size() const {
  return rho_.size();
}
inline void SupportVectorClassifier::clear_rho() {
  rho_.Clear();
}
inline double SupportVectorClassifier::rho(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SupportVectorClassifier.rho)
  return rho_.Get(index);
}
inline void SupportVectorClassifier::set_rho(int index, double value) {
  rho_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.SupportVectorClassifier.rho)
}
inline void SupportVectorClassifier::add_rho(double value) {
  rho_.Add(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.SupportVectorClassifier.rho)
}
inline const ::google::protobuf::RepeatedField< double >&
SupportVectorClassifier::rho() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.SupportVectorClassifier.rho)
  return rho_;
}
inline ::google::protobuf::RepeatedField< double >*
SupportVectorClassifier::mutable_rho() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.SupportVectorClassifier.rho)
  return &rho_;
}

// repeated double probA = 7;
inline int SupportVectorClassifier::proba_size() const {
  return proba_.size();
}
inline void SupportVectorClassifier::clear_proba() {
  proba_.Clear();
}
inline double SupportVectorClassifier::proba(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SupportVectorClassifier.probA)
  return proba_.Get(index);
}
inline void SupportVectorClassifier::set_proba(int index, double value) {
  proba_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.SupportVectorClassifier.probA)
}
inline void SupportVectorClassifier::add_proba(double value) {
  proba_.Add(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.SupportVectorClassifier.probA)
}
inline const ::google::protobuf::RepeatedField< double >&
SupportVectorClassifier::proba() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.SupportVectorClassifier.probA)
  return proba_;
}
inline ::google::protobuf::RepeatedField< double >*
SupportVectorClassifier::mutable_proba() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.SupportVectorClassifier.probA)
  return &proba_;
}

// repeated double probB = 8;
inline int SupportVectorClassifier::probb_size() const {
  return probb_.size();
}
inline void SupportVectorClassifier::clear_probb() {
  probb_.Clear();
}
inline double SupportVectorClassifier::probb(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SupportVectorClassifier.probB)
  return probb_.Get(index);
}
inline void SupportVectorClassifier::set_probb(int index, double value) {
  probb_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.SupportVectorClassifier.probB)
}
inline void SupportVectorClassifier::add_probb(double value) {
  probb_.Add(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.SupportVectorClassifier.probB)
}
inline const ::google::protobuf::RepeatedField< double >&
SupportVectorClassifier::probb() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.SupportVectorClassifier.probB)
  return probb_;
}
inline ::google::protobuf::RepeatedField< double >*
SupportVectorClassifier::mutable_probb() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.SupportVectorClassifier.probB)
  return &probb_;
}

// .CoreML.Specification.StringVector stringClassLabels = 100;
inline bool SupportVectorClassifier::has_stringclasslabels() const {
  return ClassLabels_case() == kStringClassLabels;
}
inline void SupportVectorClassifier::set_has_stringclasslabels() {
  _oneof_case_[1] = kStringClassLabels;
}
inline void SupportVectorClassifier::clear_stringclasslabels() {
  if (has_stringclasslabels()) {
    delete ClassLabels_.stringclasslabels_;
    clear_has_ClassLabels();
  }
}
inline  const ::CoreML::Specification::StringVector& SupportVectorClassifier::stringclasslabels() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SupportVectorClassifier.stringClassLabels)
  return has_stringclasslabels()
      ? *ClassLabels_.stringclasslabels_
      : ::CoreML::Specification::StringVector::default_instance();
}
inline ::CoreML::Specification::StringVector* SupportVectorClassifier::mutable_stringclasslabels() {
  if (!has_stringclasslabels()) {
    clear_ClassLabels();
    set_has_stringclasslabels();
    ClassLabels_.stringclasslabels_ = new ::CoreML::Specification::StringVector;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.SupportVectorClassifier.stringClassLabels)
  return ClassLabels_.stringclasslabels_;
}
inline ::CoreML::Specification::StringVector* SupportVectorClassifier::release_stringclasslabels() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.SupportVectorClassifier.stringClassLabels)
  if (has_stringclasslabels()) {
    clear_has_ClassLabels();
    ::CoreML::Specification::StringVector* temp = ClassLabels_.stringclasslabels_;
    ClassLabels_.stringclasslabels_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SupportVectorClassifier::set_allocated_stringclasslabels(::CoreML::Specification::StringVector* stringclasslabels) {
  clear_ClassLabels();
  if (stringclasslabels) {
    set_has_stringclasslabels();
    ClassLabels_.stringclasslabels_ = stringclasslabels;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.SupportVectorClassifier.stringClassLabels)
}

// .CoreML.Specification.Int64Vector int64ClassLabels = 101;
inline bool SupportVectorClassifier::has_int64classlabels() const {
  return ClassLabels_case() == kInt64ClassLabels;
}
inline void SupportVectorClassifier::set_has_int64classlabels() {
  _oneof_case_[1] = kInt64ClassLabels;
}
inline void SupportVectorClassifier::clear_int64classlabels() {
  if (has_int64classlabels()) {
    delete ClassLabels_.int64classlabels_;
    clear_has_ClassLabels();
  }
}
inline  const ::CoreML::Specification::Int64Vector& SupportVectorClassifier::int64classlabels() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.SupportVectorClassifier.int64ClassLabels)
  return has_int64classlabels()
      ? *ClassLabels_.int64classlabels_
      : ::CoreML::Specification::Int64Vector::default_instance();
}
inline ::CoreML::Specification::Int64Vector* SupportVectorClassifier::mutable_int64classlabels() {
  if (!has_int64classlabels()) {
    clear_ClassLabels();
    set_has_int64classlabels();
    ClassLabels_.int64classlabels_ = new ::CoreML::Specification::Int64Vector;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.SupportVectorClassifier.int64ClassLabels)
  return ClassLabels_.int64classlabels_;
}
inline ::CoreML::Specification::Int64Vector* SupportVectorClassifier::release_int64classlabels() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.SupportVectorClassifier.int64ClassLabels)
  if (has_int64classlabels()) {
    clear_has_ClassLabels();
    ::CoreML::Specification::Int64Vector* temp = ClassLabels_.int64classlabels_;
    ClassLabels_.int64classlabels_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SupportVectorClassifier::set_allocated_int64classlabels(::CoreML::Specification::Int64Vector* int64classlabels) {
  clear_ClassLabels();
  if (int64classlabels) {
    set_has_int64classlabels();
    ClassLabels_.int64classlabels_ = int64classlabels;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.SupportVectorClassifier.int64ClassLabels)
}

inline bool SupportVectorClassifier::has_supportVectors() const {
  return supportVectors_case() != SUPPORTVECTORS_NOT_SET;
}
inline void SupportVectorClassifier::clear_has_supportVectors() {
  _oneof_case_[0] = SUPPORTVECTORS_NOT_SET;
}
inline bool SupportVectorClassifier::has_ClassLabels() const {
  return ClassLabels_case() != CLASSLABELS_NOT_SET;
}
inline void SupportVectorClassifier::clear_has_ClassLabels() {
  _oneof_case_[1] = CLASSLABELS_NOT_SET;
}
inline SupportVectorClassifier::SupportVectorsCase SupportVectorClassifier::supportVectors_case() const {
  return SupportVectorClassifier::SupportVectorsCase(_oneof_case_[0]);
}
inline SupportVectorClassifier::ClassLabelsCase SupportVectorClassifier::ClassLabels_case() const {
  return SupportVectorClassifier::ClassLabelsCase(_oneof_case_[1]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SVM_2eproto__INCLUDED
