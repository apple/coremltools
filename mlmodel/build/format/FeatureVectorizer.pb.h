// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FeatureVectorizer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FeatureVectorizer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FeatureVectorizer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FeatureVectorizer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FeatureVectorizer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace CoreML {
namespace Specification {
class FeatureVectorizer;
struct FeatureVectorizerDefaultTypeInternal;
extern FeatureVectorizerDefaultTypeInternal _FeatureVectorizer_default_instance_;
class FeatureVectorizer_InputColumn;
struct FeatureVectorizer_InputColumnDefaultTypeInternal;
extern FeatureVectorizer_InputColumnDefaultTypeInternal _FeatureVectorizer_InputColumn_default_instance_;
}  // namespace Specification
}  // namespace CoreML
PROTOBUF_NAMESPACE_OPEN
template<> ::CoreML::Specification::FeatureVectorizer* Arena::CreateMaybeMessage<::CoreML::Specification::FeatureVectorizer>(Arena*);
template<> ::CoreML::Specification::FeatureVectorizer_InputColumn* Arena::CreateMaybeMessage<::CoreML::Specification::FeatureVectorizer_InputColumn>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CoreML {
namespace Specification {

// ===================================================================

class FeatureVectorizer_InputColumn final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.FeatureVectorizer.InputColumn) */ {
 public:
  inline FeatureVectorizer_InputColumn() : FeatureVectorizer_InputColumn(nullptr) {}
  ~FeatureVectorizer_InputColumn() override;
  explicit constexpr FeatureVectorizer_InputColumn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeatureVectorizer_InputColumn(const FeatureVectorizer_InputColumn& from);
  FeatureVectorizer_InputColumn(FeatureVectorizer_InputColumn&& from) noexcept
    : FeatureVectorizer_InputColumn() {
    *this = ::std::move(from);
  }

  inline FeatureVectorizer_InputColumn& operator=(const FeatureVectorizer_InputColumn& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureVectorizer_InputColumn& operator=(FeatureVectorizer_InputColumn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FeatureVectorizer_InputColumn& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeatureVectorizer_InputColumn* internal_default_instance() {
    return reinterpret_cast<const FeatureVectorizer_InputColumn*>(
               &_FeatureVectorizer_InputColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FeatureVectorizer_InputColumn& a, FeatureVectorizer_InputColumn& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureVectorizer_InputColumn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureVectorizer_InputColumn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeatureVectorizer_InputColumn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeatureVectorizer_InputColumn>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FeatureVectorizer_InputColumn& from);
  void MergeFrom(const FeatureVectorizer_InputColumn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureVectorizer_InputColumn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.FeatureVectorizer.InputColumn";
  }
  protected:
  explicit FeatureVectorizer_InputColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputColumnFieldNumber = 1,
    kInputDimensionsFieldNumber = 2,
  };
  // string inputColumn = 1;
  void clear_inputcolumn();
  const std::string& inputcolumn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inputcolumn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inputcolumn();
  PROTOBUF_NODISCARD std::string* release_inputcolumn();
  void set_allocated_inputcolumn(std::string* inputcolumn);
  private:
  const std::string& _internal_inputcolumn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inputcolumn(const std::string& value);
  std::string* _internal_mutable_inputcolumn();
  public:

  // uint64 inputDimensions = 2;
  void clear_inputdimensions();
  uint64_t inputdimensions() const;
  void set_inputdimensions(uint64_t value);
  private:
  uint64_t _internal_inputdimensions() const;
  void _internal_set_inputdimensions(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CoreML.Specification.FeatureVectorizer.InputColumn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputcolumn_;
  uint64_t inputdimensions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FeatureVectorizer_2eproto;
};
// -------------------------------------------------------------------

class FeatureVectorizer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.FeatureVectorizer) */ {
 public:
  inline FeatureVectorizer() : FeatureVectorizer(nullptr) {}
  ~FeatureVectorizer() override;
  explicit constexpr FeatureVectorizer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeatureVectorizer(const FeatureVectorizer& from);
  FeatureVectorizer(FeatureVectorizer&& from) noexcept
    : FeatureVectorizer() {
    *this = ::std::move(from);
  }

  inline FeatureVectorizer& operator=(const FeatureVectorizer& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureVectorizer& operator=(FeatureVectorizer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FeatureVectorizer& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeatureVectorizer* internal_default_instance() {
    return reinterpret_cast<const FeatureVectorizer*>(
               &_FeatureVectorizer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FeatureVectorizer& a, FeatureVectorizer& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureVectorizer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureVectorizer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeatureVectorizer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeatureVectorizer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FeatureVectorizer& from);
  void MergeFrom(const FeatureVectorizer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureVectorizer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.FeatureVectorizer";
  }
  protected:
  explicit FeatureVectorizer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FeatureVectorizer_InputColumn InputColumn;

  // accessors -------------------------------------------------------

  enum : int {
    kInputListFieldNumber = 1,
  };
  // repeated .CoreML.Specification.FeatureVectorizer.InputColumn inputList = 1;
  int inputlist_size() const;
  private:
  int _internal_inputlist_size() const;
  public:
  void clear_inputlist();
  ::CoreML::Specification::FeatureVectorizer_InputColumn* mutable_inputlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CoreML::Specification::FeatureVectorizer_InputColumn >*
      mutable_inputlist();
  private:
  const ::CoreML::Specification::FeatureVectorizer_InputColumn& _internal_inputlist(int index) const;
  ::CoreML::Specification::FeatureVectorizer_InputColumn* _internal_add_inputlist();
  public:
  const ::CoreML::Specification::FeatureVectorizer_InputColumn& inputlist(int index) const;
  ::CoreML::Specification::FeatureVectorizer_InputColumn* add_inputlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CoreML::Specification::FeatureVectorizer_InputColumn >&
      inputlist() const;

  // @@protoc_insertion_point(class_scope:CoreML.Specification.FeatureVectorizer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CoreML::Specification::FeatureVectorizer_InputColumn > inputlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FeatureVectorizer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FeatureVectorizer_InputColumn

// string inputColumn = 1;
inline void FeatureVectorizer_InputColumn::clear_inputcolumn() {
  inputcolumn_.ClearToEmpty();
}
inline const std::string& FeatureVectorizer_InputColumn::inputcolumn() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.FeatureVectorizer.InputColumn.inputColumn)
  return _internal_inputcolumn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FeatureVectorizer_InputColumn::set_inputcolumn(ArgT0&& arg0, ArgT... args) {
 
 inputcolumn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CoreML.Specification.FeatureVectorizer.InputColumn.inputColumn)
}
inline std::string* FeatureVectorizer_InputColumn::mutable_inputcolumn() {
  std::string* _s = _internal_mutable_inputcolumn();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.FeatureVectorizer.InputColumn.inputColumn)
  return _s;
}
inline const std::string& FeatureVectorizer_InputColumn::_internal_inputcolumn() const {
  return inputcolumn_.Get();
}
inline void FeatureVectorizer_InputColumn::_internal_set_inputcolumn(const std::string& value) {
  
  inputcolumn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FeatureVectorizer_InputColumn::_internal_mutable_inputcolumn() {
  
  return inputcolumn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FeatureVectorizer_InputColumn::release_inputcolumn() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.FeatureVectorizer.InputColumn.inputColumn)
  return inputcolumn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FeatureVectorizer_InputColumn::set_allocated_inputcolumn(std::string* inputcolumn) {
  if (inputcolumn != nullptr) {
    
  } else {
    
  }
  inputcolumn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inputcolumn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inputcolumn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    inputcolumn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.FeatureVectorizer.InputColumn.inputColumn)
}

// uint64 inputDimensions = 2;
inline void FeatureVectorizer_InputColumn::clear_inputdimensions() {
  inputdimensions_ = uint64_t{0u};
}
inline uint64_t FeatureVectorizer_InputColumn::_internal_inputdimensions() const {
  return inputdimensions_;
}
inline uint64_t FeatureVectorizer_InputColumn::inputdimensions() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.FeatureVectorizer.InputColumn.inputDimensions)
  return _internal_inputdimensions();
}
inline void FeatureVectorizer_InputColumn::_internal_set_inputdimensions(uint64_t value) {
  
  inputdimensions_ = value;
}
inline void FeatureVectorizer_InputColumn::set_inputdimensions(uint64_t value) {
  _internal_set_inputdimensions(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.FeatureVectorizer.InputColumn.inputDimensions)
}

// -------------------------------------------------------------------

// FeatureVectorizer

// repeated .CoreML.Specification.FeatureVectorizer.InputColumn inputList = 1;
inline int FeatureVectorizer::_internal_inputlist_size() const {
  return inputlist_.size();
}
inline int FeatureVectorizer::inputlist_size() const {
  return _internal_inputlist_size();
}
inline void FeatureVectorizer::clear_inputlist() {
  inputlist_.Clear();
}
inline ::CoreML::Specification::FeatureVectorizer_InputColumn* FeatureVectorizer::mutable_inputlist(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.FeatureVectorizer.inputList)
  return inputlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CoreML::Specification::FeatureVectorizer_InputColumn >*
FeatureVectorizer::mutable_inputlist() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.FeatureVectorizer.inputList)
  return &inputlist_;
}
inline const ::CoreML::Specification::FeatureVectorizer_InputColumn& FeatureVectorizer::_internal_inputlist(int index) const {
  return inputlist_.Get(index);
}
inline const ::CoreML::Specification::FeatureVectorizer_InputColumn& FeatureVectorizer::inputlist(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.FeatureVectorizer.inputList)
  return _internal_inputlist(index);
}
inline ::CoreML::Specification::FeatureVectorizer_InputColumn* FeatureVectorizer::_internal_add_inputlist() {
  return inputlist_.Add();
}
inline ::CoreML::Specification::FeatureVectorizer_InputColumn* FeatureVectorizer::add_inputlist() {
  ::CoreML::Specification::FeatureVectorizer_InputColumn* _add = _internal_add_inputlist();
  // @@protoc_insertion_point(field_add:CoreML.Specification.FeatureVectorizer.inputList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CoreML::Specification::FeatureVectorizer_InputColumn >&
FeatureVectorizer::inputlist() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.FeatureVectorizer.inputList)
  return inputlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FeatureVectorizer_2eproto
