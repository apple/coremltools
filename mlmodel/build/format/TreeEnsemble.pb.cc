// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TreeEnsemble.proto

#include "TreeEnsemble.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace CoreML {
namespace Specification {
constexpr TreeEnsembleParameters_TreeNode_EvaluationInfo::TreeEnsembleParameters_TreeNode_EvaluationInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : evaluationindex_(uint64_t{0u})
  , evaluationvalue_(0){}
struct TreeEnsembleParameters_TreeNode_EvaluationInfoDefaultTypeInternal {
  constexpr TreeEnsembleParameters_TreeNode_EvaluationInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TreeEnsembleParameters_TreeNode_EvaluationInfoDefaultTypeInternal() {}
  union {
    TreeEnsembleParameters_TreeNode_EvaluationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TreeEnsembleParameters_TreeNode_EvaluationInfoDefaultTypeInternal _TreeEnsembleParameters_TreeNode_EvaluationInfo_default_instance_;
constexpr TreeEnsembleParameters_TreeNode::TreeEnsembleParameters_TreeNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : evaluationinfo_()
  , treeid_(uint64_t{0u})
  , nodeid_(uint64_t{0u})
  , nodebehavior_(0)

  , missingvaluetrackstruechild_(false)
  , branchfeatureindex_(uint64_t{0u})
  , branchfeaturevalue_(0)
  , truechildnodeid_(uint64_t{0u})
  , falsechildnodeid_(uint64_t{0u})
  , relativehitrate_(0){}
struct TreeEnsembleParameters_TreeNodeDefaultTypeInternal {
  constexpr TreeEnsembleParameters_TreeNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TreeEnsembleParameters_TreeNodeDefaultTypeInternal() {}
  union {
    TreeEnsembleParameters_TreeNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TreeEnsembleParameters_TreeNodeDefaultTypeInternal _TreeEnsembleParameters_TreeNode_default_instance_;
constexpr TreeEnsembleParameters::TreeEnsembleParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_()
  , basepredictionvalue_()
  , numpredictiondimensions_(uint64_t{0u}){}
struct TreeEnsembleParametersDefaultTypeInternal {
  constexpr TreeEnsembleParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TreeEnsembleParametersDefaultTypeInternal() {}
  union {
    TreeEnsembleParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TreeEnsembleParametersDefaultTypeInternal _TreeEnsembleParameters_default_instance_;
constexpr TreeEnsembleClassifier::TreeEnsembleClassifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : treeensemble_(nullptr)
  , postevaluationtransform_(0)

  , _oneof_case_{}{}
struct TreeEnsembleClassifierDefaultTypeInternal {
  constexpr TreeEnsembleClassifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TreeEnsembleClassifierDefaultTypeInternal() {}
  union {
    TreeEnsembleClassifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TreeEnsembleClassifierDefaultTypeInternal _TreeEnsembleClassifier_default_instance_;
constexpr TreeEnsembleRegressor::TreeEnsembleRegressor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : treeensemble_(nullptr)
  , postevaluationtransform_(0)
{}
struct TreeEnsembleRegressorDefaultTypeInternal {
  constexpr TreeEnsembleRegressorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TreeEnsembleRegressorDefaultTypeInternal() {}
  union {
    TreeEnsembleRegressor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TreeEnsembleRegressorDefaultTypeInternal _TreeEnsembleRegressor_default_instance_;
}  // namespace Specification
}  // namespace CoreML
namespace CoreML {
namespace Specification {
bool TreeEnsembleParameters_TreeNode_TreeNodeBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TreeEnsembleParameters_TreeNode_TreeNodeBehavior_strings[7] = {};

static const char TreeEnsembleParameters_TreeNode_TreeNodeBehavior_names[] =
  "BranchOnValueEqual"
  "BranchOnValueGreaterThan"
  "BranchOnValueGreaterThanEqual"
  "BranchOnValueLessThan"
  "BranchOnValueLessThanEqual"
  "BranchOnValueNotEqual"
  "LeafNode";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TreeEnsembleParameters_TreeNode_TreeNodeBehavior_entries[] = {
  { {TreeEnsembleParameters_TreeNode_TreeNodeBehavior_names + 0, 18}, 4 },
  { {TreeEnsembleParameters_TreeNode_TreeNodeBehavior_names + 18, 24}, 3 },
  { {TreeEnsembleParameters_TreeNode_TreeNodeBehavior_names + 42, 29}, 2 },
  { {TreeEnsembleParameters_TreeNode_TreeNodeBehavior_names + 71, 21}, 1 },
  { {TreeEnsembleParameters_TreeNode_TreeNodeBehavior_names + 92, 26}, 0 },
  { {TreeEnsembleParameters_TreeNode_TreeNodeBehavior_names + 118, 21}, 5 },
  { {TreeEnsembleParameters_TreeNode_TreeNodeBehavior_names + 139, 8}, 6 },
};

static const int TreeEnsembleParameters_TreeNode_TreeNodeBehavior_entries_by_number[] = {
  4, // 0 -> BranchOnValueLessThanEqual
  3, // 1 -> BranchOnValueLessThan
  2, // 2 -> BranchOnValueGreaterThanEqual
  1, // 3 -> BranchOnValueGreaterThan
  0, // 4 -> BranchOnValueEqual
  5, // 5 -> BranchOnValueNotEqual
  6, // 6 -> LeafNode
};

const std::string& TreeEnsembleParameters_TreeNode_TreeNodeBehavior_Name(
    TreeEnsembleParameters_TreeNode_TreeNodeBehavior value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TreeEnsembleParameters_TreeNode_TreeNodeBehavior_entries,
          TreeEnsembleParameters_TreeNode_TreeNodeBehavior_entries_by_number,
          7, TreeEnsembleParameters_TreeNode_TreeNodeBehavior_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TreeEnsembleParameters_TreeNode_TreeNodeBehavior_entries,
      TreeEnsembleParameters_TreeNode_TreeNodeBehavior_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TreeEnsembleParameters_TreeNode_TreeNodeBehavior_strings[idx].get();
}
bool TreeEnsembleParameters_TreeNode_TreeNodeBehavior_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TreeEnsembleParameters_TreeNode_TreeNodeBehavior* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TreeEnsembleParameters_TreeNode_TreeNodeBehavior_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<TreeEnsembleParameters_TreeNode_TreeNodeBehavior>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TreeEnsembleParameters_TreeNode_TreeNodeBehavior TreeEnsembleParameters_TreeNode::BranchOnValueLessThanEqual;
constexpr TreeEnsembleParameters_TreeNode_TreeNodeBehavior TreeEnsembleParameters_TreeNode::BranchOnValueLessThan;
constexpr TreeEnsembleParameters_TreeNode_TreeNodeBehavior TreeEnsembleParameters_TreeNode::BranchOnValueGreaterThanEqual;
constexpr TreeEnsembleParameters_TreeNode_TreeNodeBehavior TreeEnsembleParameters_TreeNode::BranchOnValueGreaterThan;
constexpr TreeEnsembleParameters_TreeNode_TreeNodeBehavior TreeEnsembleParameters_TreeNode::BranchOnValueEqual;
constexpr TreeEnsembleParameters_TreeNode_TreeNodeBehavior TreeEnsembleParameters_TreeNode::BranchOnValueNotEqual;
constexpr TreeEnsembleParameters_TreeNode_TreeNodeBehavior TreeEnsembleParameters_TreeNode::LeafNode;
constexpr TreeEnsembleParameters_TreeNode_TreeNodeBehavior TreeEnsembleParameters_TreeNode::TreeNodeBehavior_MIN;
constexpr TreeEnsembleParameters_TreeNode_TreeNodeBehavior TreeEnsembleParameters_TreeNode::TreeNodeBehavior_MAX;
constexpr int TreeEnsembleParameters_TreeNode::TreeNodeBehavior_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool TreeEnsemblePostEvaluationTransform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TreeEnsemblePostEvaluationTransform_strings[4] = {};

static const char TreeEnsemblePostEvaluationTransform_names[] =
  "Classification_SoftMax"
  "Classification_SoftMaxWithZeroClassReference"
  "NoTransform"
  "Regression_Logistic";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TreeEnsemblePostEvaluationTransform_entries[] = {
  { {TreeEnsemblePostEvaluationTransform_names + 0, 22}, 1 },
  { {TreeEnsemblePostEvaluationTransform_names + 22, 44}, 3 },
  { {TreeEnsemblePostEvaluationTransform_names + 66, 11}, 0 },
  { {TreeEnsemblePostEvaluationTransform_names + 77, 19}, 2 },
};

static const int TreeEnsemblePostEvaluationTransform_entries_by_number[] = {
  2, // 0 -> NoTransform
  0, // 1 -> Classification_SoftMax
  3, // 2 -> Regression_Logistic
  1, // 3 -> Classification_SoftMaxWithZeroClassReference
};

const std::string& TreeEnsemblePostEvaluationTransform_Name(
    TreeEnsemblePostEvaluationTransform value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TreeEnsemblePostEvaluationTransform_entries,
          TreeEnsemblePostEvaluationTransform_entries_by_number,
          4, TreeEnsemblePostEvaluationTransform_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TreeEnsemblePostEvaluationTransform_entries,
      TreeEnsemblePostEvaluationTransform_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TreeEnsemblePostEvaluationTransform_strings[idx].get();
}
bool TreeEnsemblePostEvaluationTransform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TreeEnsemblePostEvaluationTransform* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TreeEnsemblePostEvaluationTransform_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<TreeEnsemblePostEvaluationTransform>(int_value);
  }
  return success;
}

// ===================================================================

class TreeEnsembleParameters_TreeNode_EvaluationInfo::_Internal {
 public:
};

TreeEnsembleParameters_TreeNode_EvaluationInfo::TreeEnsembleParameters_TreeNode_EvaluationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CoreML.Specification.TreeEnsembleParameters.TreeNode.EvaluationInfo)
}
TreeEnsembleParameters_TreeNode_EvaluationInfo::TreeEnsembleParameters_TreeNode_EvaluationInfo(const TreeEnsembleParameters_TreeNode_EvaluationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&evaluationindex_, &from.evaluationindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&evaluationvalue_) -
    reinterpret_cast<char*>(&evaluationindex_)) + sizeof(evaluationvalue_));
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.TreeEnsembleParameters.TreeNode.EvaluationInfo)
}

inline void TreeEnsembleParameters_TreeNode_EvaluationInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&evaluationindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&evaluationvalue_) -
    reinterpret_cast<char*>(&evaluationindex_)) + sizeof(evaluationvalue_));
}

TreeEnsembleParameters_TreeNode_EvaluationInfo::~TreeEnsembleParameters_TreeNode_EvaluationInfo() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.TreeEnsembleParameters.TreeNode.EvaluationInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void TreeEnsembleParameters_TreeNode_EvaluationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TreeEnsembleParameters_TreeNode_EvaluationInfo::ArenaDtor(void* object) {
  TreeEnsembleParameters_TreeNode_EvaluationInfo* _this = reinterpret_cast< TreeEnsembleParameters_TreeNode_EvaluationInfo* >(object);
  (void)_this;
}
void TreeEnsembleParameters_TreeNode_EvaluationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TreeEnsembleParameters_TreeNode_EvaluationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TreeEnsembleParameters_TreeNode_EvaluationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.TreeEnsembleParameters.TreeNode.EvaluationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&evaluationindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&evaluationvalue_) -
      reinterpret_cast<char*>(&evaluationindex_)) + sizeof(evaluationvalue_));
  _internal_metadata_.Clear<std::string>();
}

const char* TreeEnsembleParameters_TreeNode_EvaluationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 evaluationIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          evaluationindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double evaluationValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          evaluationvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TreeEnsembleParameters_TreeNode_EvaluationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoreML.Specification.TreeEnsembleParameters.TreeNode.EvaluationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 evaluationIndex = 1;
  if (this->_internal_evaluationindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_evaluationindex(), target);
  }

  // double evaluationValue = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_evaluationvalue = this->_internal_evaluationvalue();
  uint64_t raw_evaluationvalue;
  memcpy(&raw_evaluationvalue, &tmp_evaluationvalue, sizeof(tmp_evaluationvalue));
  if (raw_evaluationvalue != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_evaluationvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoreML.Specification.TreeEnsembleParameters.TreeNode.EvaluationInfo)
  return target;
}

size_t TreeEnsembleParameters_TreeNode_EvaluationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.TreeEnsembleParameters.TreeNode.EvaluationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 evaluationIndex = 1;
  if (this->_internal_evaluationindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_evaluationindex());
  }

  // double evaluationValue = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_evaluationvalue = this->_internal_evaluationvalue();
  uint64_t raw_evaluationvalue;
  memcpy(&raw_evaluationvalue, &tmp_evaluationvalue, sizeof(tmp_evaluationvalue));
  if (raw_evaluationvalue != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeEnsembleParameters_TreeNode_EvaluationInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TreeEnsembleParameters_TreeNode_EvaluationInfo*>(
      &from));
}

void TreeEnsembleParameters_TreeNode_EvaluationInfo::MergeFrom(const TreeEnsembleParameters_TreeNode_EvaluationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.TreeEnsembleParameters.TreeNode.EvaluationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_evaluationindex() != 0) {
    _internal_set_evaluationindex(from._internal_evaluationindex());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_evaluationvalue = from._internal_evaluationvalue();
  uint64_t raw_evaluationvalue;
  memcpy(&raw_evaluationvalue, &tmp_evaluationvalue, sizeof(tmp_evaluationvalue));
  if (raw_evaluationvalue != 0) {
    _internal_set_evaluationvalue(from._internal_evaluationvalue());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TreeEnsembleParameters_TreeNode_EvaluationInfo::CopyFrom(const TreeEnsembleParameters_TreeNode_EvaluationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.TreeEnsembleParameters.TreeNode.EvaluationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeEnsembleParameters_TreeNode_EvaluationInfo::IsInitialized() const {
  return true;
}

void TreeEnsembleParameters_TreeNode_EvaluationInfo::InternalSwap(TreeEnsembleParameters_TreeNode_EvaluationInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TreeEnsembleParameters_TreeNode_EvaluationInfo, evaluationvalue_)
      + sizeof(TreeEnsembleParameters_TreeNode_EvaluationInfo::evaluationvalue_)
      - PROTOBUF_FIELD_OFFSET(TreeEnsembleParameters_TreeNode_EvaluationInfo, evaluationindex_)>(
          reinterpret_cast<char*>(&evaluationindex_),
          reinterpret_cast<char*>(&other->evaluationindex_));
}

std::string TreeEnsembleParameters_TreeNode_EvaluationInfo::GetTypeName() const {
  return "CoreML.Specification.TreeEnsembleParameters.TreeNode.EvaluationInfo";
}


// ===================================================================

class TreeEnsembleParameters_TreeNode::_Internal {
 public:
};

TreeEnsembleParameters_TreeNode::TreeEnsembleParameters_TreeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  evaluationinfo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CoreML.Specification.TreeEnsembleParameters.TreeNode)
}
TreeEnsembleParameters_TreeNode::TreeEnsembleParameters_TreeNode(const TreeEnsembleParameters_TreeNode& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      evaluationinfo_(from.evaluationinfo_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&treeid_, &from.treeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&relativehitrate_) -
    reinterpret_cast<char*>(&treeid_)) + sizeof(relativehitrate_));
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.TreeEnsembleParameters.TreeNode)
}

inline void TreeEnsembleParameters_TreeNode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&treeid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&relativehitrate_) -
    reinterpret_cast<char*>(&treeid_)) + sizeof(relativehitrate_));
}

TreeEnsembleParameters_TreeNode::~TreeEnsembleParameters_TreeNode() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.TreeEnsembleParameters.TreeNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void TreeEnsembleParameters_TreeNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TreeEnsembleParameters_TreeNode::ArenaDtor(void* object) {
  TreeEnsembleParameters_TreeNode* _this = reinterpret_cast< TreeEnsembleParameters_TreeNode* >(object);
  (void)_this;
}
void TreeEnsembleParameters_TreeNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TreeEnsembleParameters_TreeNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TreeEnsembleParameters_TreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.TreeEnsembleParameters.TreeNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  evaluationinfo_.Clear();
  ::memset(&treeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relativehitrate_) -
      reinterpret_cast<char*>(&treeid_)) + sizeof(relativehitrate_));
  _internal_metadata_.Clear<std::string>();
}

const char* TreeEnsembleParameters_TreeNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 treeId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          treeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nodeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CoreML.Specification.TreeEnsembleParameters.TreeNode.TreeNodeBehavior nodeBehavior = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nodebehavior(static_cast<::CoreML::Specification::TreeEnsembleParameters_TreeNode_TreeNodeBehavior>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 branchFeatureIndex = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          branchfeatureindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double branchFeatureValue = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          branchfeaturevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 trueChildNodeId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          truechildnodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 falseChildNodeId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          falsechildnodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool missingValueTracksTrueChild = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          missingvaluetrackstruechild_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CoreML.Specification.TreeEnsembleParameters.TreeNode.EvaluationInfo evaluationInfo = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_evaluationinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double relativeHitRate = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          relativehitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TreeEnsembleParameters_TreeNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoreML.Specification.TreeEnsembleParameters.TreeNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 treeId = 1;
  if (this->_internal_treeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_treeid(), target);
  }

  // uint64 nodeId = 2;
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nodeid(), target);
  }

  // .CoreML.Specification.TreeEnsembleParameters.TreeNode.TreeNodeBehavior nodeBehavior = 3;
  if (this->_internal_nodebehavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_nodebehavior(), target);
  }

  // uint64 branchFeatureIndex = 10;
  if (this->_internal_branchfeatureindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_branchfeatureindex(), target);
  }

  // double branchFeatureValue = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_branchfeaturevalue = this->_internal_branchfeaturevalue();
  uint64_t raw_branchfeaturevalue;
  memcpy(&raw_branchfeaturevalue, &tmp_branchfeaturevalue, sizeof(tmp_branchfeaturevalue));
  if (raw_branchfeaturevalue != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_branchfeaturevalue(), target);
  }

  // uint64 trueChildNodeId = 12;
  if (this->_internal_truechildnodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_truechildnodeid(), target);
  }

  // uint64 falseChildNodeId = 13;
  if (this->_internal_falsechildnodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_falsechildnodeid(), target);
  }

  // bool missingValueTracksTrueChild = 14;
  if (this->_internal_missingvaluetrackstruechild() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_missingvaluetrackstruechild(), target);
  }

  // repeated .CoreML.Specification.TreeEnsembleParameters.TreeNode.EvaluationInfo evaluationInfo = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_evaluationinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_evaluationinfo(i), target, stream);
  }

  // double relativeHitRate = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relativehitrate = this->_internal_relativehitrate();
  uint64_t raw_relativehitrate;
  memcpy(&raw_relativehitrate, &tmp_relativehitrate, sizeof(tmp_relativehitrate));
  if (raw_relativehitrate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_relativehitrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoreML.Specification.TreeEnsembleParameters.TreeNode)
  return target;
}

size_t TreeEnsembleParameters_TreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.TreeEnsembleParameters.TreeNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CoreML.Specification.TreeEnsembleParameters.TreeNode.EvaluationInfo evaluationInfo = 20;
  total_size += 2UL * this->_internal_evaluationinfo_size();
  for (const auto& msg : this->evaluationinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 treeId = 1;
  if (this->_internal_treeid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_treeid());
  }

  // uint64 nodeId = 2;
  if (this->_internal_nodeid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nodeid());
  }

  // .CoreML.Specification.TreeEnsembleParameters.TreeNode.TreeNodeBehavior nodeBehavior = 3;
  if (this->_internal_nodebehavior() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nodebehavior());
  }

  // bool missingValueTracksTrueChild = 14;
  if (this->_internal_missingvaluetrackstruechild() != 0) {
    total_size += 1 + 1;
  }

  // uint64 branchFeatureIndex = 10;
  if (this->_internal_branchfeatureindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_branchfeatureindex());
  }

  // double branchFeatureValue = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_branchfeaturevalue = this->_internal_branchfeaturevalue();
  uint64_t raw_branchfeaturevalue;
  memcpy(&raw_branchfeaturevalue, &tmp_branchfeaturevalue, sizeof(tmp_branchfeaturevalue));
  if (raw_branchfeaturevalue != 0) {
    total_size += 1 + 8;
  }

  // uint64 trueChildNodeId = 12;
  if (this->_internal_truechildnodeid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_truechildnodeid());
  }

  // uint64 falseChildNodeId = 13;
  if (this->_internal_falsechildnodeid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_falsechildnodeid());
  }

  // double relativeHitRate = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relativehitrate = this->_internal_relativehitrate();
  uint64_t raw_relativehitrate;
  memcpy(&raw_relativehitrate, &tmp_relativehitrate, sizeof(tmp_relativehitrate));
  if (raw_relativehitrate != 0) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeEnsembleParameters_TreeNode::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TreeEnsembleParameters_TreeNode*>(
      &from));
}

void TreeEnsembleParameters_TreeNode::MergeFrom(const TreeEnsembleParameters_TreeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.TreeEnsembleParameters.TreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  evaluationinfo_.MergeFrom(from.evaluationinfo_);
  if (from._internal_treeid() != 0) {
    _internal_set_treeid(from._internal_treeid());
  }
  if (from._internal_nodeid() != 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (from._internal_nodebehavior() != 0) {
    _internal_set_nodebehavior(from._internal_nodebehavior());
  }
  if (from._internal_missingvaluetrackstruechild() != 0) {
    _internal_set_missingvaluetrackstruechild(from._internal_missingvaluetrackstruechild());
  }
  if (from._internal_branchfeatureindex() != 0) {
    _internal_set_branchfeatureindex(from._internal_branchfeatureindex());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_branchfeaturevalue = from._internal_branchfeaturevalue();
  uint64_t raw_branchfeaturevalue;
  memcpy(&raw_branchfeaturevalue, &tmp_branchfeaturevalue, sizeof(tmp_branchfeaturevalue));
  if (raw_branchfeaturevalue != 0) {
    _internal_set_branchfeaturevalue(from._internal_branchfeaturevalue());
  }
  if (from._internal_truechildnodeid() != 0) {
    _internal_set_truechildnodeid(from._internal_truechildnodeid());
  }
  if (from._internal_falsechildnodeid() != 0) {
    _internal_set_falsechildnodeid(from._internal_falsechildnodeid());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relativehitrate = from._internal_relativehitrate();
  uint64_t raw_relativehitrate;
  memcpy(&raw_relativehitrate, &tmp_relativehitrate, sizeof(tmp_relativehitrate));
  if (raw_relativehitrate != 0) {
    _internal_set_relativehitrate(from._internal_relativehitrate());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TreeEnsembleParameters_TreeNode::CopyFrom(const TreeEnsembleParameters_TreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.TreeEnsembleParameters.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeEnsembleParameters_TreeNode::IsInitialized() const {
  return true;
}

void TreeEnsembleParameters_TreeNode::InternalSwap(TreeEnsembleParameters_TreeNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  evaluationinfo_.InternalSwap(&other->evaluationinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TreeEnsembleParameters_TreeNode, relativehitrate_)
      + sizeof(TreeEnsembleParameters_TreeNode::relativehitrate_)
      - PROTOBUF_FIELD_OFFSET(TreeEnsembleParameters_TreeNode, treeid_)>(
          reinterpret_cast<char*>(&treeid_),
          reinterpret_cast<char*>(&other->treeid_));
}

std::string TreeEnsembleParameters_TreeNode::GetTypeName() const {
  return "CoreML.Specification.TreeEnsembleParameters.TreeNode";
}


// ===================================================================

class TreeEnsembleParameters::_Internal {
 public:
};

TreeEnsembleParameters::TreeEnsembleParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  nodes_(arena),
  basepredictionvalue_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CoreML.Specification.TreeEnsembleParameters)
}
TreeEnsembleParameters::TreeEnsembleParameters(const TreeEnsembleParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      nodes_(from.nodes_),
      basepredictionvalue_(from.basepredictionvalue_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  numpredictiondimensions_ = from.numpredictiondimensions_;
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.TreeEnsembleParameters)
}

inline void TreeEnsembleParameters::SharedCtor() {
numpredictiondimensions_ = uint64_t{0u};
}

TreeEnsembleParameters::~TreeEnsembleParameters() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.TreeEnsembleParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void TreeEnsembleParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TreeEnsembleParameters::ArenaDtor(void* object) {
  TreeEnsembleParameters* _this = reinterpret_cast< TreeEnsembleParameters* >(object);
  (void)_this;
}
void TreeEnsembleParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TreeEnsembleParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TreeEnsembleParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.TreeEnsembleParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  basepredictionvalue_.Clear();
  numpredictiondimensions_ = uint64_t{0u};
  _internal_metadata_.Clear<std::string>();
}

const char* TreeEnsembleParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CoreML.Specification.TreeEnsembleParameters.TreeNode nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 numPredictionDimensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          numpredictiondimensions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double basePredictionValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_basepredictionvalue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_basepredictionvalue(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TreeEnsembleParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoreML.Specification.TreeEnsembleParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CoreML.Specification.TreeEnsembleParameters.TreeNode nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  // uint64 numPredictionDimensions = 2;
  if (this->_internal_numpredictiondimensions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_numpredictiondimensions(), target);
  }

  // repeated double basePredictionValue = 3;
  if (this->_internal_basepredictionvalue_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_basepredictionvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoreML.Specification.TreeEnsembleParameters)
  return target;
}

size_t TreeEnsembleParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.TreeEnsembleParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CoreML.Specification.TreeEnsembleParameters.TreeNode nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double basePredictionValue = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_basepredictionvalue_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // uint64 numPredictionDimensions = 2;
  if (this->_internal_numpredictiondimensions() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_numpredictiondimensions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeEnsembleParameters::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TreeEnsembleParameters*>(
      &from));
}

void TreeEnsembleParameters::MergeFrom(const TreeEnsembleParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.TreeEnsembleParameters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  basepredictionvalue_.MergeFrom(from.basepredictionvalue_);
  if (from._internal_numpredictiondimensions() != 0) {
    _internal_set_numpredictiondimensions(from._internal_numpredictiondimensions());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TreeEnsembleParameters::CopyFrom(const TreeEnsembleParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.TreeEnsembleParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeEnsembleParameters::IsInitialized() const {
  return true;
}

void TreeEnsembleParameters::InternalSwap(TreeEnsembleParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  basepredictionvalue_.InternalSwap(&other->basepredictionvalue_);
  swap(numpredictiondimensions_, other->numpredictiondimensions_);
}

std::string TreeEnsembleParameters::GetTypeName() const {
  return "CoreML.Specification.TreeEnsembleParameters";
}


// ===================================================================

class TreeEnsembleClassifier::_Internal {
 public:
  static const ::CoreML::Specification::TreeEnsembleParameters& treeensemble(const TreeEnsembleClassifier* msg);
  static const ::CoreML::Specification::StringVector& stringclasslabels(const TreeEnsembleClassifier* msg);
  static const ::CoreML::Specification::Int64Vector& int64classlabels(const TreeEnsembleClassifier* msg);
};

const ::CoreML::Specification::TreeEnsembleParameters&
TreeEnsembleClassifier::_Internal::treeensemble(const TreeEnsembleClassifier* msg) {
  return *msg->treeensemble_;
}
const ::CoreML::Specification::StringVector&
TreeEnsembleClassifier::_Internal::stringclasslabels(const TreeEnsembleClassifier* msg) {
  return *msg->ClassLabels_.stringclasslabels_;
}
const ::CoreML::Specification::Int64Vector&
TreeEnsembleClassifier::_Internal::int64classlabels(const TreeEnsembleClassifier* msg) {
  return *msg->ClassLabels_.int64classlabels_;
}
void TreeEnsembleClassifier::set_allocated_stringclasslabels(::CoreML::Specification::StringVector* stringclasslabels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ClassLabels();
  if (stringclasslabels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stringclasslabels));
    if (message_arena != submessage_arena) {
      stringclasslabels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stringclasslabels, submessage_arena);
    }
    set_has_stringclasslabels();
    ClassLabels_.stringclasslabels_ = stringclasslabels;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.TreeEnsembleClassifier.stringClassLabels)
}
void TreeEnsembleClassifier::clear_stringclasslabels() {
  if (_internal_has_stringclasslabels()) {
    if (GetArenaForAllocation() == nullptr) {
      delete ClassLabels_.stringclasslabels_;
    }
    clear_has_ClassLabels();
  }
}
void TreeEnsembleClassifier::set_allocated_int64classlabels(::CoreML::Specification::Int64Vector* int64classlabels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ClassLabels();
  if (int64classlabels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(int64classlabels));
    if (message_arena != submessage_arena) {
      int64classlabels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int64classlabels, submessage_arena);
    }
    set_has_int64classlabels();
    ClassLabels_.int64classlabels_ = int64classlabels;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.TreeEnsembleClassifier.int64ClassLabels)
}
void TreeEnsembleClassifier::clear_int64classlabels() {
  if (_internal_has_int64classlabels()) {
    if (GetArenaForAllocation() == nullptr) {
      delete ClassLabels_.int64classlabels_;
    }
    clear_has_ClassLabels();
  }
}
TreeEnsembleClassifier::TreeEnsembleClassifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CoreML.Specification.TreeEnsembleClassifier)
}
TreeEnsembleClassifier::TreeEnsembleClassifier(const TreeEnsembleClassifier& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_treeensemble()) {
    treeensemble_ = new ::CoreML::Specification::TreeEnsembleParameters(*from.treeensemble_);
  } else {
    treeensemble_ = nullptr;
  }
  postevaluationtransform_ = from.postevaluationtransform_;
  clear_has_ClassLabels();
  switch (from.ClassLabels_case()) {
    case kStringClassLabels: {
      _internal_mutable_stringclasslabels()->::CoreML::Specification::StringVector::MergeFrom(from._internal_stringclasslabels());
      break;
    }
    case kInt64ClassLabels: {
      _internal_mutable_int64classlabels()->::CoreML::Specification::Int64Vector::MergeFrom(from._internal_int64classlabels());
      break;
    }
    case CLASSLABELS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.TreeEnsembleClassifier)
}

inline void TreeEnsembleClassifier::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&treeensemble_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&postevaluationtransform_) -
    reinterpret_cast<char*>(&treeensemble_)) + sizeof(postevaluationtransform_));
clear_has_ClassLabels();
}

TreeEnsembleClassifier::~TreeEnsembleClassifier() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.TreeEnsembleClassifier)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void TreeEnsembleClassifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete treeensemble_;
  if (has_ClassLabels()) {
    clear_ClassLabels();
  }
}

void TreeEnsembleClassifier::ArenaDtor(void* object) {
  TreeEnsembleClassifier* _this = reinterpret_cast< TreeEnsembleClassifier* >(object);
  (void)_this;
}
void TreeEnsembleClassifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TreeEnsembleClassifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TreeEnsembleClassifier::clear_ClassLabels() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.TreeEnsembleClassifier)
  switch (ClassLabels_case()) {
    case kStringClassLabels: {
      if (GetArenaForAllocation() == nullptr) {
        delete ClassLabels_.stringclasslabels_;
      }
      break;
    }
    case kInt64ClassLabels: {
      if (GetArenaForAllocation() == nullptr) {
        delete ClassLabels_.int64classlabels_;
      }
      break;
    }
    case CLASSLABELS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLASSLABELS_NOT_SET;
}


void TreeEnsembleClassifier::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.TreeEnsembleClassifier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && treeensemble_ != nullptr) {
    delete treeensemble_;
  }
  treeensemble_ = nullptr;
  postevaluationtransform_ = 0;
  clear_ClassLabels();
  _internal_metadata_.Clear<std::string>();
}

const char* TreeEnsembleClassifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CoreML.Specification.TreeEnsembleParameters treeEnsemble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_treeensemble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CoreML.Specification.TreeEnsemblePostEvaluationTransform postEvaluationTransform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_postevaluationtransform(static_cast<::CoreML::Specification::TreeEnsemblePostEvaluationTransform>(val));
        } else
          goto handle_unusual;
        continue;
      // .CoreML.Specification.StringVector stringClassLabels = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stringclasslabels(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CoreML.Specification.Int64Vector int64ClassLabels = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_int64classlabels(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TreeEnsembleClassifier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoreML.Specification.TreeEnsembleClassifier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .CoreML.Specification.TreeEnsembleParameters treeEnsemble = 1;
  if (this->_internal_has_treeensemble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::treeensemble(this), target, stream);
  }

  // .CoreML.Specification.TreeEnsemblePostEvaluationTransform postEvaluationTransform = 2;
  if (this->_internal_postevaluationtransform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_postevaluationtransform(), target);
  }

  // .CoreML.Specification.StringVector stringClassLabels = 100;
  if (_internal_has_stringclasslabels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::stringclasslabels(this), target, stream);
  }

  // .CoreML.Specification.Int64Vector int64ClassLabels = 101;
  if (_internal_has_int64classlabels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::int64classlabels(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoreML.Specification.TreeEnsembleClassifier)
  return target;
}

size_t TreeEnsembleClassifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.TreeEnsembleClassifier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CoreML.Specification.TreeEnsembleParameters treeEnsemble = 1;
  if (this->_internal_has_treeensemble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *treeensemble_);
  }

  // .CoreML.Specification.TreeEnsemblePostEvaluationTransform postEvaluationTransform = 2;
  if (this->_internal_postevaluationtransform() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_postevaluationtransform());
  }

  switch (ClassLabels_case()) {
    // .CoreML.Specification.StringVector stringClassLabels = 100;
    case kStringClassLabels: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ClassLabels_.stringclasslabels_);
      break;
    }
    // .CoreML.Specification.Int64Vector int64ClassLabels = 101;
    case kInt64ClassLabels: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ClassLabels_.int64classlabels_);
      break;
    }
    case CLASSLABELS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeEnsembleClassifier::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TreeEnsembleClassifier*>(
      &from));
}

void TreeEnsembleClassifier::MergeFrom(const TreeEnsembleClassifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.TreeEnsembleClassifier)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_treeensemble()) {
    _internal_mutable_treeensemble()->::CoreML::Specification::TreeEnsembleParameters::MergeFrom(from._internal_treeensemble());
  }
  if (from._internal_postevaluationtransform() != 0) {
    _internal_set_postevaluationtransform(from._internal_postevaluationtransform());
  }
  switch (from.ClassLabels_case()) {
    case kStringClassLabels: {
      _internal_mutable_stringclasslabels()->::CoreML::Specification::StringVector::MergeFrom(from._internal_stringclasslabels());
      break;
    }
    case kInt64ClassLabels: {
      _internal_mutable_int64classlabels()->::CoreML::Specification::Int64Vector::MergeFrom(from._internal_int64classlabels());
      break;
    }
    case CLASSLABELS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TreeEnsembleClassifier::CopyFrom(const TreeEnsembleClassifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.TreeEnsembleClassifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeEnsembleClassifier::IsInitialized() const {
  return true;
}

void TreeEnsembleClassifier::InternalSwap(TreeEnsembleClassifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TreeEnsembleClassifier, postevaluationtransform_)
      + sizeof(TreeEnsembleClassifier::postevaluationtransform_)
      - PROTOBUF_FIELD_OFFSET(TreeEnsembleClassifier, treeensemble_)>(
          reinterpret_cast<char*>(&treeensemble_),
          reinterpret_cast<char*>(&other->treeensemble_));
  swap(ClassLabels_, other->ClassLabels_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string TreeEnsembleClassifier::GetTypeName() const {
  return "CoreML.Specification.TreeEnsembleClassifier";
}


// ===================================================================

class TreeEnsembleRegressor::_Internal {
 public:
  static const ::CoreML::Specification::TreeEnsembleParameters& treeensemble(const TreeEnsembleRegressor* msg);
};

const ::CoreML::Specification::TreeEnsembleParameters&
TreeEnsembleRegressor::_Internal::treeensemble(const TreeEnsembleRegressor* msg) {
  return *msg->treeensemble_;
}
TreeEnsembleRegressor::TreeEnsembleRegressor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CoreML.Specification.TreeEnsembleRegressor)
}
TreeEnsembleRegressor::TreeEnsembleRegressor(const TreeEnsembleRegressor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_treeensemble()) {
    treeensemble_ = new ::CoreML::Specification::TreeEnsembleParameters(*from.treeensemble_);
  } else {
    treeensemble_ = nullptr;
  }
  postevaluationtransform_ = from.postevaluationtransform_;
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.TreeEnsembleRegressor)
}

inline void TreeEnsembleRegressor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&treeensemble_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&postevaluationtransform_) -
    reinterpret_cast<char*>(&treeensemble_)) + sizeof(postevaluationtransform_));
}

TreeEnsembleRegressor::~TreeEnsembleRegressor() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.TreeEnsembleRegressor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void TreeEnsembleRegressor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete treeensemble_;
}

void TreeEnsembleRegressor::ArenaDtor(void* object) {
  TreeEnsembleRegressor* _this = reinterpret_cast< TreeEnsembleRegressor* >(object);
  (void)_this;
}
void TreeEnsembleRegressor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TreeEnsembleRegressor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TreeEnsembleRegressor::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.TreeEnsembleRegressor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && treeensemble_ != nullptr) {
    delete treeensemble_;
  }
  treeensemble_ = nullptr;
  postevaluationtransform_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* TreeEnsembleRegressor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CoreML.Specification.TreeEnsembleParameters treeEnsemble = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_treeensemble(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CoreML.Specification.TreeEnsemblePostEvaluationTransform postEvaluationTransform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_postevaluationtransform(static_cast<::CoreML::Specification::TreeEnsemblePostEvaluationTransform>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TreeEnsembleRegressor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoreML.Specification.TreeEnsembleRegressor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .CoreML.Specification.TreeEnsembleParameters treeEnsemble = 1;
  if (this->_internal_has_treeensemble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::treeensemble(this), target, stream);
  }

  // .CoreML.Specification.TreeEnsemblePostEvaluationTransform postEvaluationTransform = 2;
  if (this->_internal_postevaluationtransform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_postevaluationtransform(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoreML.Specification.TreeEnsembleRegressor)
  return target;
}

size_t TreeEnsembleRegressor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.TreeEnsembleRegressor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CoreML.Specification.TreeEnsembleParameters treeEnsemble = 1;
  if (this->_internal_has_treeensemble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *treeensemble_);
  }

  // .CoreML.Specification.TreeEnsemblePostEvaluationTransform postEvaluationTransform = 2;
  if (this->_internal_postevaluationtransform() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_postevaluationtransform());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeEnsembleRegressor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TreeEnsembleRegressor*>(
      &from));
}

void TreeEnsembleRegressor::MergeFrom(const TreeEnsembleRegressor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.TreeEnsembleRegressor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_treeensemble()) {
    _internal_mutable_treeensemble()->::CoreML::Specification::TreeEnsembleParameters::MergeFrom(from._internal_treeensemble());
  }
  if (from._internal_postevaluationtransform() != 0) {
    _internal_set_postevaluationtransform(from._internal_postevaluationtransform());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TreeEnsembleRegressor::CopyFrom(const TreeEnsembleRegressor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.TreeEnsembleRegressor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeEnsembleRegressor::IsInitialized() const {
  return true;
}

void TreeEnsembleRegressor::InternalSwap(TreeEnsembleRegressor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TreeEnsembleRegressor, postevaluationtransform_)
      + sizeof(TreeEnsembleRegressor::postevaluationtransform_)
      - PROTOBUF_FIELD_OFFSET(TreeEnsembleRegressor, treeensemble_)>(
          reinterpret_cast<char*>(&treeensemble_),
          reinterpret_cast<char*>(&other->treeensemble_));
}

std::string TreeEnsembleRegressor::GetTypeName() const {
  return "CoreML.Specification.TreeEnsembleRegressor";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Specification
}  // namespace CoreML
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo* Arena::CreateMaybeMessage< ::CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CoreML::Specification::TreeEnsembleParameters_TreeNode* Arena::CreateMaybeMessage< ::CoreML::Specification::TreeEnsembleParameters_TreeNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CoreML::Specification::TreeEnsembleParameters_TreeNode >(arena);
}
template<> PROTOBUF_NOINLINE ::CoreML::Specification::TreeEnsembleParameters* Arena::CreateMaybeMessage< ::CoreML::Specification::TreeEnsembleParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CoreML::Specification::TreeEnsembleParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::CoreML::Specification::TreeEnsembleClassifier* Arena::CreateMaybeMessage< ::CoreML::Specification::TreeEnsembleClassifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CoreML::Specification::TreeEnsembleClassifier >(arena);
}
template<> PROTOBUF_NOINLINE ::CoreML::Specification::TreeEnsembleRegressor* Arena::CreateMaybeMessage< ::CoreML::Specification::TreeEnsembleRegressor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CoreML::Specification::TreeEnsembleRegressor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
