// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BayesianProbitRegressor.proto

#ifndef PROTOBUF_BayesianProbitRegressor_2eproto__INCLUDED
#define PROTOBUF_BayesianProbitRegressor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace CoreML {
namespace Specification {
class BayesianProbitRegressor;
class BayesianProbitRegressorDefaultTypeInternal;
extern BayesianProbitRegressorDefaultTypeInternal _BayesianProbitRegressor_default_instance_;
class BayesianProbitRegressor_FeatureValueWeight;
class BayesianProbitRegressor_FeatureValueWeightDefaultTypeInternal;
extern BayesianProbitRegressor_FeatureValueWeightDefaultTypeInternal _BayesianProbitRegressor_FeatureValueWeight_default_instance_;
class BayesianProbitRegressor_FeatureWeight;
class BayesianProbitRegressor_FeatureWeightDefaultTypeInternal;
extern BayesianProbitRegressor_FeatureWeightDefaultTypeInternal _BayesianProbitRegressor_FeatureWeight_default_instance_;
class BayesianProbitRegressor_Gaussian;
class BayesianProbitRegressor_GaussianDefaultTypeInternal;
extern BayesianProbitRegressor_GaussianDefaultTypeInternal _BayesianProbitRegressor_Gaussian_default_instance_;
}  // namespace Specification
}  // namespace CoreML

namespace CoreML {
namespace Specification {

namespace protobuf_BayesianProbitRegressor_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_BayesianProbitRegressor_2eproto

// ===================================================================

class BayesianProbitRegressor_Gaussian : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.BayesianProbitRegressor.Gaussian) */ {
 public:
  BayesianProbitRegressor_Gaussian();
  virtual ~BayesianProbitRegressor_Gaussian();

  BayesianProbitRegressor_Gaussian(const BayesianProbitRegressor_Gaussian& from);

  inline BayesianProbitRegressor_Gaussian& operator=(const BayesianProbitRegressor_Gaussian& from) {
    CopyFrom(from);
    return *this;
  }

  static const BayesianProbitRegressor_Gaussian& default_instance();

  static inline const BayesianProbitRegressor_Gaussian* internal_default_instance() {
    return reinterpret_cast<const BayesianProbitRegressor_Gaussian*>(
               &_BayesianProbitRegressor_Gaussian_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BayesianProbitRegressor_Gaussian* other);

  // implements Message ----------------------------------------------

  inline BayesianProbitRegressor_Gaussian* New() const PROTOBUF_FINAL { return New(NULL); }

  BayesianProbitRegressor_Gaussian* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BayesianProbitRegressor_Gaussian& from);
  void MergeFrom(const BayesianProbitRegressor_Gaussian& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BayesianProbitRegressor_Gaussian* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double mean = 1;
  void clear_mean();
  static const int kMeanFieldNumber = 1;
  double mean() const;
  void set_mean(double value);

  // double precision = 2;
  void clear_precision();
  static const int kPrecisionFieldNumber = 2;
  double precision() const;
  void set_precision(double value);

  // @@protoc_insertion_point(class_scope:CoreML.Specification.BayesianProbitRegressor.Gaussian)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double mean_;
  double precision_;
  mutable int _cached_size_;
  friend struct protobuf_BayesianProbitRegressor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BayesianProbitRegressor_FeatureValueWeight : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.BayesianProbitRegressor.FeatureValueWeight) */ {
 public:
  BayesianProbitRegressor_FeatureValueWeight();
  virtual ~BayesianProbitRegressor_FeatureValueWeight();

  BayesianProbitRegressor_FeatureValueWeight(const BayesianProbitRegressor_FeatureValueWeight& from);

  inline BayesianProbitRegressor_FeatureValueWeight& operator=(const BayesianProbitRegressor_FeatureValueWeight& from) {
    CopyFrom(from);
    return *this;
  }

  static const BayesianProbitRegressor_FeatureValueWeight& default_instance();

  static inline const BayesianProbitRegressor_FeatureValueWeight* internal_default_instance() {
    return reinterpret_cast<const BayesianProbitRegressor_FeatureValueWeight*>(
               &_BayesianProbitRegressor_FeatureValueWeight_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BayesianProbitRegressor_FeatureValueWeight* other);

  // implements Message ----------------------------------------------

  inline BayesianProbitRegressor_FeatureValueWeight* New() const PROTOBUF_FINAL { return New(NULL); }

  BayesianProbitRegressor_FeatureValueWeight* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BayesianProbitRegressor_FeatureValueWeight& from);
  void MergeFrom(const BayesianProbitRegressor_FeatureValueWeight& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BayesianProbitRegressor_FeatureValueWeight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CoreML.Specification.BayesianProbitRegressor.Gaussian featureWeight = 2;
  bool has_featureweight() const;
  void clear_featureweight();
  static const int kFeatureWeightFieldNumber = 2;
  const ::CoreML::Specification::BayesianProbitRegressor_Gaussian& featureweight() const;
  ::CoreML::Specification::BayesianProbitRegressor_Gaussian* mutable_featureweight();
  ::CoreML::Specification::BayesianProbitRegressor_Gaussian* release_featureweight();
  void set_allocated_featureweight(::CoreML::Specification::BayesianProbitRegressor_Gaussian* featureweight);

  // uint32 featureValue = 1;
  void clear_featurevalue();
  static const int kFeatureValueFieldNumber = 1;
  ::google::protobuf::uint32 featurevalue() const;
  void set_featurevalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CoreML.Specification.BayesianProbitRegressor.FeatureValueWeight)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::CoreML::Specification::BayesianProbitRegressor_Gaussian* featureweight_;
  ::google::protobuf::uint32 featurevalue_;
  mutable int _cached_size_;
  friend struct protobuf_BayesianProbitRegressor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BayesianProbitRegressor_FeatureWeight : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.BayesianProbitRegressor.FeatureWeight) */ {
 public:
  BayesianProbitRegressor_FeatureWeight();
  virtual ~BayesianProbitRegressor_FeatureWeight();

  BayesianProbitRegressor_FeatureWeight(const BayesianProbitRegressor_FeatureWeight& from);

  inline BayesianProbitRegressor_FeatureWeight& operator=(const BayesianProbitRegressor_FeatureWeight& from) {
    CopyFrom(from);
    return *this;
  }

  static const BayesianProbitRegressor_FeatureWeight& default_instance();

  static inline const BayesianProbitRegressor_FeatureWeight* internal_default_instance() {
    return reinterpret_cast<const BayesianProbitRegressor_FeatureWeight*>(
               &_BayesianProbitRegressor_FeatureWeight_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BayesianProbitRegressor_FeatureWeight* other);

  // implements Message ----------------------------------------------

  inline BayesianProbitRegressor_FeatureWeight* New() const PROTOBUF_FINAL { return New(NULL); }

  BayesianProbitRegressor_FeatureWeight* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BayesianProbitRegressor_FeatureWeight& from);
  void MergeFrom(const BayesianProbitRegressor_FeatureWeight& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BayesianProbitRegressor_FeatureWeight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CoreML.Specification.BayesianProbitRegressor.FeatureValueWeight weights = 2;
  int weights_size() const;
  void clear_weights();
  static const int kWeightsFieldNumber = 2;
  const ::CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight& weights(int index) const;
  ::CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight* mutable_weights(int index);
  ::CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight* add_weights();
  ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight >*
      mutable_weights();
  const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight >&
      weights() const;

  // uint32 featureId = 1;
  void clear_featureid();
  static const int kFeatureIdFieldNumber = 1;
  ::google::protobuf::uint32 featureid() const;
  void set_featureid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CoreML.Specification.BayesianProbitRegressor.FeatureWeight)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight > weights_;
  ::google::protobuf::uint32 featureid_;
  mutable int _cached_size_;
  friend struct protobuf_BayesianProbitRegressor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BayesianProbitRegressor : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.BayesianProbitRegressor) */ {
 public:
  BayesianProbitRegressor();
  virtual ~BayesianProbitRegressor();

  BayesianProbitRegressor(const BayesianProbitRegressor& from);

  inline BayesianProbitRegressor& operator=(const BayesianProbitRegressor& from) {
    CopyFrom(from);
    return *this;
  }

  static const BayesianProbitRegressor& default_instance();

  static inline const BayesianProbitRegressor* internal_default_instance() {
    return reinterpret_cast<const BayesianProbitRegressor*>(
               &_BayesianProbitRegressor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(BayesianProbitRegressor* other);

  // implements Message ----------------------------------------------

  inline BayesianProbitRegressor* New() const PROTOBUF_FINAL { return New(NULL); }

  BayesianProbitRegressor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const BayesianProbitRegressor& from);
  void MergeFrom(const BayesianProbitRegressor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BayesianProbitRegressor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BayesianProbitRegressor_Gaussian Gaussian;
  typedef BayesianProbitRegressor_FeatureValueWeight FeatureValueWeight;
  typedef BayesianProbitRegressor_FeatureWeight FeatureWeight;

  // accessors -------------------------------------------------------

  // repeated .CoreML.Specification.BayesianProbitRegressor.FeatureWeight features = 3;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 3;
  const ::CoreML::Specification::BayesianProbitRegressor_FeatureWeight& features(int index) const;
  ::CoreML::Specification::BayesianProbitRegressor_FeatureWeight* mutable_features(int index);
  ::CoreML::Specification::BayesianProbitRegressor_FeatureWeight* add_features();
  ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::BayesianProbitRegressor_FeatureWeight >*
      mutable_features();
  const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::BayesianProbitRegressor_FeatureWeight >&
      features() const;

  // string regressionInputFeatureName = 10;
  void clear_regressioninputfeaturename();
  static const int kRegressionInputFeatureNameFieldNumber = 10;
  const ::std::string& regressioninputfeaturename() const;
  void set_regressioninputfeaturename(const ::std::string& value);
  #if LANG_CXX11
  void set_regressioninputfeaturename(::std::string&& value);
  #endif
  void set_regressioninputfeaturename(const char* value);
  void set_regressioninputfeaturename(const char* value, size_t size);
  ::std::string* mutable_regressioninputfeaturename();
  ::std::string* release_regressioninputfeaturename();
  void set_allocated_regressioninputfeaturename(::std::string* regressioninputfeaturename);

  // string optimismInputFeatureName = 11;
  void clear_optimisminputfeaturename();
  static const int kOptimismInputFeatureNameFieldNumber = 11;
  const ::std::string& optimisminputfeaturename() const;
  void set_optimisminputfeaturename(const ::std::string& value);
  #if LANG_CXX11
  void set_optimisminputfeaturename(::std::string&& value);
  #endif
  void set_optimisminputfeaturename(const char* value);
  void set_optimisminputfeaturename(const char* value, size_t size);
  ::std::string* mutable_optimisminputfeaturename();
  ::std::string* release_optimisminputfeaturename();
  void set_allocated_optimisminputfeaturename(::std::string* optimisminputfeaturename);

  // string samplingScaleInputFeatureName = 12;
  void clear_samplingscaleinputfeaturename();
  static const int kSamplingScaleInputFeatureNameFieldNumber = 12;
  const ::std::string& samplingscaleinputfeaturename() const;
  void set_samplingscaleinputfeaturename(const ::std::string& value);
  #if LANG_CXX11
  void set_samplingscaleinputfeaturename(::std::string&& value);
  #endif
  void set_samplingscaleinputfeaturename(const char* value);
  void set_samplingscaleinputfeaturename(const char* value, size_t size);
  ::std::string* mutable_samplingscaleinputfeaturename();
  ::std::string* release_samplingscaleinputfeaturename();
  void set_allocated_samplingscaleinputfeaturename(::std::string* samplingscaleinputfeaturename);

  // string samplingTruncationInputFeatureName = 13;
  void clear_samplingtruncationinputfeaturename();
  static const int kSamplingTruncationInputFeatureNameFieldNumber = 13;
  const ::std::string& samplingtruncationinputfeaturename() const;
  void set_samplingtruncationinputfeaturename(const ::std::string& value);
  #if LANG_CXX11
  void set_samplingtruncationinputfeaturename(::std::string&& value);
  #endif
  void set_samplingtruncationinputfeaturename(const char* value);
  void set_samplingtruncationinputfeaturename(const char* value, size_t size);
  ::std::string* mutable_samplingtruncationinputfeaturename();
  ::std::string* release_samplingtruncationinputfeaturename();
  void set_allocated_samplingtruncationinputfeaturename(::std::string* samplingtruncationinputfeaturename);

  // string meanOutputFeatureName = 20;
  void clear_meanoutputfeaturename();
  static const int kMeanOutputFeatureNameFieldNumber = 20;
  const ::std::string& meanoutputfeaturename() const;
  void set_meanoutputfeaturename(const ::std::string& value);
  #if LANG_CXX11
  void set_meanoutputfeaturename(::std::string&& value);
  #endif
  void set_meanoutputfeaturename(const char* value);
  void set_meanoutputfeaturename(const char* value, size_t size);
  ::std::string* mutable_meanoutputfeaturename();
  ::std::string* release_meanoutputfeaturename();
  void set_allocated_meanoutputfeaturename(::std::string* meanoutputfeaturename);

  // string varianceOutputFeatureName = 21;
  void clear_varianceoutputfeaturename();
  static const int kVarianceOutputFeatureNameFieldNumber = 21;
  const ::std::string& varianceoutputfeaturename() const;
  void set_varianceoutputfeaturename(const ::std::string& value);
  #if LANG_CXX11
  void set_varianceoutputfeaturename(::std::string&& value);
  #endif
  void set_varianceoutputfeaturename(const char* value);
  void set_varianceoutputfeaturename(const char* value, size_t size);
  ::std::string* mutable_varianceoutputfeaturename();
  ::std::string* release_varianceoutputfeaturename();
  void set_allocated_varianceoutputfeaturename(::std::string* varianceoutputfeaturename);

  // string pessimisticProbabilityOutputFeatureName = 22;
  void clear_pessimisticprobabilityoutputfeaturename();
  static const int kPessimisticProbabilityOutputFeatureNameFieldNumber = 22;
  const ::std::string& pessimisticprobabilityoutputfeaturename() const;
  void set_pessimisticprobabilityoutputfeaturename(const ::std::string& value);
  #if LANG_CXX11
  void set_pessimisticprobabilityoutputfeaturename(::std::string&& value);
  #endif
  void set_pessimisticprobabilityoutputfeaturename(const char* value);
  void set_pessimisticprobabilityoutputfeaturename(const char* value, size_t size);
  ::std::string* mutable_pessimisticprobabilityoutputfeaturename();
  ::std::string* release_pessimisticprobabilityoutputfeaturename();
  void set_allocated_pessimisticprobabilityoutputfeaturename(::std::string* pessimisticprobabilityoutputfeaturename);

  // string sampledProbabilityOutputFeatureName = 23;
  void clear_sampledprobabilityoutputfeaturename();
  static const int kSampledProbabilityOutputFeatureNameFieldNumber = 23;
  const ::std::string& sampledprobabilityoutputfeaturename() const;
  void set_sampledprobabilityoutputfeaturename(const ::std::string& value);
  #if LANG_CXX11
  void set_sampledprobabilityoutputfeaturename(::std::string&& value);
  #endif
  void set_sampledprobabilityoutputfeaturename(const char* value);
  void set_sampledprobabilityoutputfeaturename(const char* value, size_t size);
  ::std::string* mutable_sampledprobabilityoutputfeaturename();
  ::std::string* release_sampledprobabilityoutputfeaturename();
  void set_allocated_sampledprobabilityoutputfeaturename(::std::string* sampledprobabilityoutputfeaturename);

  // .CoreML.Specification.BayesianProbitRegressor.Gaussian bias = 2;
  bool has_bias() const;
  void clear_bias();
  static const int kBiasFieldNumber = 2;
  const ::CoreML::Specification::BayesianProbitRegressor_Gaussian& bias() const;
  ::CoreML::Specification::BayesianProbitRegressor_Gaussian* mutable_bias();
  ::CoreML::Specification::BayesianProbitRegressor_Gaussian* release_bias();
  void set_allocated_bias(::CoreML::Specification::BayesianProbitRegressor_Gaussian* bias);

  // uint32 numberOfFeatures = 1;
  void clear_numberoffeatures();
  static const int kNumberOfFeaturesFieldNumber = 1;
  ::google::protobuf::uint32 numberoffeatures() const;
  void set_numberoffeatures(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CoreML.Specification.BayesianProbitRegressor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::BayesianProbitRegressor_FeatureWeight > features_;
  ::google::protobuf::internal::ArenaStringPtr regressioninputfeaturename_;
  ::google::protobuf::internal::ArenaStringPtr optimisminputfeaturename_;
  ::google::protobuf::internal::ArenaStringPtr samplingscaleinputfeaturename_;
  ::google::protobuf::internal::ArenaStringPtr samplingtruncationinputfeaturename_;
  ::google::protobuf::internal::ArenaStringPtr meanoutputfeaturename_;
  ::google::protobuf::internal::ArenaStringPtr varianceoutputfeaturename_;
  ::google::protobuf::internal::ArenaStringPtr pessimisticprobabilityoutputfeaturename_;
  ::google::protobuf::internal::ArenaStringPtr sampledprobabilityoutputfeaturename_;
  ::CoreML::Specification::BayesianProbitRegressor_Gaussian* bias_;
  ::google::protobuf::uint32 numberoffeatures_;
  mutable int _cached_size_;
  friend struct protobuf_BayesianProbitRegressor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BayesianProbitRegressor_Gaussian

// double mean = 1;
inline void BayesianProbitRegressor_Gaussian::clear_mean() {
  mean_ = 0;
}
inline double BayesianProbitRegressor_Gaussian::mean() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.Gaussian.mean)
  return mean_;
}
inline void BayesianProbitRegressor_Gaussian::set_mean(double value) {
  
  mean_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.BayesianProbitRegressor.Gaussian.mean)
}

// double precision = 2;
inline void BayesianProbitRegressor_Gaussian::clear_precision() {
  precision_ = 0;
}
inline double BayesianProbitRegressor_Gaussian::precision() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.Gaussian.precision)
  return precision_;
}
inline void BayesianProbitRegressor_Gaussian::set_precision(double value) {
  
  precision_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.BayesianProbitRegressor.Gaussian.precision)
}

// -------------------------------------------------------------------

// BayesianProbitRegressor_FeatureValueWeight

// uint32 featureValue = 1;
inline void BayesianProbitRegressor_FeatureValueWeight::clear_featurevalue() {
  featurevalue_ = 0u;
}
inline ::google::protobuf::uint32 BayesianProbitRegressor_FeatureValueWeight::featurevalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.FeatureValueWeight.featureValue)
  return featurevalue_;
}
inline void BayesianProbitRegressor_FeatureValueWeight::set_featurevalue(::google::protobuf::uint32 value) {
  
  featurevalue_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.BayesianProbitRegressor.FeatureValueWeight.featureValue)
}

// .CoreML.Specification.BayesianProbitRegressor.Gaussian featureWeight = 2;
inline bool BayesianProbitRegressor_FeatureValueWeight::has_featureweight() const {
  return this != internal_default_instance() && featureweight_ != NULL;
}
inline void BayesianProbitRegressor_FeatureValueWeight::clear_featureweight() {
  if (GetArenaNoVirtual() == NULL && featureweight_ != NULL) delete featureweight_;
  featureweight_ = NULL;
}
inline const ::CoreML::Specification::BayesianProbitRegressor_Gaussian& BayesianProbitRegressor_FeatureValueWeight::featureweight() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.FeatureValueWeight.featureWeight)
  return featureweight_ != NULL ? *featureweight_
                         : *::CoreML::Specification::BayesianProbitRegressor_Gaussian::internal_default_instance();
}
inline ::CoreML::Specification::BayesianProbitRegressor_Gaussian* BayesianProbitRegressor_FeatureValueWeight::mutable_featureweight() {
  
  if (featureweight_ == NULL) {
    featureweight_ = new ::CoreML::Specification::BayesianProbitRegressor_Gaussian;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.BayesianProbitRegressor.FeatureValueWeight.featureWeight)
  return featureweight_;
}
inline ::CoreML::Specification::BayesianProbitRegressor_Gaussian* BayesianProbitRegressor_FeatureValueWeight::release_featureweight() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.BayesianProbitRegressor.FeatureValueWeight.featureWeight)
  
  ::CoreML::Specification::BayesianProbitRegressor_Gaussian* temp = featureweight_;
  featureweight_ = NULL;
  return temp;
}
inline void BayesianProbitRegressor_FeatureValueWeight::set_allocated_featureweight(::CoreML::Specification::BayesianProbitRegressor_Gaussian* featureweight) {
  delete featureweight_;
  featureweight_ = featureweight;
  if (featureweight) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.BayesianProbitRegressor.FeatureValueWeight.featureWeight)
}

// -------------------------------------------------------------------

// BayesianProbitRegressor_FeatureWeight

// uint32 featureId = 1;
inline void BayesianProbitRegressor_FeatureWeight::clear_featureid() {
  featureid_ = 0u;
}
inline ::google::protobuf::uint32 BayesianProbitRegressor_FeatureWeight::featureid() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.FeatureWeight.featureId)
  return featureid_;
}
inline void BayesianProbitRegressor_FeatureWeight::set_featureid(::google::protobuf::uint32 value) {
  
  featureid_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.BayesianProbitRegressor.FeatureWeight.featureId)
}

// repeated .CoreML.Specification.BayesianProbitRegressor.FeatureValueWeight weights = 2;
inline int BayesianProbitRegressor_FeatureWeight::weights_size() const {
  return weights_.size();
}
inline void BayesianProbitRegressor_FeatureWeight::clear_weights() {
  weights_.Clear();
}
inline const ::CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight& BayesianProbitRegressor_FeatureWeight::weights(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.FeatureWeight.weights)
  return weights_.Get(index);
}
inline ::CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight* BayesianProbitRegressor_FeatureWeight::mutable_weights(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.BayesianProbitRegressor.FeatureWeight.weights)
  return weights_.Mutable(index);
}
inline ::CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight* BayesianProbitRegressor_FeatureWeight::add_weights() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.BayesianProbitRegressor.FeatureWeight.weights)
  return weights_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight >*
BayesianProbitRegressor_FeatureWeight::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.BayesianProbitRegressor.FeatureWeight.weights)
  return &weights_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight >&
BayesianProbitRegressor_FeatureWeight::weights() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.BayesianProbitRegressor.FeatureWeight.weights)
  return weights_;
}

// -------------------------------------------------------------------

// BayesianProbitRegressor

// uint32 numberOfFeatures = 1;
inline void BayesianProbitRegressor::clear_numberoffeatures() {
  numberoffeatures_ = 0u;
}
inline ::google::protobuf::uint32 BayesianProbitRegressor::numberoffeatures() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.numberOfFeatures)
  return numberoffeatures_;
}
inline void BayesianProbitRegressor::set_numberoffeatures(::google::protobuf::uint32 value) {
  
  numberoffeatures_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.BayesianProbitRegressor.numberOfFeatures)
}

// .CoreML.Specification.BayesianProbitRegressor.Gaussian bias = 2;
inline bool BayesianProbitRegressor::has_bias() const {
  return this != internal_default_instance() && bias_ != NULL;
}
inline void BayesianProbitRegressor::clear_bias() {
  if (GetArenaNoVirtual() == NULL && bias_ != NULL) delete bias_;
  bias_ = NULL;
}
inline const ::CoreML::Specification::BayesianProbitRegressor_Gaussian& BayesianProbitRegressor::bias() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.bias)
  return bias_ != NULL ? *bias_
                         : *::CoreML::Specification::BayesianProbitRegressor_Gaussian::internal_default_instance();
}
inline ::CoreML::Specification::BayesianProbitRegressor_Gaussian* BayesianProbitRegressor::mutable_bias() {
  
  if (bias_ == NULL) {
    bias_ = new ::CoreML::Specification::BayesianProbitRegressor_Gaussian;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.BayesianProbitRegressor.bias)
  return bias_;
}
inline ::CoreML::Specification::BayesianProbitRegressor_Gaussian* BayesianProbitRegressor::release_bias() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.BayesianProbitRegressor.bias)
  
  ::CoreML::Specification::BayesianProbitRegressor_Gaussian* temp = bias_;
  bias_ = NULL;
  return temp;
}
inline void BayesianProbitRegressor::set_allocated_bias(::CoreML::Specification::BayesianProbitRegressor_Gaussian* bias) {
  delete bias_;
  bias_ = bias;
  if (bias) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.BayesianProbitRegressor.bias)
}

// repeated .CoreML.Specification.BayesianProbitRegressor.FeatureWeight features = 3;
inline int BayesianProbitRegressor::features_size() const {
  return features_.size();
}
inline void BayesianProbitRegressor::clear_features() {
  features_.Clear();
}
inline const ::CoreML::Specification::BayesianProbitRegressor_FeatureWeight& BayesianProbitRegressor::features(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.features)
  return features_.Get(index);
}
inline ::CoreML::Specification::BayesianProbitRegressor_FeatureWeight* BayesianProbitRegressor::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.BayesianProbitRegressor.features)
  return features_.Mutable(index);
}
inline ::CoreML::Specification::BayesianProbitRegressor_FeatureWeight* BayesianProbitRegressor::add_features() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.BayesianProbitRegressor.features)
  return features_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::BayesianProbitRegressor_FeatureWeight >*
BayesianProbitRegressor::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.BayesianProbitRegressor.features)
  return &features_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::BayesianProbitRegressor_FeatureWeight >&
BayesianProbitRegressor::features() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.BayesianProbitRegressor.features)
  return features_;
}

// string regressionInputFeatureName = 10;
inline void BayesianProbitRegressor::clear_regressioninputfeaturename() {
  regressioninputfeaturename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BayesianProbitRegressor::regressioninputfeaturename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.regressionInputFeatureName)
  return regressioninputfeaturename_.GetNoArena();
}
inline void BayesianProbitRegressor::set_regressioninputfeaturename(const ::std::string& value) {
  
  regressioninputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.BayesianProbitRegressor.regressionInputFeatureName)
}
#if LANG_CXX11
inline void BayesianProbitRegressor::set_regressioninputfeaturename(::std::string&& value) {
  
  regressioninputfeaturename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.BayesianProbitRegressor.regressionInputFeatureName)
}
#endif
inline void BayesianProbitRegressor::set_regressioninputfeaturename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  regressioninputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.BayesianProbitRegressor.regressionInputFeatureName)
}
inline void BayesianProbitRegressor::set_regressioninputfeaturename(const char* value, size_t size) {
  
  regressioninputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.BayesianProbitRegressor.regressionInputFeatureName)
}
inline ::std::string* BayesianProbitRegressor::mutable_regressioninputfeaturename() {
  
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.BayesianProbitRegressor.regressionInputFeatureName)
  return regressioninputfeaturename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BayesianProbitRegressor::release_regressioninputfeaturename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.BayesianProbitRegressor.regressionInputFeatureName)
  
  return regressioninputfeaturename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BayesianProbitRegressor::set_allocated_regressioninputfeaturename(::std::string* regressioninputfeaturename) {
  if (regressioninputfeaturename != NULL) {
    
  } else {
    
  }
  regressioninputfeaturename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regressioninputfeaturename);
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.BayesianProbitRegressor.regressionInputFeatureName)
}

// string optimismInputFeatureName = 11;
inline void BayesianProbitRegressor::clear_optimisminputfeaturename() {
  optimisminputfeaturename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BayesianProbitRegressor::optimisminputfeaturename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.optimismInputFeatureName)
  return optimisminputfeaturename_.GetNoArena();
}
inline void BayesianProbitRegressor::set_optimisminputfeaturename(const ::std::string& value) {
  
  optimisminputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.BayesianProbitRegressor.optimismInputFeatureName)
}
#if LANG_CXX11
inline void BayesianProbitRegressor::set_optimisminputfeaturename(::std::string&& value) {
  
  optimisminputfeaturename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.BayesianProbitRegressor.optimismInputFeatureName)
}
#endif
inline void BayesianProbitRegressor::set_optimisminputfeaturename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  optimisminputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.BayesianProbitRegressor.optimismInputFeatureName)
}
inline void BayesianProbitRegressor::set_optimisminputfeaturename(const char* value, size_t size) {
  
  optimisminputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.BayesianProbitRegressor.optimismInputFeatureName)
}
inline ::std::string* BayesianProbitRegressor::mutable_optimisminputfeaturename() {
  
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.BayesianProbitRegressor.optimismInputFeatureName)
  return optimisminputfeaturename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BayesianProbitRegressor::release_optimisminputfeaturename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.BayesianProbitRegressor.optimismInputFeatureName)
  
  return optimisminputfeaturename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BayesianProbitRegressor::set_allocated_optimisminputfeaturename(::std::string* optimisminputfeaturename) {
  if (optimisminputfeaturename != NULL) {
    
  } else {
    
  }
  optimisminputfeaturename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optimisminputfeaturename);
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.BayesianProbitRegressor.optimismInputFeatureName)
}

// string samplingScaleInputFeatureName = 12;
inline void BayesianProbitRegressor::clear_samplingscaleinputfeaturename() {
  samplingscaleinputfeaturename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BayesianProbitRegressor::samplingscaleinputfeaturename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.samplingScaleInputFeatureName)
  return samplingscaleinputfeaturename_.GetNoArena();
}
inline void BayesianProbitRegressor::set_samplingscaleinputfeaturename(const ::std::string& value) {
  
  samplingscaleinputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.BayesianProbitRegressor.samplingScaleInputFeatureName)
}
#if LANG_CXX11
inline void BayesianProbitRegressor::set_samplingscaleinputfeaturename(::std::string&& value) {
  
  samplingscaleinputfeaturename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.BayesianProbitRegressor.samplingScaleInputFeatureName)
}
#endif
inline void BayesianProbitRegressor::set_samplingscaleinputfeaturename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  samplingscaleinputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.BayesianProbitRegressor.samplingScaleInputFeatureName)
}
inline void BayesianProbitRegressor::set_samplingscaleinputfeaturename(const char* value, size_t size) {
  
  samplingscaleinputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.BayesianProbitRegressor.samplingScaleInputFeatureName)
}
inline ::std::string* BayesianProbitRegressor::mutable_samplingscaleinputfeaturename() {
  
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.BayesianProbitRegressor.samplingScaleInputFeatureName)
  return samplingscaleinputfeaturename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BayesianProbitRegressor::release_samplingscaleinputfeaturename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.BayesianProbitRegressor.samplingScaleInputFeatureName)
  
  return samplingscaleinputfeaturename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BayesianProbitRegressor::set_allocated_samplingscaleinputfeaturename(::std::string* samplingscaleinputfeaturename) {
  if (samplingscaleinputfeaturename != NULL) {
    
  } else {
    
  }
  samplingscaleinputfeaturename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), samplingscaleinputfeaturename);
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.BayesianProbitRegressor.samplingScaleInputFeatureName)
}

// string samplingTruncationInputFeatureName = 13;
inline void BayesianProbitRegressor::clear_samplingtruncationinputfeaturename() {
  samplingtruncationinputfeaturename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BayesianProbitRegressor::samplingtruncationinputfeaturename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.samplingTruncationInputFeatureName)
  return samplingtruncationinputfeaturename_.GetNoArena();
}
inline void BayesianProbitRegressor::set_samplingtruncationinputfeaturename(const ::std::string& value) {
  
  samplingtruncationinputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.BayesianProbitRegressor.samplingTruncationInputFeatureName)
}
#if LANG_CXX11
inline void BayesianProbitRegressor::set_samplingtruncationinputfeaturename(::std::string&& value) {
  
  samplingtruncationinputfeaturename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.BayesianProbitRegressor.samplingTruncationInputFeatureName)
}
#endif
inline void BayesianProbitRegressor::set_samplingtruncationinputfeaturename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  samplingtruncationinputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.BayesianProbitRegressor.samplingTruncationInputFeatureName)
}
inline void BayesianProbitRegressor::set_samplingtruncationinputfeaturename(const char* value, size_t size) {
  
  samplingtruncationinputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.BayesianProbitRegressor.samplingTruncationInputFeatureName)
}
inline ::std::string* BayesianProbitRegressor::mutable_samplingtruncationinputfeaturename() {
  
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.BayesianProbitRegressor.samplingTruncationInputFeatureName)
  return samplingtruncationinputfeaturename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BayesianProbitRegressor::release_samplingtruncationinputfeaturename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.BayesianProbitRegressor.samplingTruncationInputFeatureName)
  
  return samplingtruncationinputfeaturename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BayesianProbitRegressor::set_allocated_samplingtruncationinputfeaturename(::std::string* samplingtruncationinputfeaturename) {
  if (samplingtruncationinputfeaturename != NULL) {
    
  } else {
    
  }
  samplingtruncationinputfeaturename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), samplingtruncationinputfeaturename);
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.BayesianProbitRegressor.samplingTruncationInputFeatureName)
}

// string meanOutputFeatureName = 20;
inline void BayesianProbitRegressor::clear_meanoutputfeaturename() {
  meanoutputfeaturename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BayesianProbitRegressor::meanoutputfeaturename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.meanOutputFeatureName)
  return meanoutputfeaturename_.GetNoArena();
}
inline void BayesianProbitRegressor::set_meanoutputfeaturename(const ::std::string& value) {
  
  meanoutputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.BayesianProbitRegressor.meanOutputFeatureName)
}
#if LANG_CXX11
inline void BayesianProbitRegressor::set_meanoutputfeaturename(::std::string&& value) {
  
  meanoutputfeaturename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.BayesianProbitRegressor.meanOutputFeatureName)
}
#endif
inline void BayesianProbitRegressor::set_meanoutputfeaturename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  meanoutputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.BayesianProbitRegressor.meanOutputFeatureName)
}
inline void BayesianProbitRegressor::set_meanoutputfeaturename(const char* value, size_t size) {
  
  meanoutputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.BayesianProbitRegressor.meanOutputFeatureName)
}
inline ::std::string* BayesianProbitRegressor::mutable_meanoutputfeaturename() {
  
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.BayesianProbitRegressor.meanOutputFeatureName)
  return meanoutputfeaturename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BayesianProbitRegressor::release_meanoutputfeaturename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.BayesianProbitRegressor.meanOutputFeatureName)
  
  return meanoutputfeaturename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BayesianProbitRegressor::set_allocated_meanoutputfeaturename(::std::string* meanoutputfeaturename) {
  if (meanoutputfeaturename != NULL) {
    
  } else {
    
  }
  meanoutputfeaturename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meanoutputfeaturename);
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.BayesianProbitRegressor.meanOutputFeatureName)
}

// string varianceOutputFeatureName = 21;
inline void BayesianProbitRegressor::clear_varianceoutputfeaturename() {
  varianceoutputfeaturename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BayesianProbitRegressor::varianceoutputfeaturename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.varianceOutputFeatureName)
  return varianceoutputfeaturename_.GetNoArena();
}
inline void BayesianProbitRegressor::set_varianceoutputfeaturename(const ::std::string& value) {
  
  varianceoutputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.BayesianProbitRegressor.varianceOutputFeatureName)
}
#if LANG_CXX11
inline void BayesianProbitRegressor::set_varianceoutputfeaturename(::std::string&& value) {
  
  varianceoutputfeaturename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.BayesianProbitRegressor.varianceOutputFeatureName)
}
#endif
inline void BayesianProbitRegressor::set_varianceoutputfeaturename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  varianceoutputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.BayesianProbitRegressor.varianceOutputFeatureName)
}
inline void BayesianProbitRegressor::set_varianceoutputfeaturename(const char* value, size_t size) {
  
  varianceoutputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.BayesianProbitRegressor.varianceOutputFeatureName)
}
inline ::std::string* BayesianProbitRegressor::mutable_varianceoutputfeaturename() {
  
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.BayesianProbitRegressor.varianceOutputFeatureName)
  return varianceoutputfeaturename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BayesianProbitRegressor::release_varianceoutputfeaturename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.BayesianProbitRegressor.varianceOutputFeatureName)
  
  return varianceoutputfeaturename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BayesianProbitRegressor::set_allocated_varianceoutputfeaturename(::std::string* varianceoutputfeaturename) {
  if (varianceoutputfeaturename != NULL) {
    
  } else {
    
  }
  varianceoutputfeaturename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), varianceoutputfeaturename);
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.BayesianProbitRegressor.varianceOutputFeatureName)
}

// string pessimisticProbabilityOutputFeatureName = 22;
inline void BayesianProbitRegressor::clear_pessimisticprobabilityoutputfeaturename() {
  pessimisticprobabilityoutputfeaturename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BayesianProbitRegressor::pessimisticprobabilityoutputfeaturename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.pessimisticProbabilityOutputFeatureName)
  return pessimisticprobabilityoutputfeaturename_.GetNoArena();
}
inline void BayesianProbitRegressor::set_pessimisticprobabilityoutputfeaturename(const ::std::string& value) {
  
  pessimisticprobabilityoutputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.BayesianProbitRegressor.pessimisticProbabilityOutputFeatureName)
}
#if LANG_CXX11
inline void BayesianProbitRegressor::set_pessimisticprobabilityoutputfeaturename(::std::string&& value) {
  
  pessimisticprobabilityoutputfeaturename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.BayesianProbitRegressor.pessimisticProbabilityOutputFeatureName)
}
#endif
inline void BayesianProbitRegressor::set_pessimisticprobabilityoutputfeaturename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pessimisticprobabilityoutputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.BayesianProbitRegressor.pessimisticProbabilityOutputFeatureName)
}
inline void BayesianProbitRegressor::set_pessimisticprobabilityoutputfeaturename(const char* value, size_t size) {
  
  pessimisticprobabilityoutputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.BayesianProbitRegressor.pessimisticProbabilityOutputFeatureName)
}
inline ::std::string* BayesianProbitRegressor::mutable_pessimisticprobabilityoutputfeaturename() {
  
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.BayesianProbitRegressor.pessimisticProbabilityOutputFeatureName)
  return pessimisticprobabilityoutputfeaturename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BayesianProbitRegressor::release_pessimisticprobabilityoutputfeaturename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.BayesianProbitRegressor.pessimisticProbabilityOutputFeatureName)
  
  return pessimisticprobabilityoutputfeaturename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BayesianProbitRegressor::set_allocated_pessimisticprobabilityoutputfeaturename(::std::string* pessimisticprobabilityoutputfeaturename) {
  if (pessimisticprobabilityoutputfeaturename != NULL) {
    
  } else {
    
  }
  pessimisticprobabilityoutputfeaturename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pessimisticprobabilityoutputfeaturename);
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.BayesianProbitRegressor.pessimisticProbabilityOutputFeatureName)
}

// string sampledProbabilityOutputFeatureName = 23;
inline void BayesianProbitRegressor::clear_sampledprobabilityoutputfeaturename() {
  sampledprobabilityoutputfeaturename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BayesianProbitRegressor::sampledprobabilityoutputfeaturename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BayesianProbitRegressor.sampledProbabilityOutputFeatureName)
  return sampledprobabilityoutputfeaturename_.GetNoArena();
}
inline void BayesianProbitRegressor::set_sampledprobabilityoutputfeaturename(const ::std::string& value) {
  
  sampledprobabilityoutputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.BayesianProbitRegressor.sampledProbabilityOutputFeatureName)
}
#if LANG_CXX11
inline void BayesianProbitRegressor::set_sampledprobabilityoutputfeaturename(::std::string&& value) {
  
  sampledprobabilityoutputfeaturename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.BayesianProbitRegressor.sampledProbabilityOutputFeatureName)
}
#endif
inline void BayesianProbitRegressor::set_sampledprobabilityoutputfeaturename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sampledprobabilityoutputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.BayesianProbitRegressor.sampledProbabilityOutputFeatureName)
}
inline void BayesianProbitRegressor::set_sampledprobabilityoutputfeaturename(const char* value, size_t size) {
  
  sampledprobabilityoutputfeaturename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.BayesianProbitRegressor.sampledProbabilityOutputFeatureName)
}
inline ::std::string* BayesianProbitRegressor::mutable_sampledprobabilityoutputfeaturename() {
  
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.BayesianProbitRegressor.sampledProbabilityOutputFeatureName)
  return sampledprobabilityoutputfeaturename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BayesianProbitRegressor::release_sampledprobabilityoutputfeaturename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.BayesianProbitRegressor.sampledProbabilityOutputFeatureName)
  
  return sampledprobabilityoutputfeaturename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BayesianProbitRegressor::set_allocated_sampledprobabilityoutputfeaturename(::std::string* sampledprobabilityoutputfeaturename) {
  if (sampledprobabilityoutputfeaturename != NULL) {
    
  } else {
    
  }
  sampledprobabilityoutputfeaturename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sampledprobabilityoutputfeaturename);
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.BayesianProbitRegressor.sampledProbabilityOutputFeatureName)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BayesianProbitRegressor_2eproto__INCLUDED
