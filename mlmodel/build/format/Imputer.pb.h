// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Imputer.proto

#ifndef PROTOBUF_Imputer_2eproto__INCLUDED
#define PROTOBUF_Imputer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "DataStructures.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace CoreML {
namespace Specification {
class ArrayFeatureType;
class ArrayFeatureTypeDefaultTypeInternal;
extern ArrayFeatureTypeDefaultTypeInternal _ArrayFeatureType_default_instance_;
class ArrayFeatureType_EnumeratedShapes;
class ArrayFeatureType_EnumeratedShapesDefaultTypeInternal;
extern ArrayFeatureType_EnumeratedShapesDefaultTypeInternal _ArrayFeatureType_EnumeratedShapes_default_instance_;
class ArrayFeatureType_Shape;
class ArrayFeatureType_ShapeDefaultTypeInternal;
extern ArrayFeatureType_ShapeDefaultTypeInternal _ArrayFeatureType_Shape_default_instance_;
class ArrayFeatureType_ShapeRange;
class ArrayFeatureType_ShapeRangeDefaultTypeInternal;
extern ArrayFeatureType_ShapeRangeDefaultTypeInternal _ArrayFeatureType_ShapeRange_default_instance_;
class DictionaryFeatureType;
class DictionaryFeatureTypeDefaultTypeInternal;
extern DictionaryFeatureTypeDefaultTypeInternal _DictionaryFeatureType_default_instance_;
class DoubleFeatureType;
class DoubleFeatureTypeDefaultTypeInternal;
extern DoubleFeatureTypeDefaultTypeInternal _DoubleFeatureType_default_instance_;
class DoubleVector;
class DoubleVectorDefaultTypeInternal;
extern DoubleVectorDefaultTypeInternal _DoubleVector_default_instance_;
class FeatureType;
class FeatureTypeDefaultTypeInternal;
extern FeatureTypeDefaultTypeInternal _FeatureType_default_instance_;
class ImageFeatureType;
class ImageFeatureTypeDefaultTypeInternal;
extern ImageFeatureTypeDefaultTypeInternal _ImageFeatureType_default_instance_;
class ImageFeatureType_EnumeratedImageSizes;
class ImageFeatureType_EnumeratedImageSizesDefaultTypeInternal;
extern ImageFeatureType_EnumeratedImageSizesDefaultTypeInternal _ImageFeatureType_EnumeratedImageSizes_default_instance_;
class ImageFeatureType_ImageSize;
class ImageFeatureType_ImageSizeDefaultTypeInternal;
extern ImageFeatureType_ImageSizeDefaultTypeInternal _ImageFeatureType_ImageSize_default_instance_;
class ImageFeatureType_ImageSizeRange;
class ImageFeatureType_ImageSizeRangeDefaultTypeInternal;
extern ImageFeatureType_ImageSizeRangeDefaultTypeInternal _ImageFeatureType_ImageSizeRange_default_instance_;
class Imputer;
class ImputerDefaultTypeInternal;
extern ImputerDefaultTypeInternal _Imputer_default_instance_;
class Int64FeatureType;
class Int64FeatureTypeDefaultTypeInternal;
extern Int64FeatureTypeDefaultTypeInternal _Int64FeatureType_default_instance_;
class Int64ToDoubleMap;
class Int64ToDoubleMapDefaultTypeInternal;
extern Int64ToDoubleMapDefaultTypeInternal _Int64ToDoubleMap_default_instance_;
class Int64ToDoubleMap_MapEntry;
class Int64ToDoubleMap_MapEntryDefaultTypeInternal;
extern Int64ToDoubleMap_MapEntryDefaultTypeInternal _Int64ToDoubleMap_MapEntry_default_instance_;
class Int64ToStringMap;
class Int64ToStringMapDefaultTypeInternal;
extern Int64ToStringMapDefaultTypeInternal _Int64ToStringMap_default_instance_;
class Int64ToStringMap_MapEntry;
class Int64ToStringMap_MapEntryDefaultTypeInternal;
extern Int64ToStringMap_MapEntryDefaultTypeInternal _Int64ToStringMap_MapEntry_default_instance_;
class Int64Vector;
class Int64VectorDefaultTypeInternal;
extern Int64VectorDefaultTypeInternal _Int64Vector_default_instance_;
class SequenceFeatureType;
class SequenceFeatureTypeDefaultTypeInternal;
extern SequenceFeatureTypeDefaultTypeInternal _SequenceFeatureType_default_instance_;
class SizeRange;
class SizeRangeDefaultTypeInternal;
extern SizeRangeDefaultTypeInternal _SizeRange_default_instance_;
class StringFeatureType;
class StringFeatureTypeDefaultTypeInternal;
extern StringFeatureTypeDefaultTypeInternal _StringFeatureType_default_instance_;
class StringToDoubleMap;
class StringToDoubleMapDefaultTypeInternal;
extern StringToDoubleMapDefaultTypeInternal _StringToDoubleMap_default_instance_;
class StringToDoubleMap_MapEntry;
class StringToDoubleMap_MapEntryDefaultTypeInternal;
extern StringToDoubleMap_MapEntryDefaultTypeInternal _StringToDoubleMap_MapEntry_default_instance_;
class StringToInt64Map;
class StringToInt64MapDefaultTypeInternal;
extern StringToInt64MapDefaultTypeInternal _StringToInt64Map_default_instance_;
class StringToInt64Map_MapEntry;
class StringToInt64Map_MapEntryDefaultTypeInternal;
extern StringToInt64Map_MapEntryDefaultTypeInternal _StringToInt64Map_MapEntry_default_instance_;
class StringVector;
class StringVectorDefaultTypeInternal;
extern StringVectorDefaultTypeInternal _StringVector_default_instance_;
}  // namespace Specification
}  // namespace CoreML

namespace CoreML {
namespace Specification {

namespace protobuf_Imputer_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Imputer_2eproto

// ===================================================================

class Imputer : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.Imputer) */ {
 public:
  Imputer();
  virtual ~Imputer();

  Imputer(const Imputer& from);

  inline Imputer& operator=(const Imputer& from) {
    CopyFrom(from);
    return *this;
  }

  static const Imputer& default_instance();

  enum ImputedValueCase {
    kImputedDoubleValue = 1,
    kImputedInt64Value = 2,
    kImputedStringValue = 3,
    kImputedDoubleArray = 4,
    kImputedInt64Array = 5,
    kImputedStringDictionary = 6,
    kImputedInt64Dictionary = 7,
    IMPUTEDVALUE_NOT_SET = 0,
  };

  enum ReplaceValueCase {
    kReplaceDoubleValue = 11,
    kReplaceInt64Value = 12,
    kReplaceStringValue = 13,
    REPLACEVALUE_NOT_SET = 0,
  };

  static inline const Imputer* internal_default_instance() {
    return reinterpret_cast<const Imputer*>(
               &_Imputer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Imputer* other);

  // implements Message ----------------------------------------------

  inline Imputer* New() const PROTOBUF_FINAL { return New(NULL); }

  Imputer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Imputer& from);
  void MergeFrom(const Imputer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Imputer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double imputedDoubleValue = 1;
  private:
  bool has_imputeddoublevalue() const;
  public:
  void clear_imputeddoublevalue();
  static const int kImputedDoubleValueFieldNumber = 1;
  double imputeddoublevalue() const;
  void set_imputeddoublevalue(double value);

  // int64 imputedInt64Value = 2;
  private:
  bool has_imputedint64value() const;
  public:
  void clear_imputedint64value();
  static const int kImputedInt64ValueFieldNumber = 2;
  ::google::protobuf::int64 imputedint64value() const;
  void set_imputedint64value(::google::protobuf::int64 value);

  // string imputedStringValue = 3;
  private:
  bool has_imputedstringvalue() const;
  public:
  void clear_imputedstringvalue();
  static const int kImputedStringValueFieldNumber = 3;
  const ::std::string& imputedstringvalue() const;
  void set_imputedstringvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_imputedstringvalue(::std::string&& value);
  #endif
  void set_imputedstringvalue(const char* value);
  void set_imputedstringvalue(const char* value, size_t size);
  ::std::string* mutable_imputedstringvalue();
  ::std::string* release_imputedstringvalue();
  void set_allocated_imputedstringvalue(::std::string* imputedstringvalue);

  // .CoreML.Specification.DoubleVector imputedDoubleArray = 4;
  bool has_imputeddoublearray() const;
  void clear_imputeddoublearray();
  static const int kImputedDoubleArrayFieldNumber = 4;
  const ::CoreML::Specification::DoubleVector& imputeddoublearray() const;
  ::CoreML::Specification::DoubleVector* mutable_imputeddoublearray();
  ::CoreML::Specification::DoubleVector* release_imputeddoublearray();
  void set_allocated_imputeddoublearray(::CoreML::Specification::DoubleVector* imputeddoublearray);

  // .CoreML.Specification.Int64Vector imputedInt64Array = 5;
  bool has_imputedint64array() const;
  void clear_imputedint64array();
  static const int kImputedInt64ArrayFieldNumber = 5;
  const ::CoreML::Specification::Int64Vector& imputedint64array() const;
  ::CoreML::Specification::Int64Vector* mutable_imputedint64array();
  ::CoreML::Specification::Int64Vector* release_imputedint64array();
  void set_allocated_imputedint64array(::CoreML::Specification::Int64Vector* imputedint64array);

  // .CoreML.Specification.StringToDoubleMap imputedStringDictionary = 6;
  bool has_imputedstringdictionary() const;
  void clear_imputedstringdictionary();
  static const int kImputedStringDictionaryFieldNumber = 6;
  const ::CoreML::Specification::StringToDoubleMap& imputedstringdictionary() const;
  ::CoreML::Specification::StringToDoubleMap* mutable_imputedstringdictionary();
  ::CoreML::Specification::StringToDoubleMap* release_imputedstringdictionary();
  void set_allocated_imputedstringdictionary(::CoreML::Specification::StringToDoubleMap* imputedstringdictionary);

  // .CoreML.Specification.Int64ToDoubleMap imputedInt64Dictionary = 7;
  bool has_imputedint64dictionary() const;
  void clear_imputedint64dictionary();
  static const int kImputedInt64DictionaryFieldNumber = 7;
  const ::CoreML::Specification::Int64ToDoubleMap& imputedint64dictionary() const;
  ::CoreML::Specification::Int64ToDoubleMap* mutable_imputedint64dictionary();
  ::CoreML::Specification::Int64ToDoubleMap* release_imputedint64dictionary();
  void set_allocated_imputedint64dictionary(::CoreML::Specification::Int64ToDoubleMap* imputedint64dictionary);

  // double replaceDoubleValue = 11;
  private:
  bool has_replacedoublevalue() const;
  public:
  void clear_replacedoublevalue();
  static const int kReplaceDoubleValueFieldNumber = 11;
  double replacedoublevalue() const;
  void set_replacedoublevalue(double value);

  // int64 replaceInt64Value = 12;
  private:
  bool has_replaceint64value() const;
  public:
  void clear_replaceint64value();
  static const int kReplaceInt64ValueFieldNumber = 12;
  ::google::protobuf::int64 replaceint64value() const;
  void set_replaceint64value(::google::protobuf::int64 value);

  // string replaceStringValue = 13;
  private:
  bool has_replacestringvalue() const;
  public:
  void clear_replacestringvalue();
  static const int kReplaceStringValueFieldNumber = 13;
  const ::std::string& replacestringvalue() const;
  void set_replacestringvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_replacestringvalue(::std::string&& value);
  #endif
  void set_replacestringvalue(const char* value);
  void set_replacestringvalue(const char* value, size_t size);
  ::std::string* mutable_replacestringvalue();
  ::std::string* release_replacestringvalue();
  void set_allocated_replacestringvalue(::std::string* replacestringvalue);

  ImputedValueCase ImputedValue_case() const;
  ReplaceValueCase ReplaceValue_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.Imputer)
 private:
  void set_has_imputeddoublevalue();
  void set_has_imputedint64value();
  void set_has_imputedstringvalue();
  void set_has_imputeddoublearray();
  void set_has_imputedint64array();
  void set_has_imputedstringdictionary();
  void set_has_imputedint64dictionary();
  void set_has_replacedoublevalue();
  void set_has_replaceint64value();
  void set_has_replacestringvalue();

  inline bool has_ImputedValue() const;
  void clear_ImputedValue();
  inline void clear_has_ImputedValue();

  inline bool has_ReplaceValue() const;
  void clear_ReplaceValue();
  inline void clear_has_ReplaceValue();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  union ImputedValueUnion {
    ImputedValueUnion() {}
    double imputeddoublevalue_;
    ::google::protobuf::int64 imputedint64value_;
    ::google::protobuf::internal::ArenaStringPtr imputedstringvalue_;
    ::CoreML::Specification::DoubleVector* imputeddoublearray_;
    ::CoreML::Specification::Int64Vector* imputedint64array_;
    ::CoreML::Specification::StringToDoubleMap* imputedstringdictionary_;
    ::CoreML::Specification::Int64ToDoubleMap* imputedint64dictionary_;
  } ImputedValue_;
  union ReplaceValueUnion {
    ReplaceValueUnion() {}
    double replacedoublevalue_;
    ::google::protobuf::int64 replaceint64value_;
    ::google::protobuf::internal::ArenaStringPtr replacestringvalue_;
  } ReplaceValue_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct protobuf_Imputer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Imputer

// double imputedDoubleValue = 1;
inline bool Imputer::has_imputeddoublevalue() const {
  return ImputedValue_case() == kImputedDoubleValue;
}
inline void Imputer::set_has_imputeddoublevalue() {
  _oneof_case_[0] = kImputedDoubleValue;
}
inline void Imputer::clear_imputeddoublevalue() {
  if (has_imputeddoublevalue()) {
    ImputedValue_.imputeddoublevalue_ = 0;
    clear_has_ImputedValue();
  }
}
inline double Imputer::imputeddoublevalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.imputedDoubleValue)
  if (has_imputeddoublevalue()) {
    return ImputedValue_.imputeddoublevalue_;
  }
  return 0;
}
inline void Imputer::set_imputeddoublevalue(double value) {
  if (!has_imputeddoublevalue()) {
    clear_ImputedValue();
    set_has_imputeddoublevalue();
  }
  ImputedValue_.imputeddoublevalue_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.imputedDoubleValue)
}

// int64 imputedInt64Value = 2;
inline bool Imputer::has_imputedint64value() const {
  return ImputedValue_case() == kImputedInt64Value;
}
inline void Imputer::set_has_imputedint64value() {
  _oneof_case_[0] = kImputedInt64Value;
}
inline void Imputer::clear_imputedint64value() {
  if (has_imputedint64value()) {
    ImputedValue_.imputedint64value_ = GOOGLE_LONGLONG(0);
    clear_has_ImputedValue();
  }
}
inline ::google::protobuf::int64 Imputer::imputedint64value() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.imputedInt64Value)
  if (has_imputedint64value()) {
    return ImputedValue_.imputedint64value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Imputer::set_imputedint64value(::google::protobuf::int64 value) {
  if (!has_imputedint64value()) {
    clear_ImputedValue();
    set_has_imputedint64value();
  }
  ImputedValue_.imputedint64value_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.imputedInt64Value)
}

// string imputedStringValue = 3;
inline bool Imputer::has_imputedstringvalue() const {
  return ImputedValue_case() == kImputedStringValue;
}
inline void Imputer::set_has_imputedstringvalue() {
  _oneof_case_[0] = kImputedStringValue;
}
inline void Imputer::clear_imputedstringvalue() {
  if (has_imputedstringvalue()) {
    ImputedValue_.imputedstringvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_ImputedValue();
  }
}
inline const ::std::string& Imputer::imputedstringvalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.imputedStringValue)
  if (has_imputedstringvalue()) {
    return ImputedValue_.imputedstringvalue_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Imputer::set_imputedstringvalue(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.imputedStringValue)
  if (!has_imputedstringvalue()) {
    clear_ImputedValue();
    set_has_imputedstringvalue();
    ImputedValue_.imputedstringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ImputedValue_.imputedstringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.imputedStringValue)
}
#if LANG_CXX11
inline void Imputer::set_imputedstringvalue(::std::string&& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.imputedStringValue)
  if (!has_imputedstringvalue()) {
    clear_ImputedValue();
    set_has_imputedstringvalue();
    ImputedValue_.imputedstringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ImputedValue_.imputedstringvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.Imputer.imputedStringValue)
}
#endif
inline void Imputer::set_imputedstringvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_imputedstringvalue()) {
    clear_ImputedValue();
    set_has_imputedstringvalue();
    ImputedValue_.imputedstringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ImputedValue_.imputedstringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.Imputer.imputedStringValue)
}
inline void Imputer::set_imputedstringvalue(const char* value, size_t size) {
  if (!has_imputedstringvalue()) {
    clear_ImputedValue();
    set_has_imputedstringvalue();
    ImputedValue_.imputedstringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ImputedValue_.imputedstringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.Imputer.imputedStringValue)
}
inline ::std::string* Imputer::mutable_imputedstringvalue() {
  if (!has_imputedstringvalue()) {
    clear_ImputedValue();
    set_has_imputedstringvalue();
    ImputedValue_.imputedstringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Imputer.imputedStringValue)
  return ImputedValue_.imputedstringvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Imputer::release_imputedstringvalue() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Imputer.imputedStringValue)
  if (has_imputedstringvalue()) {
    clear_has_ImputedValue();
    return ImputedValue_.imputedstringvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Imputer::set_allocated_imputedstringvalue(::std::string* imputedstringvalue) {
  if (!has_imputedstringvalue()) {
    ImputedValue_.imputedstringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_ImputedValue();
  if (imputedstringvalue != NULL) {
    set_has_imputedstringvalue();
    ImputedValue_.imputedstringvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        imputedstringvalue);
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Imputer.imputedStringValue)
}

// .CoreML.Specification.DoubleVector imputedDoubleArray = 4;
inline bool Imputer::has_imputeddoublearray() const {
  return ImputedValue_case() == kImputedDoubleArray;
}
inline void Imputer::set_has_imputeddoublearray() {
  _oneof_case_[0] = kImputedDoubleArray;
}
inline void Imputer::clear_imputeddoublearray() {
  if (has_imputeddoublearray()) {
    delete ImputedValue_.imputeddoublearray_;
    clear_has_ImputedValue();
  }
}
inline  const ::CoreML::Specification::DoubleVector& Imputer::imputeddoublearray() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.imputedDoubleArray)
  return has_imputeddoublearray()
      ? *ImputedValue_.imputeddoublearray_
      : ::CoreML::Specification::DoubleVector::default_instance();
}
inline ::CoreML::Specification::DoubleVector* Imputer::mutable_imputeddoublearray() {
  if (!has_imputeddoublearray()) {
    clear_ImputedValue();
    set_has_imputeddoublearray();
    ImputedValue_.imputeddoublearray_ = new ::CoreML::Specification::DoubleVector;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Imputer.imputedDoubleArray)
  return ImputedValue_.imputeddoublearray_;
}
inline ::CoreML::Specification::DoubleVector* Imputer::release_imputeddoublearray() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Imputer.imputedDoubleArray)
  if (has_imputeddoublearray()) {
    clear_has_ImputedValue();
    ::CoreML::Specification::DoubleVector* temp = ImputedValue_.imputeddoublearray_;
    ImputedValue_.imputeddoublearray_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Imputer::set_allocated_imputeddoublearray(::CoreML::Specification::DoubleVector* imputeddoublearray) {
  clear_ImputedValue();
  if (imputeddoublearray) {
    set_has_imputeddoublearray();
    ImputedValue_.imputeddoublearray_ = imputeddoublearray;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Imputer.imputedDoubleArray)
}

// .CoreML.Specification.Int64Vector imputedInt64Array = 5;
inline bool Imputer::has_imputedint64array() const {
  return ImputedValue_case() == kImputedInt64Array;
}
inline void Imputer::set_has_imputedint64array() {
  _oneof_case_[0] = kImputedInt64Array;
}
inline void Imputer::clear_imputedint64array() {
  if (has_imputedint64array()) {
    delete ImputedValue_.imputedint64array_;
    clear_has_ImputedValue();
  }
}
inline  const ::CoreML::Specification::Int64Vector& Imputer::imputedint64array() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.imputedInt64Array)
  return has_imputedint64array()
      ? *ImputedValue_.imputedint64array_
      : ::CoreML::Specification::Int64Vector::default_instance();
}
inline ::CoreML::Specification::Int64Vector* Imputer::mutable_imputedint64array() {
  if (!has_imputedint64array()) {
    clear_ImputedValue();
    set_has_imputedint64array();
    ImputedValue_.imputedint64array_ = new ::CoreML::Specification::Int64Vector;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Imputer.imputedInt64Array)
  return ImputedValue_.imputedint64array_;
}
inline ::CoreML::Specification::Int64Vector* Imputer::release_imputedint64array() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Imputer.imputedInt64Array)
  if (has_imputedint64array()) {
    clear_has_ImputedValue();
    ::CoreML::Specification::Int64Vector* temp = ImputedValue_.imputedint64array_;
    ImputedValue_.imputedint64array_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Imputer::set_allocated_imputedint64array(::CoreML::Specification::Int64Vector* imputedint64array) {
  clear_ImputedValue();
  if (imputedint64array) {
    set_has_imputedint64array();
    ImputedValue_.imputedint64array_ = imputedint64array;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Imputer.imputedInt64Array)
}

// .CoreML.Specification.StringToDoubleMap imputedStringDictionary = 6;
inline bool Imputer::has_imputedstringdictionary() const {
  return ImputedValue_case() == kImputedStringDictionary;
}
inline void Imputer::set_has_imputedstringdictionary() {
  _oneof_case_[0] = kImputedStringDictionary;
}
inline void Imputer::clear_imputedstringdictionary() {
  if (has_imputedstringdictionary()) {
    delete ImputedValue_.imputedstringdictionary_;
    clear_has_ImputedValue();
  }
}
inline  const ::CoreML::Specification::StringToDoubleMap& Imputer::imputedstringdictionary() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.imputedStringDictionary)
  return has_imputedstringdictionary()
      ? *ImputedValue_.imputedstringdictionary_
      : ::CoreML::Specification::StringToDoubleMap::default_instance();
}
inline ::CoreML::Specification::StringToDoubleMap* Imputer::mutable_imputedstringdictionary() {
  if (!has_imputedstringdictionary()) {
    clear_ImputedValue();
    set_has_imputedstringdictionary();
    ImputedValue_.imputedstringdictionary_ = new ::CoreML::Specification::StringToDoubleMap;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Imputer.imputedStringDictionary)
  return ImputedValue_.imputedstringdictionary_;
}
inline ::CoreML::Specification::StringToDoubleMap* Imputer::release_imputedstringdictionary() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Imputer.imputedStringDictionary)
  if (has_imputedstringdictionary()) {
    clear_has_ImputedValue();
    ::CoreML::Specification::StringToDoubleMap* temp = ImputedValue_.imputedstringdictionary_;
    ImputedValue_.imputedstringdictionary_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Imputer::set_allocated_imputedstringdictionary(::CoreML::Specification::StringToDoubleMap* imputedstringdictionary) {
  clear_ImputedValue();
  if (imputedstringdictionary) {
    set_has_imputedstringdictionary();
    ImputedValue_.imputedstringdictionary_ = imputedstringdictionary;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Imputer.imputedStringDictionary)
}

// .CoreML.Specification.Int64ToDoubleMap imputedInt64Dictionary = 7;
inline bool Imputer::has_imputedint64dictionary() const {
  return ImputedValue_case() == kImputedInt64Dictionary;
}
inline void Imputer::set_has_imputedint64dictionary() {
  _oneof_case_[0] = kImputedInt64Dictionary;
}
inline void Imputer::clear_imputedint64dictionary() {
  if (has_imputedint64dictionary()) {
    delete ImputedValue_.imputedint64dictionary_;
    clear_has_ImputedValue();
  }
}
inline  const ::CoreML::Specification::Int64ToDoubleMap& Imputer::imputedint64dictionary() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.imputedInt64Dictionary)
  return has_imputedint64dictionary()
      ? *ImputedValue_.imputedint64dictionary_
      : ::CoreML::Specification::Int64ToDoubleMap::default_instance();
}
inline ::CoreML::Specification::Int64ToDoubleMap* Imputer::mutable_imputedint64dictionary() {
  if (!has_imputedint64dictionary()) {
    clear_ImputedValue();
    set_has_imputedint64dictionary();
    ImputedValue_.imputedint64dictionary_ = new ::CoreML::Specification::Int64ToDoubleMap;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Imputer.imputedInt64Dictionary)
  return ImputedValue_.imputedint64dictionary_;
}
inline ::CoreML::Specification::Int64ToDoubleMap* Imputer::release_imputedint64dictionary() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Imputer.imputedInt64Dictionary)
  if (has_imputedint64dictionary()) {
    clear_has_ImputedValue();
    ::CoreML::Specification::Int64ToDoubleMap* temp = ImputedValue_.imputedint64dictionary_;
    ImputedValue_.imputedint64dictionary_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Imputer::set_allocated_imputedint64dictionary(::CoreML::Specification::Int64ToDoubleMap* imputedint64dictionary) {
  clear_ImputedValue();
  if (imputedint64dictionary) {
    set_has_imputedint64dictionary();
    ImputedValue_.imputedint64dictionary_ = imputedint64dictionary;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Imputer.imputedInt64Dictionary)
}

// double replaceDoubleValue = 11;
inline bool Imputer::has_replacedoublevalue() const {
  return ReplaceValue_case() == kReplaceDoubleValue;
}
inline void Imputer::set_has_replacedoublevalue() {
  _oneof_case_[1] = kReplaceDoubleValue;
}
inline void Imputer::clear_replacedoublevalue() {
  if (has_replacedoublevalue()) {
    ReplaceValue_.replacedoublevalue_ = 0;
    clear_has_ReplaceValue();
  }
}
inline double Imputer::replacedoublevalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.replaceDoubleValue)
  if (has_replacedoublevalue()) {
    return ReplaceValue_.replacedoublevalue_;
  }
  return 0;
}
inline void Imputer::set_replacedoublevalue(double value) {
  if (!has_replacedoublevalue()) {
    clear_ReplaceValue();
    set_has_replacedoublevalue();
  }
  ReplaceValue_.replacedoublevalue_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.replaceDoubleValue)
}

// int64 replaceInt64Value = 12;
inline bool Imputer::has_replaceint64value() const {
  return ReplaceValue_case() == kReplaceInt64Value;
}
inline void Imputer::set_has_replaceint64value() {
  _oneof_case_[1] = kReplaceInt64Value;
}
inline void Imputer::clear_replaceint64value() {
  if (has_replaceint64value()) {
    ReplaceValue_.replaceint64value_ = GOOGLE_LONGLONG(0);
    clear_has_ReplaceValue();
  }
}
inline ::google::protobuf::int64 Imputer::replaceint64value() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.replaceInt64Value)
  if (has_replaceint64value()) {
    return ReplaceValue_.replaceint64value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Imputer::set_replaceint64value(::google::protobuf::int64 value) {
  if (!has_replaceint64value()) {
    clear_ReplaceValue();
    set_has_replaceint64value();
  }
  ReplaceValue_.replaceint64value_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.replaceInt64Value)
}

// string replaceStringValue = 13;
inline bool Imputer::has_replacestringvalue() const {
  return ReplaceValue_case() == kReplaceStringValue;
}
inline void Imputer::set_has_replacestringvalue() {
  _oneof_case_[1] = kReplaceStringValue;
}
inline void Imputer::clear_replacestringvalue() {
  if (has_replacestringvalue()) {
    ReplaceValue_.replacestringvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_ReplaceValue();
  }
}
inline const ::std::string& Imputer::replacestringvalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.replaceStringValue)
  if (has_replacestringvalue()) {
    return ReplaceValue_.replacestringvalue_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Imputer::set_replacestringvalue(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.replaceStringValue)
  if (!has_replacestringvalue()) {
    clear_ReplaceValue();
    set_has_replacestringvalue();
    ReplaceValue_.replacestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ReplaceValue_.replacestringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.replaceStringValue)
}
#if LANG_CXX11
inline void Imputer::set_replacestringvalue(::std::string&& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.replaceStringValue)
  if (!has_replacestringvalue()) {
    clear_ReplaceValue();
    set_has_replacestringvalue();
    ReplaceValue_.replacestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ReplaceValue_.replacestringvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.Imputer.replaceStringValue)
}
#endif
inline void Imputer::set_replacestringvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_replacestringvalue()) {
    clear_ReplaceValue();
    set_has_replacestringvalue();
    ReplaceValue_.replacestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ReplaceValue_.replacestringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.Imputer.replaceStringValue)
}
inline void Imputer::set_replacestringvalue(const char* value, size_t size) {
  if (!has_replacestringvalue()) {
    clear_ReplaceValue();
    set_has_replacestringvalue();
    ReplaceValue_.replacestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ReplaceValue_.replacestringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.Imputer.replaceStringValue)
}
inline ::std::string* Imputer::mutable_replacestringvalue() {
  if (!has_replacestringvalue()) {
    clear_ReplaceValue();
    set_has_replacestringvalue();
    ReplaceValue_.replacestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Imputer.replaceStringValue)
  return ReplaceValue_.replacestringvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Imputer::release_replacestringvalue() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Imputer.replaceStringValue)
  if (has_replacestringvalue()) {
    clear_has_ReplaceValue();
    return ReplaceValue_.replacestringvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Imputer::set_allocated_replacestringvalue(::std::string* replacestringvalue) {
  if (!has_replacestringvalue()) {
    ReplaceValue_.replacestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_ReplaceValue();
  if (replacestringvalue != NULL) {
    set_has_replacestringvalue();
    ReplaceValue_.replacestringvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        replacestringvalue);
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Imputer.replaceStringValue)
}

inline bool Imputer::has_ImputedValue() const {
  return ImputedValue_case() != IMPUTEDVALUE_NOT_SET;
}
inline void Imputer::clear_has_ImputedValue() {
  _oneof_case_[0] = IMPUTEDVALUE_NOT_SET;
}
inline bool Imputer::has_ReplaceValue() const {
  return ReplaceValue_case() != REPLACEVALUE_NOT_SET;
}
inline void Imputer::clear_has_ReplaceValue() {
  _oneof_case_[1] = REPLACEVALUE_NOT_SET;
}
inline Imputer::ImputedValueCase Imputer::ImputedValue_case() const {
  return Imputer::ImputedValueCase(_oneof_case_[0]);
}
inline Imputer::ReplaceValueCase Imputer::ReplaceValue_case() const {
  return Imputer::ReplaceValueCase(_oneof_case_[1]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Imputer_2eproto__INCLUDED
