// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AudioFeaturePrint.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AudioFeaturePrint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace CoreML {
namespace Specification {
namespace CoreMLModels {
class AudioFeaturePrint_SoundDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioFeaturePrint_Sound> {
} _AudioFeaturePrint_Sound_default_instance_;
class AudioFeaturePrintDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioFeaturePrint> {
  public:
  const ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* sound_;
} _AudioFeaturePrint_default_instance_;

namespace protobuf_AudioFeaturePrint_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _AudioFeaturePrint_Sound_default_instance_.Shutdown();
  _AudioFeaturePrint_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AudioFeaturePrint_Sound_default_instance_.DefaultConstruct();
  _AudioFeaturePrint_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_AudioFeaturePrint_2eproto

bool AudioFeaturePrint_Sound_SoundVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AudioFeaturePrint_Sound_SoundVersion AudioFeaturePrint_Sound::SOUND_VERSION_INVALID;
const AudioFeaturePrint_Sound_SoundVersion AudioFeaturePrint_Sound::SOUND_VERSION_1;
const AudioFeaturePrint_Sound_SoundVersion AudioFeaturePrint_Sound::SoundVersion_MIN;
const AudioFeaturePrint_Sound_SoundVersion AudioFeaturePrint_Sound::SoundVersion_MAX;
const int AudioFeaturePrint_Sound::SoundVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioFeaturePrint_Sound::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioFeaturePrint_Sound::AudioFeaturePrint_Sound()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_AudioFeaturePrint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
}
AudioFeaturePrint_Sound::AudioFeaturePrint_Sound(const AudioFeaturePrint_Sound& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
}

void AudioFeaturePrint_Sound::SharedCtor() {
  version_ = 0;
  _cached_size_ = 0;
}

AudioFeaturePrint_Sound::~AudioFeaturePrint_Sound() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  SharedDtor();
}

void AudioFeaturePrint_Sound::SharedDtor() {
}

void AudioFeaturePrint_Sound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioFeaturePrint_Sound& AudioFeaturePrint_Sound::default_instance() {
  protobuf_AudioFeaturePrint_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioFeaturePrint_Sound* AudioFeaturePrint_Sound::New(::google::protobuf::Arena* arena) const {
  AudioFeaturePrint_Sound* n = new AudioFeaturePrint_Sound;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioFeaturePrint_Sound::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  version_ = 0;
}

bool AudioFeaturePrint_Sound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound.SoundVersion version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_version(static_cast< ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound_SoundVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  return false;
#undef DO_
}

void AudioFeaturePrint_Sound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound.SoundVersion version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
}

size_t AudioFeaturePrint_Sound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  size_t total_size = 0;

  // .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound.SoundVersion version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioFeaturePrint_Sound::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioFeaturePrint_Sound*>(&from));
}

void AudioFeaturePrint_Sound::MergeFrom(const AudioFeaturePrint_Sound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version() != 0) {
    set_version(from.version());
  }
}

void AudioFeaturePrint_Sound::CopyFrom(const AudioFeaturePrint_Sound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFeaturePrint_Sound::IsInitialized() const {
  return true;
}

void AudioFeaturePrint_Sound::Swap(AudioFeaturePrint_Sound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioFeaturePrint_Sound::InternalSwap(AudioFeaturePrint_Sound* other) {
  std::swap(version_, other->version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AudioFeaturePrint_Sound::GetTypeName() const {
  return "CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioFeaturePrint_Sound

// .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound.SoundVersion version = 1;
void AudioFeaturePrint_Sound::clear_version() {
  version_ = 0;
}
::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound_SoundVersion AudioFeaturePrint_Sound::version() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound.version)
  return static_cast< ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound_SoundVersion >(version_);
}
void AudioFeaturePrint_Sound::set_version(::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound_SoundVersion value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioFeaturePrint::kSoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioFeaturePrint::AudioFeaturePrint()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_AudioFeaturePrint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
}
AudioFeaturePrint::AudioFeaturePrint(const AudioFeaturePrint& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_AudioFeaturePrintType();
  switch (from.AudioFeaturePrintType_case()) {
    case kSound: {
      mutable_sound()->::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::MergeFrom(from.sound());
      break;
    }
    case AUDIOFEATUREPRINTTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
}

void AudioFeaturePrint::SharedCtor() {
  clear_has_AudioFeaturePrintType();
  _cached_size_ = 0;
}

AudioFeaturePrint::~AudioFeaturePrint() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  SharedDtor();
}

void AudioFeaturePrint::SharedDtor() {
  if (has_AudioFeaturePrintType()) {
    clear_AudioFeaturePrintType();
  }
}

void AudioFeaturePrint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioFeaturePrint& AudioFeaturePrint::default_instance() {
  protobuf_AudioFeaturePrint_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioFeaturePrint* AudioFeaturePrint::New(::google::protobuf::Arena* arena) const {
  AudioFeaturePrint* n = new AudioFeaturePrint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioFeaturePrint::clear_AudioFeaturePrintType() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  switch (AudioFeaturePrintType_case()) {
    case kSound: {
      delete AudioFeaturePrintType_.sound_;
      break;
    }
    case AUDIOFEATUREPRINTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AUDIOFEATUREPRINTTYPE_NOT_SET;
}


void AudioFeaturePrint::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  clear_AudioFeaturePrintType();
}

bool AudioFeaturePrint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound sound = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  return false;
#undef DO_
}

void AudioFeaturePrint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound sound = 20;
  if (has_sound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, *AudioFeaturePrintType_.sound_, output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
}

size_t AudioFeaturePrint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  size_t total_size = 0;

  switch (AudioFeaturePrintType_case()) {
    // .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound sound = 20;
    case kSound: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *AudioFeaturePrintType_.sound_);
      break;
    }
    case AUDIOFEATUREPRINTTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioFeaturePrint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioFeaturePrint*>(&from));
}

void AudioFeaturePrint::MergeFrom(const AudioFeaturePrint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.AudioFeaturePrintType_case()) {
    case kSound: {
      mutable_sound()->::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::MergeFrom(from.sound());
      break;
    }
    case AUDIOFEATUREPRINTTYPE_NOT_SET: {
      break;
    }
  }
}

void AudioFeaturePrint::CopyFrom(const AudioFeaturePrint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFeaturePrint::IsInitialized() const {
  return true;
}

void AudioFeaturePrint::Swap(AudioFeaturePrint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioFeaturePrint::InternalSwap(AudioFeaturePrint* other) {
  std::swap(AudioFeaturePrintType_, other->AudioFeaturePrintType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AudioFeaturePrint::GetTypeName() const {
  return "CoreML.Specification.CoreMLModels.AudioFeaturePrint";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioFeaturePrint

// .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound sound = 20;
bool AudioFeaturePrint::has_sound() const {
  return AudioFeaturePrintType_case() == kSound;
}
void AudioFeaturePrint::set_has_sound() {
  _oneof_case_[0] = kSound;
}
void AudioFeaturePrint::clear_sound() {
  if (has_sound()) {
    delete AudioFeaturePrintType_.sound_;
    clear_has_AudioFeaturePrintType();
  }
}
 const ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound& AudioFeaturePrint::sound() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CoreMLModels.AudioFeaturePrint.sound)
  return has_sound()
      ? *AudioFeaturePrintType_.sound_
      : ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::default_instance();
}
::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* AudioFeaturePrint::mutable_sound() {
  if (!has_sound()) {
    clear_AudioFeaturePrintType();
    set_has_sound();
    AudioFeaturePrintType_.sound_ = new ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CoreMLModels.AudioFeaturePrint.sound)
  return AudioFeaturePrintType_.sound_;
}
::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* AudioFeaturePrint::release_sound() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CoreMLModels.AudioFeaturePrint.sound)
  if (has_sound()) {
    clear_has_AudioFeaturePrintType();
    ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* temp = AudioFeaturePrintType_.sound_;
    AudioFeaturePrintType_.sound_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AudioFeaturePrint::set_allocated_sound(::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* sound) {
  clear_AudioFeaturePrintType();
  if (sound) {
    set_has_sound();
    AudioFeaturePrintType_.sound_ = sound;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.CoreMLModels.AudioFeaturePrint.sound)
}

bool AudioFeaturePrint::has_AudioFeaturePrintType() const {
  return AudioFeaturePrintType_case() != AUDIOFEATUREPRINTTYPE_NOT_SET;
}
void AudioFeaturePrint::clear_has_AudioFeaturePrintType() {
  _oneof_case_[0] = AUDIOFEATUREPRINTTYPE_NOT_SET;
}
AudioFeaturePrint::AudioFeaturePrintTypeCase AudioFeaturePrint::AudioFeaturePrintType_case() const {
  return AudioFeaturePrint::AudioFeaturePrintTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreMLModels
}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)
