// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SoundAnalysisPreprocessing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SoundAnalysisPreprocessing_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SoundAnalysisPreprocessing_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SoundAnalysisPreprocessing_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SoundAnalysisPreprocessing_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace CoreML {
namespace Specification {
namespace CoreMLModels {
class SoundAnalysisPreprocessing;
struct SoundAnalysisPreprocessingDefaultTypeInternal;
extern SoundAnalysisPreprocessingDefaultTypeInternal _SoundAnalysisPreprocessing_default_instance_;
class SoundAnalysisPreprocessing_Vggish;
struct SoundAnalysisPreprocessing_VggishDefaultTypeInternal;
extern SoundAnalysisPreprocessing_VggishDefaultTypeInternal _SoundAnalysisPreprocessing_Vggish_default_instance_;
}  // namespace CoreMLModels
}  // namespace Specification
}  // namespace CoreML
PROTOBUF_NAMESPACE_OPEN
template<> ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing* Arena::CreateMaybeMessage<::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>(Arena*);
template<> ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* Arena::CreateMaybeMessage<::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CoreML {
namespace Specification {
namespace CoreMLModels {

// ===================================================================

class SoundAnalysisPreprocessing_Vggish final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish) */ {
 public:
  inline SoundAnalysisPreprocessing_Vggish() : SoundAnalysisPreprocessing_Vggish(nullptr) {}
  ~SoundAnalysisPreprocessing_Vggish() override;
  explicit constexpr SoundAnalysisPreprocessing_Vggish(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SoundAnalysisPreprocessing_Vggish(const SoundAnalysisPreprocessing_Vggish& from);
  SoundAnalysisPreprocessing_Vggish(SoundAnalysisPreprocessing_Vggish&& from) noexcept
    : SoundAnalysisPreprocessing_Vggish() {
    *this = ::std::move(from);
  }

  inline SoundAnalysisPreprocessing_Vggish& operator=(const SoundAnalysisPreprocessing_Vggish& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoundAnalysisPreprocessing_Vggish& operator=(SoundAnalysisPreprocessing_Vggish&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SoundAnalysisPreprocessing_Vggish& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoundAnalysisPreprocessing_Vggish* internal_default_instance() {
    return reinterpret_cast<const SoundAnalysisPreprocessing_Vggish*>(
               &_SoundAnalysisPreprocessing_Vggish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SoundAnalysisPreprocessing_Vggish& a, SoundAnalysisPreprocessing_Vggish& b) {
    a.Swap(&b);
  }
  inline void Swap(SoundAnalysisPreprocessing_Vggish* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoundAnalysisPreprocessing_Vggish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoundAnalysisPreprocessing_Vggish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SoundAnalysisPreprocessing_Vggish>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SoundAnalysisPreprocessing_Vggish& from);
  void MergeFrom(const SoundAnalysisPreprocessing_Vggish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SoundAnalysisPreprocessing_Vggish* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish";
  }
  protected:
  explicit SoundAnalysisPreprocessing_Vggish(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SoundAnalysisPreprocessing_2eproto;
};
// -------------------------------------------------------------------

class SoundAnalysisPreprocessing final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing) */ {
 public:
  inline SoundAnalysisPreprocessing() : SoundAnalysisPreprocessing(nullptr) {}
  ~SoundAnalysisPreprocessing() override;
  explicit constexpr SoundAnalysisPreprocessing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SoundAnalysisPreprocessing(const SoundAnalysisPreprocessing& from);
  SoundAnalysisPreprocessing(SoundAnalysisPreprocessing&& from) noexcept
    : SoundAnalysisPreprocessing() {
    *this = ::std::move(from);
  }

  inline SoundAnalysisPreprocessing& operator=(const SoundAnalysisPreprocessing& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoundAnalysisPreprocessing& operator=(SoundAnalysisPreprocessing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SoundAnalysisPreprocessing& default_instance() {
    return *internal_default_instance();
  }
  enum SoundAnalysisPreprocessingTypeCase {
    kVggish = 20,
    SOUNDANALYSISPREPROCESSINGTYPE_NOT_SET = 0,
  };

  static inline const SoundAnalysisPreprocessing* internal_default_instance() {
    return reinterpret_cast<const SoundAnalysisPreprocessing*>(
               &_SoundAnalysisPreprocessing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SoundAnalysisPreprocessing& a, SoundAnalysisPreprocessing& b) {
    a.Swap(&b);
  }
  inline void Swap(SoundAnalysisPreprocessing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoundAnalysisPreprocessing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoundAnalysisPreprocessing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SoundAnalysisPreprocessing>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SoundAnalysisPreprocessing& from);
  void MergeFrom(const SoundAnalysisPreprocessing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SoundAnalysisPreprocessing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing";
  }
  protected:
  explicit SoundAnalysisPreprocessing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SoundAnalysisPreprocessing_Vggish Vggish;

  // accessors -------------------------------------------------------

  enum : int {
    kVggishFieldNumber = 20,
  };
  // .CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish vggish = 20;
  bool has_vggish() const;
  private:
  bool _internal_has_vggish() const;
  public:
  void clear_vggish();
  const ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish& vggish() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* release_vggish();
  ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* mutable_vggish();
  void set_allocated_vggish(::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* vggish);
  private:
  const ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish& _internal_vggish() const;
  ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* _internal_mutable_vggish();
  public:
  void unsafe_arena_set_allocated_vggish(
      ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* vggish);
  ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* unsafe_arena_release_vggish();

  void clear_SoundAnalysisPreprocessingType();
  SoundAnalysisPreprocessingTypeCase SoundAnalysisPreprocessingType_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing)
 private:
  class _Internal;
  void set_has_vggish();

  inline bool has_SoundAnalysisPreprocessingType() const;
  inline void clear_has_SoundAnalysisPreprocessingType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SoundAnalysisPreprocessingTypeUnion {
    constexpr SoundAnalysisPreprocessingTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* vggish_;
  } SoundAnalysisPreprocessingType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_SoundAnalysisPreprocessing_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SoundAnalysisPreprocessing_Vggish

// -------------------------------------------------------------------

// SoundAnalysisPreprocessing

// .CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish vggish = 20;
inline bool SoundAnalysisPreprocessing::_internal_has_vggish() const {
  return SoundAnalysisPreprocessingType_case() == kVggish;
}
inline bool SoundAnalysisPreprocessing::has_vggish() const {
  return _internal_has_vggish();
}
inline void SoundAnalysisPreprocessing::set_has_vggish() {
  _oneof_case_[0] = kVggish;
}
inline void SoundAnalysisPreprocessing::clear_vggish() {
  if (_internal_has_vggish()) {
    if (GetArenaForAllocation() == nullptr) {
      delete SoundAnalysisPreprocessingType_.vggish_;
    }
    clear_has_SoundAnalysisPreprocessingType();
  }
}
inline ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* SoundAnalysisPreprocessing::release_vggish() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.vggish)
  if (_internal_has_vggish()) {
    clear_has_SoundAnalysisPreprocessingType();
      ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* temp = SoundAnalysisPreprocessingType_.vggish_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    SoundAnalysisPreprocessingType_.vggish_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish& SoundAnalysisPreprocessing::_internal_vggish() const {
  return _internal_has_vggish()
      ? *SoundAnalysisPreprocessingType_.vggish_
      : reinterpret_cast< ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish&>(::CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_Vggish_default_instance_);
}
inline const ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish& SoundAnalysisPreprocessing::vggish() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.vggish)
  return _internal_vggish();
}
inline ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* SoundAnalysisPreprocessing::unsafe_arena_release_vggish() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.vggish)
  if (_internal_has_vggish()) {
    clear_has_SoundAnalysisPreprocessingType();
    ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* temp = SoundAnalysisPreprocessingType_.vggish_;
    SoundAnalysisPreprocessingType_.vggish_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SoundAnalysisPreprocessing::unsafe_arena_set_allocated_vggish(::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* vggish) {
  clear_SoundAnalysisPreprocessingType();
  if (vggish) {
    set_has_vggish();
    SoundAnalysisPreprocessingType_.vggish_ = vggish;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.vggish)
}
inline ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* SoundAnalysisPreprocessing::_internal_mutable_vggish() {
  if (!_internal_has_vggish()) {
    clear_SoundAnalysisPreprocessingType();
    set_has_vggish();
    SoundAnalysisPreprocessingType_.vggish_ = CreateMaybeMessage< ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish >(GetArenaForAllocation());
  }
  return SoundAnalysisPreprocessingType_.vggish_;
}
inline ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* SoundAnalysisPreprocessing::mutable_vggish() {
  ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* _msg = _internal_mutable_vggish();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.vggish)
  return _msg;
}

inline bool SoundAnalysisPreprocessing::has_SoundAnalysisPreprocessingType() const {
  return SoundAnalysisPreprocessingType_case() != SOUNDANALYSISPREPROCESSINGTYPE_NOT_SET;
}
inline void SoundAnalysisPreprocessing::clear_has_SoundAnalysisPreprocessingType() {
  _oneof_case_[0] = SOUNDANALYSISPREPROCESSINGTYPE_NOT_SET;
}
inline SoundAnalysisPreprocessing::SoundAnalysisPreprocessingTypeCase SoundAnalysisPreprocessing::SoundAnalysisPreprocessingType_case() const {
  return SoundAnalysisPreprocessing::SoundAnalysisPreprocessingTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreMLModels
}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SoundAnalysisPreprocessing_2eproto
