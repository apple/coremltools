// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WordEmbedding.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_WordEmbedding_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_WordEmbedding_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "DataStructures.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_WordEmbedding_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_WordEmbedding_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace CoreML {
namespace Specification {
namespace CoreMLModels {
class WordEmbedding;
struct WordEmbeddingDefaultTypeInternal;
extern WordEmbeddingDefaultTypeInternal _WordEmbedding_default_instance_;
}  // namespace CoreMLModels
}  // namespace Specification
}  // namespace CoreML
PROTOBUF_NAMESPACE_OPEN
template<> ::CoreML::Specification::CoreMLModels::WordEmbedding* Arena::CreateMaybeMessage<::CoreML::Specification::CoreMLModels::WordEmbedding>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CoreML {
namespace Specification {
namespace CoreMLModels {

// ===================================================================

class WordEmbedding final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.CoreMLModels.WordEmbedding) */ {
 public:
  inline WordEmbedding() : WordEmbedding(nullptr) {}
  ~WordEmbedding() override;
  explicit constexpr WordEmbedding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WordEmbedding(const WordEmbedding& from);
  WordEmbedding(WordEmbedding&& from) noexcept
    : WordEmbedding() {
    *this = ::std::move(from);
  }

  inline WordEmbedding& operator=(const WordEmbedding& from) {
    CopyFrom(from);
    return *this;
  }
  inline WordEmbedding& operator=(WordEmbedding&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const WordEmbedding& default_instance() {
    return *internal_default_instance();
  }
  static inline const WordEmbedding* internal_default_instance() {
    return reinterpret_cast<const WordEmbedding*>(
               &_WordEmbedding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WordEmbedding& a, WordEmbedding& b) {
    a.Swap(&b);
  }
  inline void Swap(WordEmbedding* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WordEmbedding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WordEmbedding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WordEmbedding>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WordEmbedding& from);
  void MergeFrom(const WordEmbedding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WordEmbedding* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.CoreMLModels.WordEmbedding";
  }
  protected:
  explicit WordEmbedding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 10,
    kModelParameterDataFieldNumber = 100,
    kRevisionFieldNumber = 1,
  };
  // string language = 10;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // bytes modelParameterData = 100;
  void clear_modelparameterdata();
  const std::string& modelparameterdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modelparameterdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modelparameterdata();
  PROTOBUF_NODISCARD std::string* release_modelparameterdata();
  void set_allocated_modelparameterdata(std::string* modelparameterdata);
  private:
  const std::string& _internal_modelparameterdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modelparameterdata(const std::string& value);
  std::string* _internal_mutable_modelparameterdata();
  public:

  // uint32 revision = 1;
  void clear_revision();
  uint32_t revision() const;
  void set_revision(uint32_t value);
  private:
  uint32_t _internal_revision() const;
  void _internal_set_revision(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CoreML.Specification.CoreMLModels.WordEmbedding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelparameterdata_;
  uint32_t revision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WordEmbedding_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WordEmbedding

// uint32 revision = 1;
inline void WordEmbedding::clear_revision() {
  revision_ = 0u;
}
inline uint32_t WordEmbedding::_internal_revision() const {
  return revision_;
}
inline uint32_t WordEmbedding::revision() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CoreMLModels.WordEmbedding.revision)
  return _internal_revision();
}
inline void WordEmbedding::_internal_set_revision(uint32_t value) {
  
  revision_ = value;
}
inline void WordEmbedding::set_revision(uint32_t value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.CoreMLModels.WordEmbedding.revision)
}

// string language = 10;
inline void WordEmbedding::clear_language() {
  language_.ClearToEmpty();
}
inline const std::string& WordEmbedding::language() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CoreMLModels.WordEmbedding.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WordEmbedding::set_language(ArgT0&& arg0, ArgT... args) {
 
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CoreML.Specification.CoreMLModels.WordEmbedding.language)
}
inline std::string* WordEmbedding::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CoreMLModels.WordEmbedding.language)
  return _s;
}
inline const std::string& WordEmbedding::_internal_language() const {
  return language_.Get();
}
inline void WordEmbedding::_internal_set_language(const std::string& value) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WordEmbedding::_internal_mutable_language() {
  
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WordEmbedding::release_language() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CoreMLModels.WordEmbedding.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WordEmbedding::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.CoreMLModels.WordEmbedding.language)
}

// bytes modelParameterData = 100;
inline void WordEmbedding::clear_modelparameterdata() {
  modelparameterdata_.ClearToEmpty();
}
inline const std::string& WordEmbedding::modelparameterdata() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CoreMLModels.WordEmbedding.modelParameterData)
  return _internal_modelparameterdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WordEmbedding::set_modelparameterdata(ArgT0&& arg0, ArgT... args) {
 
 modelparameterdata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CoreML.Specification.CoreMLModels.WordEmbedding.modelParameterData)
}
inline std::string* WordEmbedding::mutable_modelparameterdata() {
  std::string* _s = _internal_mutable_modelparameterdata();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CoreMLModels.WordEmbedding.modelParameterData)
  return _s;
}
inline const std::string& WordEmbedding::_internal_modelparameterdata() const {
  return modelparameterdata_.Get();
}
inline void WordEmbedding::_internal_set_modelparameterdata(const std::string& value) {
  
  modelparameterdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WordEmbedding::_internal_mutable_modelparameterdata() {
  
  return modelparameterdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WordEmbedding::release_modelparameterdata() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CoreMLModels.WordEmbedding.modelParameterData)
  return modelparameterdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WordEmbedding::set_allocated_modelparameterdata(std::string* modelparameterdata) {
  if (modelparameterdata != nullptr) {
    
  } else {
    
  }
  modelparameterdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modelparameterdata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (modelparameterdata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    modelparameterdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.CoreMLModels.WordEmbedding.modelParameterData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreMLModels
}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_WordEmbedding_2eproto
