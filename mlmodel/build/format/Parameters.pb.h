// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Parameters.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Parameters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Parameters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "DataStructures.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Parameters_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Parameters_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace CoreML {
namespace Specification {
class BoolParameter;
struct BoolParameterDefaultTypeInternal;
extern BoolParameterDefaultTypeInternal _BoolParameter_default_instance_;
class DoubleParameter;
struct DoubleParameterDefaultTypeInternal;
extern DoubleParameterDefaultTypeInternal _DoubleParameter_default_instance_;
class Int64Parameter;
struct Int64ParameterDefaultTypeInternal;
extern Int64ParameterDefaultTypeInternal _Int64Parameter_default_instance_;
class StringParameter;
struct StringParameterDefaultTypeInternal;
extern StringParameterDefaultTypeInternal _StringParameter_default_instance_;
}  // namespace Specification
}  // namespace CoreML
PROTOBUF_NAMESPACE_OPEN
template<> ::CoreML::Specification::BoolParameter* Arena::CreateMaybeMessage<::CoreML::Specification::BoolParameter>(Arena*);
template<> ::CoreML::Specification::DoubleParameter* Arena::CreateMaybeMessage<::CoreML::Specification::DoubleParameter>(Arena*);
template<> ::CoreML::Specification::Int64Parameter* Arena::CreateMaybeMessage<::CoreML::Specification::Int64Parameter>(Arena*);
template<> ::CoreML::Specification::StringParameter* Arena::CreateMaybeMessage<::CoreML::Specification::StringParameter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CoreML {
namespace Specification {

// ===================================================================

class Int64Parameter final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.Int64Parameter) */ {
 public:
  inline Int64Parameter() : Int64Parameter(nullptr) {}
  ~Int64Parameter() override;
  explicit constexpr Int64Parameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int64Parameter(const Int64Parameter& from);
  Int64Parameter(Int64Parameter&& from) noexcept
    : Int64Parameter() {
    *this = ::std::move(from);
  }

  inline Int64Parameter& operator=(const Int64Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Parameter& operator=(Int64Parameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Int64Parameter& default_instance() {
    return *internal_default_instance();
  }
  enum AllowedValuesCase {
    kRange = 10,
    kSet = 11,
    ALLOWEDVALUES_NOT_SET = 0,
  };

  static inline const Int64Parameter* internal_default_instance() {
    return reinterpret_cast<const Int64Parameter*>(
               &_Int64Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Int64Parameter& a, Int64Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Parameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Parameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64Parameter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Int64Parameter& from);
  void MergeFrom(const Int64Parameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Int64Parameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.Int64Parameter";
  }
  protected:
  explicit Int64Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultValueFieldNumber = 1,
    kRangeFieldNumber = 10,
    kSetFieldNumber = 11,
  };
  // int64 defaultValue = 1;
  void clear_defaultvalue();
  int64_t defaultvalue() const;
  void set_defaultvalue(int64_t value);
  private:
  int64_t _internal_defaultvalue() const;
  void _internal_set_defaultvalue(int64_t value);
  public:

  // .CoreML.Specification.Int64Range range = 10;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::CoreML::Specification::Int64Range& range() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::Int64Range* release_range();
  ::CoreML::Specification::Int64Range* mutable_range();
  void set_allocated_range(::CoreML::Specification::Int64Range* range);
  private:
  const ::CoreML::Specification::Int64Range& _internal_range() const;
  ::CoreML::Specification::Int64Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::CoreML::Specification::Int64Range* range);
  ::CoreML::Specification::Int64Range* unsafe_arena_release_range();

  // .CoreML.Specification.Int64Set set = 11;
  bool has_set() const;
  private:
  bool _internal_has_set() const;
  public:
  void clear_set();
  const ::CoreML::Specification::Int64Set& set() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::Int64Set* release_set();
  ::CoreML::Specification::Int64Set* mutable_set();
  void set_allocated_set(::CoreML::Specification::Int64Set* set);
  private:
  const ::CoreML::Specification::Int64Set& _internal_set() const;
  ::CoreML::Specification::Int64Set* _internal_mutable_set();
  public:
  void unsafe_arena_set_allocated_set(
      ::CoreML::Specification::Int64Set* set);
  ::CoreML::Specification::Int64Set* unsafe_arena_release_set();

  void clear_AllowedValues();
  AllowedValuesCase AllowedValues_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.Int64Parameter)
 private:
  class _Internal;
  void set_has_range();
  void set_has_set();

  inline bool has_AllowedValues() const;
  inline void clear_has_AllowedValues();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t defaultvalue_;
  union AllowedValuesUnion {
    constexpr AllowedValuesUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CoreML::Specification::Int64Range* range_;
    ::CoreML::Specification::Int64Set* set_;
  } AllowedValues_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Parameters_2eproto;
};
// -------------------------------------------------------------------

class DoubleParameter final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.DoubleParameter) */ {
 public:
  inline DoubleParameter() : DoubleParameter(nullptr) {}
  ~DoubleParameter() override;
  explicit constexpr DoubleParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoubleParameter(const DoubleParameter& from);
  DoubleParameter(DoubleParameter&& from) noexcept
    : DoubleParameter() {
    *this = ::std::move(from);
  }

  inline DoubleParameter& operator=(const DoubleParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleParameter& operator=(DoubleParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DoubleParameter& default_instance() {
    return *internal_default_instance();
  }
  enum AllowedValuesCase {
    kRange = 10,
    ALLOWEDVALUES_NOT_SET = 0,
  };

  static inline const DoubleParameter* internal_default_instance() {
    return reinterpret_cast<const DoubleParameter*>(
               &_DoubleParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DoubleParameter& a, DoubleParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoubleParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DoubleParameter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DoubleParameter& from);
  void MergeFrom(const DoubleParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DoubleParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.DoubleParameter";
  }
  protected:
  explicit DoubleParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultValueFieldNumber = 1,
    kRangeFieldNumber = 10,
  };
  // double defaultValue = 1;
  void clear_defaultvalue();
  double defaultvalue() const;
  void set_defaultvalue(double value);
  private:
  double _internal_defaultvalue() const;
  void _internal_set_defaultvalue(double value);
  public:

  // .CoreML.Specification.DoubleRange range = 10;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::CoreML::Specification::DoubleRange& range() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::DoubleRange* release_range();
  ::CoreML::Specification::DoubleRange* mutable_range();
  void set_allocated_range(::CoreML::Specification::DoubleRange* range);
  private:
  const ::CoreML::Specification::DoubleRange& _internal_range() const;
  ::CoreML::Specification::DoubleRange* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::CoreML::Specification::DoubleRange* range);
  ::CoreML::Specification::DoubleRange* unsafe_arena_release_range();

  void clear_AllowedValues();
  AllowedValuesCase AllowedValues_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.DoubleParameter)
 private:
  class _Internal;
  void set_has_range();

  inline bool has_AllowedValues() const;
  inline void clear_has_AllowedValues();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double defaultvalue_;
  union AllowedValuesUnion {
    constexpr AllowedValuesUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CoreML::Specification::DoubleRange* range_;
  } AllowedValues_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Parameters_2eproto;
};
// -------------------------------------------------------------------

class StringParameter final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.StringParameter) */ {
 public:
  inline StringParameter() : StringParameter(nullptr) {}
  ~StringParameter() override;
  explicit constexpr StringParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringParameter(const StringParameter& from);
  StringParameter(StringParameter&& from) noexcept
    : StringParameter() {
    *this = ::std::move(from);
  }

  inline StringParameter& operator=(const StringParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringParameter& operator=(StringParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const StringParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringParameter* internal_default_instance() {
    return reinterpret_cast<const StringParameter*>(
               &_StringParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StringParameter& a, StringParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(StringParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringParameter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StringParameter& from);
  void MergeFrom(const StringParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.StringParameter";
  }
  protected:
  explicit StringParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultValueFieldNumber = 1,
  };
  // string defaultValue = 1;
  void clear_defaultvalue();
  const std::string& defaultvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_defaultvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_defaultvalue();
  PROTOBUF_NODISCARD std::string* release_defaultvalue();
  void set_allocated_defaultvalue(std::string* defaultvalue);
  private:
  const std::string& _internal_defaultvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_defaultvalue(const std::string& value);
  std::string* _internal_mutable_defaultvalue();
  public:

  // @@protoc_insertion_point(class_scope:CoreML.Specification.StringParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr defaultvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Parameters_2eproto;
};
// -------------------------------------------------------------------

class BoolParameter final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.BoolParameter) */ {
 public:
  inline BoolParameter() : BoolParameter(nullptr) {}
  ~BoolParameter() override;
  explicit constexpr BoolParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoolParameter(const BoolParameter& from);
  BoolParameter(BoolParameter&& from) noexcept
    : BoolParameter() {
    *this = ::std::move(from);
  }

  inline BoolParameter& operator=(const BoolParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolParameter& operator=(BoolParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BoolParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoolParameter* internal_default_instance() {
    return reinterpret_cast<const BoolParameter*>(
               &_BoolParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BoolParameter& a, BoolParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoolParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoolParameter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BoolParameter& from);
  void MergeFrom(const BoolParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoolParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.BoolParameter";
  }
  protected:
  explicit BoolParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultValueFieldNumber = 1,
  };
  // bool defaultValue = 1;
  void clear_defaultvalue();
  bool defaultvalue() const;
  void set_defaultvalue(bool value);
  private:
  bool _internal_defaultvalue() const;
  void _internal_set_defaultvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CoreML.Specification.BoolParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool defaultvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Parameters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Int64Parameter

// int64 defaultValue = 1;
inline void Int64Parameter::clear_defaultvalue() {
  defaultvalue_ = int64_t{0};
}
inline int64_t Int64Parameter::_internal_defaultvalue() const {
  return defaultvalue_;
}
inline int64_t Int64Parameter::defaultvalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Int64Parameter.defaultValue)
  return _internal_defaultvalue();
}
inline void Int64Parameter::_internal_set_defaultvalue(int64_t value) {
  
  defaultvalue_ = value;
}
inline void Int64Parameter::set_defaultvalue(int64_t value) {
  _internal_set_defaultvalue(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.Int64Parameter.defaultValue)
}

// .CoreML.Specification.Int64Range range = 10;
inline bool Int64Parameter::_internal_has_range() const {
  return AllowedValues_case() == kRange;
}
inline bool Int64Parameter::has_range() const {
  return _internal_has_range();
}
inline void Int64Parameter::set_has_range() {
  _oneof_case_[0] = kRange;
}
inline ::CoreML::Specification::Int64Range* Int64Parameter::release_range() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Int64Parameter.range)
  if (_internal_has_range()) {
    clear_has_AllowedValues();
      ::CoreML::Specification::Int64Range* temp = AllowedValues_.range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AllowedValues_.range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CoreML::Specification::Int64Range& Int64Parameter::_internal_range() const {
  return _internal_has_range()
      ? *AllowedValues_.range_
      : reinterpret_cast< ::CoreML::Specification::Int64Range&>(::CoreML::Specification::_Int64Range_default_instance_);
}
inline const ::CoreML::Specification::Int64Range& Int64Parameter::range() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Int64Parameter.range)
  return _internal_range();
}
inline ::CoreML::Specification::Int64Range* Int64Parameter::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CoreML.Specification.Int64Parameter.range)
  if (_internal_has_range()) {
    clear_has_AllowedValues();
    ::CoreML::Specification::Int64Range* temp = AllowedValues_.range_;
    AllowedValues_.range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int64Parameter::unsafe_arena_set_allocated_range(::CoreML::Specification::Int64Range* range) {
  clear_AllowedValues();
  if (range) {
    set_has_range();
    AllowedValues_.range_ = range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.Int64Parameter.range)
}
inline ::CoreML::Specification::Int64Range* Int64Parameter::_internal_mutable_range() {
  if (!_internal_has_range()) {
    clear_AllowedValues();
    set_has_range();
    AllowedValues_.range_ = CreateMaybeMessage< ::CoreML::Specification::Int64Range >(GetArenaForAllocation());
  }
  return AllowedValues_.range_;
}
inline ::CoreML::Specification::Int64Range* Int64Parameter::mutable_range() {
  ::CoreML::Specification::Int64Range* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Int64Parameter.range)
  return _msg;
}

// .CoreML.Specification.Int64Set set = 11;
inline bool Int64Parameter::_internal_has_set() const {
  return AllowedValues_case() == kSet;
}
inline bool Int64Parameter::has_set() const {
  return _internal_has_set();
}
inline void Int64Parameter::set_has_set() {
  _oneof_case_[0] = kSet;
}
inline ::CoreML::Specification::Int64Set* Int64Parameter::release_set() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Int64Parameter.set)
  if (_internal_has_set()) {
    clear_has_AllowedValues();
      ::CoreML::Specification::Int64Set* temp = AllowedValues_.set_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AllowedValues_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CoreML::Specification::Int64Set& Int64Parameter::_internal_set() const {
  return _internal_has_set()
      ? *AllowedValues_.set_
      : reinterpret_cast< ::CoreML::Specification::Int64Set&>(::CoreML::Specification::_Int64Set_default_instance_);
}
inline const ::CoreML::Specification::Int64Set& Int64Parameter::set() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Int64Parameter.set)
  return _internal_set();
}
inline ::CoreML::Specification::Int64Set* Int64Parameter::unsafe_arena_release_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CoreML.Specification.Int64Parameter.set)
  if (_internal_has_set()) {
    clear_has_AllowedValues();
    ::CoreML::Specification::Int64Set* temp = AllowedValues_.set_;
    AllowedValues_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Int64Parameter::unsafe_arena_set_allocated_set(::CoreML::Specification::Int64Set* set) {
  clear_AllowedValues();
  if (set) {
    set_has_set();
    AllowedValues_.set_ = set;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.Int64Parameter.set)
}
inline ::CoreML::Specification::Int64Set* Int64Parameter::_internal_mutable_set() {
  if (!_internal_has_set()) {
    clear_AllowedValues();
    set_has_set();
    AllowedValues_.set_ = CreateMaybeMessage< ::CoreML::Specification::Int64Set >(GetArenaForAllocation());
  }
  return AllowedValues_.set_;
}
inline ::CoreML::Specification::Int64Set* Int64Parameter::mutable_set() {
  ::CoreML::Specification::Int64Set* _msg = _internal_mutable_set();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Int64Parameter.set)
  return _msg;
}

inline bool Int64Parameter::has_AllowedValues() const {
  return AllowedValues_case() != ALLOWEDVALUES_NOT_SET;
}
inline void Int64Parameter::clear_has_AllowedValues() {
  _oneof_case_[0] = ALLOWEDVALUES_NOT_SET;
}
inline Int64Parameter::AllowedValuesCase Int64Parameter::AllowedValues_case() const {
  return Int64Parameter::AllowedValuesCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DoubleParameter

// double defaultValue = 1;
inline void DoubleParameter::clear_defaultvalue() {
  defaultvalue_ = 0;
}
inline double DoubleParameter::_internal_defaultvalue() const {
  return defaultvalue_;
}
inline double DoubleParameter::defaultvalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.DoubleParameter.defaultValue)
  return _internal_defaultvalue();
}
inline void DoubleParameter::_internal_set_defaultvalue(double value) {
  
  defaultvalue_ = value;
}
inline void DoubleParameter::set_defaultvalue(double value) {
  _internal_set_defaultvalue(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.DoubleParameter.defaultValue)
}

// .CoreML.Specification.DoubleRange range = 10;
inline bool DoubleParameter::_internal_has_range() const {
  return AllowedValues_case() == kRange;
}
inline bool DoubleParameter::has_range() const {
  return _internal_has_range();
}
inline void DoubleParameter::set_has_range() {
  _oneof_case_[0] = kRange;
}
inline ::CoreML::Specification::DoubleRange* DoubleParameter::release_range() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.DoubleParameter.range)
  if (_internal_has_range()) {
    clear_has_AllowedValues();
      ::CoreML::Specification::DoubleRange* temp = AllowedValues_.range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AllowedValues_.range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CoreML::Specification::DoubleRange& DoubleParameter::_internal_range() const {
  return _internal_has_range()
      ? *AllowedValues_.range_
      : reinterpret_cast< ::CoreML::Specification::DoubleRange&>(::CoreML::Specification::_DoubleRange_default_instance_);
}
inline const ::CoreML::Specification::DoubleRange& DoubleParameter::range() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.DoubleParameter.range)
  return _internal_range();
}
inline ::CoreML::Specification::DoubleRange* DoubleParameter::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CoreML.Specification.DoubleParameter.range)
  if (_internal_has_range()) {
    clear_has_AllowedValues();
    ::CoreML::Specification::DoubleRange* temp = AllowedValues_.range_;
    AllowedValues_.range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DoubleParameter::unsafe_arena_set_allocated_range(::CoreML::Specification::DoubleRange* range) {
  clear_AllowedValues();
  if (range) {
    set_has_range();
    AllowedValues_.range_ = range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.DoubleParameter.range)
}
inline ::CoreML::Specification::DoubleRange* DoubleParameter::_internal_mutable_range() {
  if (!_internal_has_range()) {
    clear_AllowedValues();
    set_has_range();
    AllowedValues_.range_ = CreateMaybeMessage< ::CoreML::Specification::DoubleRange >(GetArenaForAllocation());
  }
  return AllowedValues_.range_;
}
inline ::CoreML::Specification::DoubleRange* DoubleParameter::mutable_range() {
  ::CoreML::Specification::DoubleRange* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.DoubleParameter.range)
  return _msg;
}

inline bool DoubleParameter::has_AllowedValues() const {
  return AllowedValues_case() != ALLOWEDVALUES_NOT_SET;
}
inline void DoubleParameter::clear_has_AllowedValues() {
  _oneof_case_[0] = ALLOWEDVALUES_NOT_SET;
}
inline DoubleParameter::AllowedValuesCase DoubleParameter::AllowedValues_case() const {
  return DoubleParameter::AllowedValuesCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StringParameter

// string defaultValue = 1;
inline void StringParameter::clear_defaultvalue() {
  defaultvalue_.ClearToEmpty();
}
inline const std::string& StringParameter::defaultvalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.StringParameter.defaultValue)
  return _internal_defaultvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringParameter::set_defaultvalue(ArgT0&& arg0, ArgT... args) {
 
 defaultvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CoreML.Specification.StringParameter.defaultValue)
}
inline std::string* StringParameter::mutable_defaultvalue() {
  std::string* _s = _internal_mutable_defaultvalue();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.StringParameter.defaultValue)
  return _s;
}
inline const std::string& StringParameter::_internal_defaultvalue() const {
  return defaultvalue_.Get();
}
inline void StringParameter::_internal_set_defaultvalue(const std::string& value) {
  
  defaultvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StringParameter::_internal_mutable_defaultvalue() {
  
  return defaultvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StringParameter::release_defaultvalue() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.StringParameter.defaultValue)
  return defaultvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StringParameter::set_allocated_defaultvalue(std::string* defaultvalue) {
  if (defaultvalue != nullptr) {
    
  } else {
    
  }
  defaultvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), defaultvalue,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (defaultvalue_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    defaultvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.StringParameter.defaultValue)
}

// -------------------------------------------------------------------

// BoolParameter

// bool defaultValue = 1;
inline void BoolParameter::clear_defaultvalue() {
  defaultvalue_ = false;
}
inline bool BoolParameter::_internal_defaultvalue() const {
  return defaultvalue_;
}
inline bool BoolParameter::defaultvalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.BoolParameter.defaultValue)
  return _internal_defaultvalue();
}
inline void BoolParameter::_internal_set_defaultvalue(bool value) {
  
  defaultvalue_ = value;
}
inline void BoolParameter::set_defaultvalue(bool value) {
  _internal_set_defaultvalue(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.BoolParameter.defaultValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Parameters_2eproto
