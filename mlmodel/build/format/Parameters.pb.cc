// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Parameters.proto

#include "Parameters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace CoreML {
namespace Specification {
constexpr Int64Parameter::Int64Parameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : defaultvalue_(int64_t{0})
  , _oneof_case_{}{}
struct Int64ParameterDefaultTypeInternal {
  constexpr Int64ParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Int64ParameterDefaultTypeInternal() {}
  union {
    Int64Parameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Int64ParameterDefaultTypeInternal _Int64Parameter_default_instance_;
constexpr DoubleParameter::DoubleParameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : defaultvalue_(0)
  , _oneof_case_{}{}
struct DoubleParameterDefaultTypeInternal {
  constexpr DoubleParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DoubleParameterDefaultTypeInternal() {}
  union {
    DoubleParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DoubleParameterDefaultTypeInternal _DoubleParameter_default_instance_;
constexpr StringParameter::StringParameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : defaultvalue_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StringParameterDefaultTypeInternal {
  constexpr StringParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringParameterDefaultTypeInternal() {}
  union {
    StringParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringParameterDefaultTypeInternal _StringParameter_default_instance_;
constexpr BoolParameter::BoolParameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : defaultvalue_(false){}
struct BoolParameterDefaultTypeInternal {
  constexpr BoolParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoolParameterDefaultTypeInternal() {}
  union {
    BoolParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoolParameterDefaultTypeInternal _BoolParameter_default_instance_;
}  // namespace Specification
}  // namespace CoreML
namespace CoreML {
namespace Specification {

// ===================================================================

class Int64Parameter::_Internal {
 public:
  static const ::CoreML::Specification::Int64Range& range(const Int64Parameter* msg);
  static const ::CoreML::Specification::Int64Set& set(const Int64Parameter* msg);
};

const ::CoreML::Specification::Int64Range&
Int64Parameter::_Internal::range(const Int64Parameter* msg) {
  return *msg->AllowedValues_.range_;
}
const ::CoreML::Specification::Int64Set&
Int64Parameter::_Internal::set(const Int64Parameter* msg) {
  return *msg->AllowedValues_.set_;
}
void Int64Parameter::set_allocated_range(::CoreML::Specification::Int64Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_AllowedValues();
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range));
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    set_has_range();
    AllowedValues_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Int64Parameter.range)
}
void Int64Parameter::clear_range() {
  if (_internal_has_range()) {
    if (GetArenaForAllocation() == nullptr) {
      delete AllowedValues_.range_;
    }
    clear_has_AllowedValues();
  }
}
void Int64Parameter::set_allocated_set(::CoreML::Specification::Int64Set* set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_AllowedValues();
  if (set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set));
    if (message_arena != submessage_arena) {
      set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set, submessage_arena);
    }
    set_has_set();
    AllowedValues_.set_ = set;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Int64Parameter.set)
}
void Int64Parameter::clear_set() {
  if (_internal_has_set()) {
    if (GetArenaForAllocation() == nullptr) {
      delete AllowedValues_.set_;
    }
    clear_has_AllowedValues();
  }
}
Int64Parameter::Int64Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CoreML.Specification.Int64Parameter)
}
Int64Parameter::Int64Parameter(const Int64Parameter& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  defaultvalue_ = from.defaultvalue_;
  clear_has_AllowedValues();
  switch (from.AllowedValues_case()) {
    case kRange: {
      _internal_mutable_range()->::CoreML::Specification::Int64Range::MergeFrom(from._internal_range());
      break;
    }
    case kSet: {
      _internal_mutable_set()->::CoreML::Specification::Int64Set::MergeFrom(from._internal_set());
      break;
    }
    case ALLOWEDVALUES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.Int64Parameter)
}

inline void Int64Parameter::SharedCtor() {
defaultvalue_ = int64_t{0};
clear_has_AllowedValues();
}

Int64Parameter::~Int64Parameter() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.Int64Parameter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Int64Parameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_AllowedValues()) {
    clear_AllowedValues();
  }
}

void Int64Parameter::ArenaDtor(void* object) {
  Int64Parameter* _this = reinterpret_cast< Int64Parameter* >(object);
  (void)_this;
}
void Int64Parameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Int64Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Int64Parameter::clear_AllowedValues() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.Int64Parameter)
  switch (AllowedValues_case()) {
    case kRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete AllowedValues_.range_;
      }
      break;
    }
    case kSet: {
      if (GetArenaForAllocation() == nullptr) {
        delete AllowedValues_.set_;
      }
      break;
    }
    case ALLOWEDVALUES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ALLOWEDVALUES_NOT_SET;
}


void Int64Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.Int64Parameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defaultvalue_ = int64_t{0};
  clear_AllowedValues();
  _internal_metadata_.Clear<std::string>();
}

const char* Int64Parameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 defaultValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          defaultvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CoreML.Specification.Int64Range range = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CoreML.Specification.Int64Set set = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Int64Parameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoreML.Specification.Int64Parameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 defaultValue = 1;
  if (this->_internal_defaultvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_defaultvalue(), target);
  }

  // .CoreML.Specification.Int64Range range = 10;
  if (_internal_has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::range(this), target, stream);
  }

  // .CoreML.Specification.Int64Set set = 11;
  if (_internal_has_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoreML.Specification.Int64Parameter)
  return target;
}

size_t Int64Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.Int64Parameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 defaultValue = 1;
  if (this->_internal_defaultvalue() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_defaultvalue());
  }

  switch (AllowedValues_case()) {
    // .CoreML.Specification.Int64Range range = 10;
    case kRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AllowedValues_.range_);
      break;
    }
    // .CoreML.Specification.Int64Set set = 11;
    case kSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AllowedValues_.set_);
      break;
    }
    case ALLOWEDVALUES_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int64Parameter::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Int64Parameter*>(
      &from));
}

void Int64Parameter::MergeFrom(const Int64Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.Int64Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_defaultvalue() != 0) {
    _internal_set_defaultvalue(from._internal_defaultvalue());
  }
  switch (from.AllowedValues_case()) {
    case kRange: {
      _internal_mutable_range()->::CoreML::Specification::Int64Range::MergeFrom(from._internal_range());
      break;
    }
    case kSet: {
      _internal_mutable_set()->::CoreML::Specification::Int64Set::MergeFrom(from._internal_set());
      break;
    }
    case ALLOWEDVALUES_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Int64Parameter::CopyFrom(const Int64Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.Int64Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64Parameter::IsInitialized() const {
  return true;
}

void Int64Parameter::InternalSwap(Int64Parameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(defaultvalue_, other->defaultvalue_);
  swap(AllowedValues_, other->AllowedValues_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string Int64Parameter::GetTypeName() const {
  return "CoreML.Specification.Int64Parameter";
}


// ===================================================================

class DoubleParameter::_Internal {
 public:
  static const ::CoreML::Specification::DoubleRange& range(const DoubleParameter* msg);
};

const ::CoreML::Specification::DoubleRange&
DoubleParameter::_Internal::range(const DoubleParameter* msg) {
  return *msg->AllowedValues_.range_;
}
void DoubleParameter::set_allocated_range(::CoreML::Specification::DoubleRange* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_AllowedValues();
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range));
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    set_has_range();
    AllowedValues_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.DoubleParameter.range)
}
void DoubleParameter::clear_range() {
  if (_internal_has_range()) {
    if (GetArenaForAllocation() == nullptr) {
      delete AllowedValues_.range_;
    }
    clear_has_AllowedValues();
  }
}
DoubleParameter::DoubleParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CoreML.Specification.DoubleParameter)
}
DoubleParameter::DoubleParameter(const DoubleParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  defaultvalue_ = from.defaultvalue_;
  clear_has_AllowedValues();
  switch (from.AllowedValues_case()) {
    case kRange: {
      _internal_mutable_range()->::CoreML::Specification::DoubleRange::MergeFrom(from._internal_range());
      break;
    }
    case ALLOWEDVALUES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.DoubleParameter)
}

inline void DoubleParameter::SharedCtor() {
defaultvalue_ = 0;
clear_has_AllowedValues();
}

DoubleParameter::~DoubleParameter() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.DoubleParameter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void DoubleParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_AllowedValues()) {
    clear_AllowedValues();
  }
}

void DoubleParameter::ArenaDtor(void* object) {
  DoubleParameter* _this = reinterpret_cast< DoubleParameter* >(object);
  (void)_this;
}
void DoubleParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DoubleParameter::clear_AllowedValues() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.DoubleParameter)
  switch (AllowedValues_case()) {
    case kRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete AllowedValues_.range_;
      }
      break;
    }
    case ALLOWEDVALUES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ALLOWEDVALUES_NOT_SET;
}


void DoubleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.DoubleParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defaultvalue_ = 0;
  clear_AllowedValues();
  _internal_metadata_.Clear<std::string>();
}

const char* DoubleParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double defaultValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          defaultvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .CoreML.Specification.DoubleRange range = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoubleParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoreML.Specification.DoubleParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double defaultValue = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_defaultvalue = this->_internal_defaultvalue();
  uint64_t raw_defaultvalue;
  memcpy(&raw_defaultvalue, &tmp_defaultvalue, sizeof(tmp_defaultvalue));
  if (raw_defaultvalue != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_defaultvalue(), target);
  }

  // .CoreML.Specification.DoubleRange range = 10;
  if (_internal_has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoreML.Specification.DoubleParameter)
  return target;
}

size_t DoubleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.DoubleParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double defaultValue = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_defaultvalue = this->_internal_defaultvalue();
  uint64_t raw_defaultvalue;
  memcpy(&raw_defaultvalue, &tmp_defaultvalue, sizeof(tmp_defaultvalue));
  if (raw_defaultvalue != 0) {
    total_size += 1 + 8;
  }

  switch (AllowedValues_case()) {
    // .CoreML.Specification.DoubleRange range = 10;
    case kRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AllowedValues_.range_);
      break;
    }
    case ALLOWEDVALUES_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleParameter::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DoubleParameter*>(
      &from));
}

void DoubleParameter::MergeFrom(const DoubleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.DoubleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_defaultvalue = from._internal_defaultvalue();
  uint64_t raw_defaultvalue;
  memcpy(&raw_defaultvalue, &tmp_defaultvalue, sizeof(tmp_defaultvalue));
  if (raw_defaultvalue != 0) {
    _internal_set_defaultvalue(from._internal_defaultvalue());
  }
  switch (from.AllowedValues_case()) {
    case kRange: {
      _internal_mutable_range()->::CoreML::Specification::DoubleRange::MergeFrom(from._internal_range());
      break;
    }
    case ALLOWEDVALUES_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DoubleParameter::CopyFrom(const DoubleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.DoubleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleParameter::IsInitialized() const {
  return true;
}

void DoubleParameter::InternalSwap(DoubleParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(defaultvalue_, other->defaultvalue_);
  swap(AllowedValues_, other->AllowedValues_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string DoubleParameter::GetTypeName() const {
  return "CoreML.Specification.DoubleParameter";
}


// ===================================================================

class StringParameter::_Internal {
 public:
};

StringParameter::StringParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CoreML.Specification.StringParameter)
}
StringParameter::StringParameter(const StringParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  defaultvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    defaultvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_defaultvalue().empty()) {
    defaultvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_defaultvalue(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.StringParameter)
}

inline void StringParameter::SharedCtor() {
defaultvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  defaultvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringParameter::~StringParameter() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.StringParameter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void StringParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  defaultvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringParameter::ArenaDtor(void* object) {
  StringParameter* _this = reinterpret_cast< StringParameter* >(object);
  (void)_this;
}
void StringParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.StringParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defaultvalue_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* StringParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string defaultValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_defaultvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoreML.Specification.StringParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string defaultValue = 1;
  if (!this->_internal_defaultvalue().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_defaultvalue().data(), static_cast<int>(this->_internal_defaultvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CoreML.Specification.StringParameter.defaultValue");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_defaultvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoreML.Specification.StringParameter)
  return target;
}

size_t StringParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.StringParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string defaultValue = 1;
  if (!this->_internal_defaultvalue().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_defaultvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringParameter::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StringParameter*>(
      &from));
}

void StringParameter::MergeFrom(const StringParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.StringParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_defaultvalue().empty()) {
    _internal_set_defaultvalue(from._internal_defaultvalue());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StringParameter::CopyFrom(const StringParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.StringParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringParameter::IsInitialized() const {
  return true;
}

void StringParameter::InternalSwap(StringParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &defaultvalue_, lhs_arena,
      &other->defaultvalue_, rhs_arena
  );
}

std::string StringParameter::GetTypeName() const {
  return "CoreML.Specification.StringParameter";
}


// ===================================================================

class BoolParameter::_Internal {
 public:
};

BoolParameter::BoolParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CoreML.Specification.BoolParameter)
}
BoolParameter::BoolParameter(const BoolParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  defaultvalue_ = from.defaultvalue_;
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.BoolParameter)
}

inline void BoolParameter::SharedCtor() {
defaultvalue_ = false;
}

BoolParameter::~BoolParameter() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.BoolParameter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void BoolParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoolParameter::ArenaDtor(void* object) {
  BoolParameter* _this = reinterpret_cast< BoolParameter* >(object);
  (void)_this;
}
void BoolParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoolParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoolParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.BoolParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defaultvalue_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* BoolParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool defaultValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          defaultvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoolParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoreML.Specification.BoolParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool defaultValue = 1;
  if (this->_internal_defaultvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_defaultvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoreML.Specification.BoolParameter)
  return target;
}

size_t BoolParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.BoolParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool defaultValue = 1;
  if (this->_internal_defaultvalue() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoolParameter::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BoolParameter*>(
      &from));
}

void BoolParameter::MergeFrom(const BoolParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.BoolParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_defaultvalue() != 0) {
    _internal_set_defaultvalue(from._internal_defaultvalue());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BoolParameter::CopyFrom(const BoolParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.BoolParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolParameter::IsInitialized() const {
  return true;
}

void BoolParameter::InternalSwap(BoolParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(defaultvalue_, other->defaultvalue_);
}

std::string BoolParameter::GetTypeName() const {
  return "CoreML.Specification.BoolParameter";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Specification
}  // namespace CoreML
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CoreML::Specification::Int64Parameter* Arena::CreateMaybeMessage< ::CoreML::Specification::Int64Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CoreML::Specification::Int64Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::CoreML::Specification::DoubleParameter* Arena::CreateMaybeMessage< ::CoreML::Specification::DoubleParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CoreML::Specification::DoubleParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::CoreML::Specification::StringParameter* Arena::CreateMaybeMessage< ::CoreML::Specification::StringParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CoreML::Specification::StringParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::CoreML::Specification::BoolParameter* Arena::CreateMaybeMessage< ::CoreML::Specification::BoolParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CoreML::Specification::BoolParameter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
