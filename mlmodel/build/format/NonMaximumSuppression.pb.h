// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NonMaximumSuppression.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NonMaximumSuppression_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NonMaximumSuppression_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "DataStructures.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NonMaximumSuppression_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NonMaximumSuppression_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace CoreML {
namespace Specification {
class NonMaximumSuppression;
struct NonMaximumSuppressionDefaultTypeInternal;
extern NonMaximumSuppressionDefaultTypeInternal _NonMaximumSuppression_default_instance_;
class NonMaximumSuppression_PickTop;
struct NonMaximumSuppression_PickTopDefaultTypeInternal;
extern NonMaximumSuppression_PickTopDefaultTypeInternal _NonMaximumSuppression_PickTop_default_instance_;
}  // namespace Specification
}  // namespace CoreML
PROTOBUF_NAMESPACE_OPEN
template<> ::CoreML::Specification::NonMaximumSuppression* Arena::CreateMaybeMessage<::CoreML::Specification::NonMaximumSuppression>(Arena*);
template<> ::CoreML::Specification::NonMaximumSuppression_PickTop* Arena::CreateMaybeMessage<::CoreML::Specification::NonMaximumSuppression_PickTop>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CoreML {
namespace Specification {

// ===================================================================

class NonMaximumSuppression_PickTop final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.NonMaximumSuppression.PickTop) */ {
 public:
  inline NonMaximumSuppression_PickTop() : NonMaximumSuppression_PickTop(nullptr) {}
  ~NonMaximumSuppression_PickTop() override;
  explicit constexpr NonMaximumSuppression_PickTop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NonMaximumSuppression_PickTop(const NonMaximumSuppression_PickTop& from);
  NonMaximumSuppression_PickTop(NonMaximumSuppression_PickTop&& from) noexcept
    : NonMaximumSuppression_PickTop() {
    *this = ::std::move(from);
  }

  inline NonMaximumSuppression_PickTop& operator=(const NonMaximumSuppression_PickTop& from) {
    CopyFrom(from);
    return *this;
  }
  inline NonMaximumSuppression_PickTop& operator=(NonMaximumSuppression_PickTop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const NonMaximumSuppression_PickTop& default_instance() {
    return *internal_default_instance();
  }
  static inline const NonMaximumSuppression_PickTop* internal_default_instance() {
    return reinterpret_cast<const NonMaximumSuppression_PickTop*>(
               &_NonMaximumSuppression_PickTop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NonMaximumSuppression_PickTop& a, NonMaximumSuppression_PickTop& b) {
    a.Swap(&b);
  }
  inline void Swap(NonMaximumSuppression_PickTop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NonMaximumSuppression_PickTop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NonMaximumSuppression_PickTop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NonMaximumSuppression_PickTop>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NonMaximumSuppression_PickTop& from);
  void MergeFrom(const NonMaximumSuppression_PickTop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NonMaximumSuppression_PickTop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.NonMaximumSuppression.PickTop";
  }
  protected:
  explicit NonMaximumSuppression_PickTop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerClassFieldNumber = 1,
  };
  // bool perClass = 1;
  void clear_perclass();
  bool perclass() const;
  void set_perclass(bool value);
  private:
  bool _internal_perclass() const;
  void _internal_set_perclass(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CoreML.Specification.NonMaximumSuppression.PickTop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool perclass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NonMaximumSuppression_2eproto;
};
// -------------------------------------------------------------------

class NonMaximumSuppression final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.NonMaximumSuppression) */ {
 public:
  inline NonMaximumSuppression() : NonMaximumSuppression(nullptr) {}
  ~NonMaximumSuppression() override;
  explicit constexpr NonMaximumSuppression(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NonMaximumSuppression(const NonMaximumSuppression& from);
  NonMaximumSuppression(NonMaximumSuppression&& from) noexcept
    : NonMaximumSuppression() {
    *this = ::std::move(from);
  }

  inline NonMaximumSuppression& operator=(const NonMaximumSuppression& from) {
    CopyFrom(from);
    return *this;
  }
  inline NonMaximumSuppression& operator=(NonMaximumSuppression&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const NonMaximumSuppression& default_instance() {
    return *internal_default_instance();
  }
  enum SuppressionMethodCase {
    kPickTop = 1,
    SUPPRESSIONMETHOD_NOT_SET = 0,
  };

  enum ClassLabelsCase {
    kStringClassLabels = 100,
    kInt64ClassLabels = 101,
    CLASSLABELS_NOT_SET = 0,
  };

  static inline const NonMaximumSuppression* internal_default_instance() {
    return reinterpret_cast<const NonMaximumSuppression*>(
               &_NonMaximumSuppression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NonMaximumSuppression& a, NonMaximumSuppression& b) {
    a.Swap(&b);
  }
  inline void Swap(NonMaximumSuppression* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NonMaximumSuppression* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NonMaximumSuppression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NonMaximumSuppression>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NonMaximumSuppression& from);
  void MergeFrom(const NonMaximumSuppression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NonMaximumSuppression* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.NonMaximumSuppression";
  }
  protected:
  explicit NonMaximumSuppression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef NonMaximumSuppression_PickTop PickTop;

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceInputFeatureNameFieldNumber = 200,
    kCoordinatesInputFeatureNameFieldNumber = 201,
    kIouThresholdInputFeatureNameFieldNumber = 202,
    kConfidenceThresholdInputFeatureNameFieldNumber = 203,
    kConfidenceOutputFeatureNameFieldNumber = 210,
    kCoordinatesOutputFeatureNameFieldNumber = 211,
    kIouThresholdFieldNumber = 110,
    kConfidenceThresholdFieldNumber = 111,
    kPickTopFieldNumber = 1,
    kStringClassLabelsFieldNumber = 100,
    kInt64ClassLabelsFieldNumber = 101,
  };
  // string confidenceInputFeatureName = 200;
  void clear_confidenceinputfeaturename();
  const std::string& confidenceinputfeaturename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidenceinputfeaturename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidenceinputfeaturename();
  PROTOBUF_NODISCARD std::string* release_confidenceinputfeaturename();
  void set_allocated_confidenceinputfeaturename(std::string* confidenceinputfeaturename);
  private:
  const std::string& _internal_confidenceinputfeaturename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidenceinputfeaturename(const std::string& value);
  std::string* _internal_mutable_confidenceinputfeaturename();
  public:

  // string coordinatesInputFeatureName = 201;
  void clear_coordinatesinputfeaturename();
  const std::string& coordinatesinputfeaturename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coordinatesinputfeaturename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coordinatesinputfeaturename();
  PROTOBUF_NODISCARD std::string* release_coordinatesinputfeaturename();
  void set_allocated_coordinatesinputfeaturename(std::string* coordinatesinputfeaturename);
  private:
  const std::string& _internal_coordinatesinputfeaturename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coordinatesinputfeaturename(const std::string& value);
  std::string* _internal_mutable_coordinatesinputfeaturename();
  public:

  // string iouThresholdInputFeatureName = 202;
  void clear_iouthresholdinputfeaturename();
  const std::string& iouthresholdinputfeaturename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_iouthresholdinputfeaturename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_iouthresholdinputfeaturename();
  PROTOBUF_NODISCARD std::string* release_iouthresholdinputfeaturename();
  void set_allocated_iouthresholdinputfeaturename(std::string* iouthresholdinputfeaturename);
  private:
  const std::string& _internal_iouthresholdinputfeaturename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iouthresholdinputfeaturename(const std::string& value);
  std::string* _internal_mutable_iouthresholdinputfeaturename();
  public:

  // string confidenceThresholdInputFeatureName = 203;
  void clear_confidencethresholdinputfeaturename();
  const std::string& confidencethresholdinputfeaturename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidencethresholdinputfeaturename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidencethresholdinputfeaturename();
  PROTOBUF_NODISCARD std::string* release_confidencethresholdinputfeaturename();
  void set_allocated_confidencethresholdinputfeaturename(std::string* confidencethresholdinputfeaturename);
  private:
  const std::string& _internal_confidencethresholdinputfeaturename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidencethresholdinputfeaturename(const std::string& value);
  std::string* _internal_mutable_confidencethresholdinputfeaturename();
  public:

  // string confidenceOutputFeatureName = 210;
  void clear_confidenceoutputfeaturename();
  const std::string& confidenceoutputfeaturename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidenceoutputfeaturename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidenceoutputfeaturename();
  PROTOBUF_NODISCARD std::string* release_confidenceoutputfeaturename();
  void set_allocated_confidenceoutputfeaturename(std::string* confidenceoutputfeaturename);
  private:
  const std::string& _internal_confidenceoutputfeaturename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidenceoutputfeaturename(const std::string& value);
  std::string* _internal_mutable_confidenceoutputfeaturename();
  public:

  // string coordinatesOutputFeatureName = 211;
  void clear_coordinatesoutputfeaturename();
  const std::string& coordinatesoutputfeaturename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coordinatesoutputfeaturename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coordinatesoutputfeaturename();
  PROTOBUF_NODISCARD std::string* release_coordinatesoutputfeaturename();
  void set_allocated_coordinatesoutputfeaturename(std::string* coordinatesoutputfeaturename);
  private:
  const std::string& _internal_coordinatesoutputfeaturename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coordinatesoutputfeaturename(const std::string& value);
  std::string* _internal_mutable_coordinatesoutputfeaturename();
  public:

  // double iouThreshold = 110;
  void clear_iouthreshold();
  double iouthreshold() const;
  void set_iouthreshold(double value);
  private:
  double _internal_iouthreshold() const;
  void _internal_set_iouthreshold(double value);
  public:

  // double confidenceThreshold = 111;
  void clear_confidencethreshold();
  double confidencethreshold() const;
  void set_confidencethreshold(double value);
  private:
  double _internal_confidencethreshold() const;
  void _internal_set_confidencethreshold(double value);
  public:

  // .CoreML.Specification.NonMaximumSuppression.PickTop pickTop = 1;
  bool has_picktop() const;
  private:
  bool _internal_has_picktop() const;
  public:
  void clear_picktop();
  const ::CoreML::Specification::NonMaximumSuppression_PickTop& picktop() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::NonMaximumSuppression_PickTop* release_picktop();
  ::CoreML::Specification::NonMaximumSuppression_PickTop* mutable_picktop();
  void set_allocated_picktop(::CoreML::Specification::NonMaximumSuppression_PickTop* picktop);
  private:
  const ::CoreML::Specification::NonMaximumSuppression_PickTop& _internal_picktop() const;
  ::CoreML::Specification::NonMaximumSuppression_PickTop* _internal_mutable_picktop();
  public:
  void unsafe_arena_set_allocated_picktop(
      ::CoreML::Specification::NonMaximumSuppression_PickTop* picktop);
  ::CoreML::Specification::NonMaximumSuppression_PickTop* unsafe_arena_release_picktop();

  // .CoreML.Specification.StringVector stringClassLabels = 100;
  bool has_stringclasslabels() const;
  private:
  bool _internal_has_stringclasslabels() const;
  public:
  void clear_stringclasslabels();
  const ::CoreML::Specification::StringVector& stringclasslabels() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::StringVector* release_stringclasslabels();
  ::CoreML::Specification::StringVector* mutable_stringclasslabels();
  void set_allocated_stringclasslabels(::CoreML::Specification::StringVector* stringclasslabels);
  private:
  const ::CoreML::Specification::StringVector& _internal_stringclasslabels() const;
  ::CoreML::Specification::StringVector* _internal_mutable_stringclasslabels();
  public:
  void unsafe_arena_set_allocated_stringclasslabels(
      ::CoreML::Specification::StringVector* stringclasslabels);
  ::CoreML::Specification::StringVector* unsafe_arena_release_stringclasslabels();

  // .CoreML.Specification.Int64Vector int64ClassLabels = 101;
  bool has_int64classlabels() const;
  private:
  bool _internal_has_int64classlabels() const;
  public:
  void clear_int64classlabels();
  const ::CoreML::Specification::Int64Vector& int64classlabels() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::Int64Vector* release_int64classlabels();
  ::CoreML::Specification::Int64Vector* mutable_int64classlabels();
  void set_allocated_int64classlabels(::CoreML::Specification::Int64Vector* int64classlabels);
  private:
  const ::CoreML::Specification::Int64Vector& _internal_int64classlabels() const;
  ::CoreML::Specification::Int64Vector* _internal_mutable_int64classlabels();
  public:
  void unsafe_arena_set_allocated_int64classlabels(
      ::CoreML::Specification::Int64Vector* int64classlabels);
  ::CoreML::Specification::Int64Vector* unsafe_arena_release_int64classlabels();

  void clear_SuppressionMethod();
  SuppressionMethodCase SuppressionMethod_case() const;
  void clear_ClassLabels();
  ClassLabelsCase ClassLabels_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.NonMaximumSuppression)
 private:
  class _Internal;
  void set_has_picktop();
  void set_has_stringclasslabels();
  void set_has_int64classlabels();

  inline bool has_SuppressionMethod() const;
  inline void clear_has_SuppressionMethod();

  inline bool has_ClassLabels() const;
  inline void clear_has_ClassLabels();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidenceinputfeaturename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coordinatesinputfeaturename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iouthresholdinputfeaturename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidencethresholdinputfeaturename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidenceoutputfeaturename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coordinatesoutputfeaturename_;
  double iouthreshold_;
  double confidencethreshold_;
  union SuppressionMethodUnion {
    constexpr SuppressionMethodUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CoreML::Specification::NonMaximumSuppression_PickTop* picktop_;
  } SuppressionMethod_;
  union ClassLabelsUnion {
    constexpr ClassLabelsUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CoreML::Specification::StringVector* stringclasslabels_;
    ::CoreML::Specification::Int64Vector* int64classlabels_;
  } ClassLabels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[2];

  friend struct ::TableStruct_NonMaximumSuppression_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NonMaximumSuppression_PickTop

// bool perClass = 1;
inline void NonMaximumSuppression_PickTop::clear_perclass() {
  perclass_ = false;
}
inline bool NonMaximumSuppression_PickTop::_internal_perclass() const {
  return perclass_;
}
inline bool NonMaximumSuppression_PickTop::perclass() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.NonMaximumSuppression.PickTop.perClass)
  return _internal_perclass();
}
inline void NonMaximumSuppression_PickTop::_internal_set_perclass(bool value) {
  
  perclass_ = value;
}
inline void NonMaximumSuppression_PickTop::set_perclass(bool value) {
  _internal_set_perclass(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.NonMaximumSuppression.PickTop.perClass)
}

// -------------------------------------------------------------------

// NonMaximumSuppression

// .CoreML.Specification.NonMaximumSuppression.PickTop pickTop = 1;
inline bool NonMaximumSuppression::_internal_has_picktop() const {
  return SuppressionMethod_case() == kPickTop;
}
inline bool NonMaximumSuppression::has_picktop() const {
  return _internal_has_picktop();
}
inline void NonMaximumSuppression::set_has_picktop() {
  _oneof_case_[0] = kPickTop;
}
inline void NonMaximumSuppression::clear_picktop() {
  if (_internal_has_picktop()) {
    if (GetArenaForAllocation() == nullptr) {
      delete SuppressionMethod_.picktop_;
    }
    clear_has_SuppressionMethod();
  }
}
inline ::CoreML::Specification::NonMaximumSuppression_PickTop* NonMaximumSuppression::release_picktop() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.NonMaximumSuppression.pickTop)
  if (_internal_has_picktop()) {
    clear_has_SuppressionMethod();
      ::CoreML::Specification::NonMaximumSuppression_PickTop* temp = SuppressionMethod_.picktop_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    SuppressionMethod_.picktop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CoreML::Specification::NonMaximumSuppression_PickTop& NonMaximumSuppression::_internal_picktop() const {
  return _internal_has_picktop()
      ? *SuppressionMethod_.picktop_
      : reinterpret_cast< ::CoreML::Specification::NonMaximumSuppression_PickTop&>(::CoreML::Specification::_NonMaximumSuppression_PickTop_default_instance_);
}
inline const ::CoreML::Specification::NonMaximumSuppression_PickTop& NonMaximumSuppression::picktop() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.NonMaximumSuppression.pickTop)
  return _internal_picktop();
}
inline ::CoreML::Specification::NonMaximumSuppression_PickTop* NonMaximumSuppression::unsafe_arena_release_picktop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CoreML.Specification.NonMaximumSuppression.pickTop)
  if (_internal_has_picktop()) {
    clear_has_SuppressionMethod();
    ::CoreML::Specification::NonMaximumSuppression_PickTop* temp = SuppressionMethod_.picktop_;
    SuppressionMethod_.picktop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NonMaximumSuppression::unsafe_arena_set_allocated_picktop(::CoreML::Specification::NonMaximumSuppression_PickTop* picktop) {
  clear_SuppressionMethod();
  if (picktop) {
    set_has_picktop();
    SuppressionMethod_.picktop_ = picktop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.NonMaximumSuppression.pickTop)
}
inline ::CoreML::Specification::NonMaximumSuppression_PickTop* NonMaximumSuppression::_internal_mutable_picktop() {
  if (!_internal_has_picktop()) {
    clear_SuppressionMethod();
    set_has_picktop();
    SuppressionMethod_.picktop_ = CreateMaybeMessage< ::CoreML::Specification::NonMaximumSuppression_PickTop >(GetArenaForAllocation());
  }
  return SuppressionMethod_.picktop_;
}
inline ::CoreML::Specification::NonMaximumSuppression_PickTop* NonMaximumSuppression::mutable_picktop() {
  ::CoreML::Specification::NonMaximumSuppression_PickTop* _msg = _internal_mutable_picktop();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.NonMaximumSuppression.pickTop)
  return _msg;
}

// .CoreML.Specification.StringVector stringClassLabels = 100;
inline bool NonMaximumSuppression::_internal_has_stringclasslabels() const {
  return ClassLabels_case() == kStringClassLabels;
}
inline bool NonMaximumSuppression::has_stringclasslabels() const {
  return _internal_has_stringclasslabels();
}
inline void NonMaximumSuppression::set_has_stringclasslabels() {
  _oneof_case_[1] = kStringClassLabels;
}
inline ::CoreML::Specification::StringVector* NonMaximumSuppression::release_stringclasslabels() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.NonMaximumSuppression.stringClassLabels)
  if (_internal_has_stringclasslabels()) {
    clear_has_ClassLabels();
      ::CoreML::Specification::StringVector* temp = ClassLabels_.stringclasslabels_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ClassLabels_.stringclasslabels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CoreML::Specification::StringVector& NonMaximumSuppression::_internal_stringclasslabels() const {
  return _internal_has_stringclasslabels()
      ? *ClassLabels_.stringclasslabels_
      : reinterpret_cast< ::CoreML::Specification::StringVector&>(::CoreML::Specification::_StringVector_default_instance_);
}
inline const ::CoreML::Specification::StringVector& NonMaximumSuppression::stringclasslabels() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.NonMaximumSuppression.stringClassLabels)
  return _internal_stringclasslabels();
}
inline ::CoreML::Specification::StringVector* NonMaximumSuppression::unsafe_arena_release_stringclasslabels() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CoreML.Specification.NonMaximumSuppression.stringClassLabels)
  if (_internal_has_stringclasslabels()) {
    clear_has_ClassLabels();
    ::CoreML::Specification::StringVector* temp = ClassLabels_.stringclasslabels_;
    ClassLabels_.stringclasslabels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NonMaximumSuppression::unsafe_arena_set_allocated_stringclasslabels(::CoreML::Specification::StringVector* stringclasslabels) {
  clear_ClassLabels();
  if (stringclasslabels) {
    set_has_stringclasslabels();
    ClassLabels_.stringclasslabels_ = stringclasslabels;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.NonMaximumSuppression.stringClassLabels)
}
inline ::CoreML::Specification::StringVector* NonMaximumSuppression::_internal_mutable_stringclasslabels() {
  if (!_internal_has_stringclasslabels()) {
    clear_ClassLabels();
    set_has_stringclasslabels();
    ClassLabels_.stringclasslabels_ = CreateMaybeMessage< ::CoreML::Specification::StringVector >(GetArenaForAllocation());
  }
  return ClassLabels_.stringclasslabels_;
}
inline ::CoreML::Specification::StringVector* NonMaximumSuppression::mutable_stringclasslabels() {
  ::CoreML::Specification::StringVector* _msg = _internal_mutable_stringclasslabels();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.NonMaximumSuppression.stringClassLabels)
  return _msg;
}

// .CoreML.Specification.Int64Vector int64ClassLabels = 101;
inline bool NonMaximumSuppression::_internal_has_int64classlabels() const {
  return ClassLabels_case() == kInt64ClassLabels;
}
inline bool NonMaximumSuppression::has_int64classlabels() const {
  return _internal_has_int64classlabels();
}
inline void NonMaximumSuppression::set_has_int64classlabels() {
  _oneof_case_[1] = kInt64ClassLabels;
}
inline ::CoreML::Specification::Int64Vector* NonMaximumSuppression::release_int64classlabels() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.NonMaximumSuppression.int64ClassLabels)
  if (_internal_has_int64classlabels()) {
    clear_has_ClassLabels();
      ::CoreML::Specification::Int64Vector* temp = ClassLabels_.int64classlabels_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ClassLabels_.int64classlabels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CoreML::Specification::Int64Vector& NonMaximumSuppression::_internal_int64classlabels() const {
  return _internal_has_int64classlabels()
      ? *ClassLabels_.int64classlabels_
      : reinterpret_cast< ::CoreML::Specification::Int64Vector&>(::CoreML::Specification::_Int64Vector_default_instance_);
}
inline const ::CoreML::Specification::Int64Vector& NonMaximumSuppression::int64classlabels() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.NonMaximumSuppression.int64ClassLabels)
  return _internal_int64classlabels();
}
inline ::CoreML::Specification::Int64Vector* NonMaximumSuppression::unsafe_arena_release_int64classlabels() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CoreML.Specification.NonMaximumSuppression.int64ClassLabels)
  if (_internal_has_int64classlabels()) {
    clear_has_ClassLabels();
    ::CoreML::Specification::Int64Vector* temp = ClassLabels_.int64classlabels_;
    ClassLabels_.int64classlabels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NonMaximumSuppression::unsafe_arena_set_allocated_int64classlabels(::CoreML::Specification::Int64Vector* int64classlabels) {
  clear_ClassLabels();
  if (int64classlabels) {
    set_has_int64classlabels();
    ClassLabels_.int64classlabels_ = int64classlabels;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.NonMaximumSuppression.int64ClassLabels)
}
inline ::CoreML::Specification::Int64Vector* NonMaximumSuppression::_internal_mutable_int64classlabels() {
  if (!_internal_has_int64classlabels()) {
    clear_ClassLabels();
    set_has_int64classlabels();
    ClassLabels_.int64classlabels_ = CreateMaybeMessage< ::CoreML::Specification::Int64Vector >(GetArenaForAllocation());
  }
  return ClassLabels_.int64classlabels_;
}
inline ::CoreML::Specification::Int64Vector* NonMaximumSuppression::mutable_int64classlabels() {
  ::CoreML::Specification::Int64Vector* _msg = _internal_mutable_int64classlabels();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.NonMaximumSuppression.int64ClassLabels)
  return _msg;
}

// double iouThreshold = 110;
inline void NonMaximumSuppression::clear_iouthreshold() {
  iouthreshold_ = 0;
}
inline double NonMaximumSuppression::_internal_iouthreshold() const {
  return iouthreshold_;
}
inline double NonMaximumSuppression::iouthreshold() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.NonMaximumSuppression.iouThreshold)
  return _internal_iouthreshold();
}
inline void NonMaximumSuppression::_internal_set_iouthreshold(double value) {
  
  iouthreshold_ = value;
}
inline void NonMaximumSuppression::set_iouthreshold(double value) {
  _internal_set_iouthreshold(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.NonMaximumSuppression.iouThreshold)
}

// double confidenceThreshold = 111;
inline void NonMaximumSuppression::clear_confidencethreshold() {
  confidencethreshold_ = 0;
}
inline double NonMaximumSuppression::_internal_confidencethreshold() const {
  return confidencethreshold_;
}
inline double NonMaximumSuppression::confidencethreshold() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.NonMaximumSuppression.confidenceThreshold)
  return _internal_confidencethreshold();
}
inline void NonMaximumSuppression::_internal_set_confidencethreshold(double value) {
  
  confidencethreshold_ = value;
}
inline void NonMaximumSuppression::set_confidencethreshold(double value) {
  _internal_set_confidencethreshold(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.NonMaximumSuppression.confidenceThreshold)
}

// string confidenceInputFeatureName = 200;
inline void NonMaximumSuppression::clear_confidenceinputfeaturename() {
  confidenceinputfeaturename_.ClearToEmpty();
}
inline const std::string& NonMaximumSuppression::confidenceinputfeaturename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.NonMaximumSuppression.confidenceInputFeatureName)
  return _internal_confidenceinputfeaturename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NonMaximumSuppression::set_confidenceinputfeaturename(ArgT0&& arg0, ArgT... args) {
 
 confidenceinputfeaturename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CoreML.Specification.NonMaximumSuppression.confidenceInputFeatureName)
}
inline std::string* NonMaximumSuppression::mutable_confidenceinputfeaturename() {
  std::string* _s = _internal_mutable_confidenceinputfeaturename();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.NonMaximumSuppression.confidenceInputFeatureName)
  return _s;
}
inline const std::string& NonMaximumSuppression::_internal_confidenceinputfeaturename() const {
  return confidenceinputfeaturename_.Get();
}
inline void NonMaximumSuppression::_internal_set_confidenceinputfeaturename(const std::string& value) {
  
  confidenceinputfeaturename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NonMaximumSuppression::_internal_mutable_confidenceinputfeaturename() {
  
  return confidenceinputfeaturename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NonMaximumSuppression::release_confidenceinputfeaturename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.NonMaximumSuppression.confidenceInputFeatureName)
  return confidenceinputfeaturename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NonMaximumSuppression::set_allocated_confidenceinputfeaturename(std::string* confidenceinputfeaturename) {
  if (confidenceinputfeaturename != nullptr) {
    
  } else {
    
  }
  confidenceinputfeaturename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), confidenceinputfeaturename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (confidenceinputfeaturename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    confidenceinputfeaturename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.NonMaximumSuppression.confidenceInputFeatureName)
}

// string coordinatesInputFeatureName = 201;
inline void NonMaximumSuppression::clear_coordinatesinputfeaturename() {
  coordinatesinputfeaturename_.ClearToEmpty();
}
inline const std::string& NonMaximumSuppression::coordinatesinputfeaturename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.NonMaximumSuppression.coordinatesInputFeatureName)
  return _internal_coordinatesinputfeaturename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NonMaximumSuppression::set_coordinatesinputfeaturename(ArgT0&& arg0, ArgT... args) {
 
 coordinatesinputfeaturename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CoreML.Specification.NonMaximumSuppression.coordinatesInputFeatureName)
}
inline std::string* NonMaximumSuppression::mutable_coordinatesinputfeaturename() {
  std::string* _s = _internal_mutable_coordinatesinputfeaturename();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.NonMaximumSuppression.coordinatesInputFeatureName)
  return _s;
}
inline const std::string& NonMaximumSuppression::_internal_coordinatesinputfeaturename() const {
  return coordinatesinputfeaturename_.Get();
}
inline void NonMaximumSuppression::_internal_set_coordinatesinputfeaturename(const std::string& value) {
  
  coordinatesinputfeaturename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NonMaximumSuppression::_internal_mutable_coordinatesinputfeaturename() {
  
  return coordinatesinputfeaturename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NonMaximumSuppression::release_coordinatesinputfeaturename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.NonMaximumSuppression.coordinatesInputFeatureName)
  return coordinatesinputfeaturename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NonMaximumSuppression::set_allocated_coordinatesinputfeaturename(std::string* coordinatesinputfeaturename) {
  if (coordinatesinputfeaturename != nullptr) {
    
  } else {
    
  }
  coordinatesinputfeaturename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coordinatesinputfeaturename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (coordinatesinputfeaturename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    coordinatesinputfeaturename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.NonMaximumSuppression.coordinatesInputFeatureName)
}

// string iouThresholdInputFeatureName = 202;
inline void NonMaximumSuppression::clear_iouthresholdinputfeaturename() {
  iouthresholdinputfeaturename_.ClearToEmpty();
}
inline const std::string& NonMaximumSuppression::iouthresholdinputfeaturename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.NonMaximumSuppression.iouThresholdInputFeatureName)
  return _internal_iouthresholdinputfeaturename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NonMaximumSuppression::set_iouthresholdinputfeaturename(ArgT0&& arg0, ArgT... args) {
 
 iouthresholdinputfeaturename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CoreML.Specification.NonMaximumSuppression.iouThresholdInputFeatureName)
}
inline std::string* NonMaximumSuppression::mutable_iouthresholdinputfeaturename() {
  std::string* _s = _internal_mutable_iouthresholdinputfeaturename();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.NonMaximumSuppression.iouThresholdInputFeatureName)
  return _s;
}
inline const std::string& NonMaximumSuppression::_internal_iouthresholdinputfeaturename() const {
  return iouthresholdinputfeaturename_.Get();
}
inline void NonMaximumSuppression::_internal_set_iouthresholdinputfeaturename(const std::string& value) {
  
  iouthresholdinputfeaturename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NonMaximumSuppression::_internal_mutable_iouthresholdinputfeaturename() {
  
  return iouthresholdinputfeaturename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NonMaximumSuppression::release_iouthresholdinputfeaturename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.NonMaximumSuppression.iouThresholdInputFeatureName)
  return iouthresholdinputfeaturename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NonMaximumSuppression::set_allocated_iouthresholdinputfeaturename(std::string* iouthresholdinputfeaturename) {
  if (iouthresholdinputfeaturename != nullptr) {
    
  } else {
    
  }
  iouthresholdinputfeaturename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iouthresholdinputfeaturename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (iouthresholdinputfeaturename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    iouthresholdinputfeaturename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.NonMaximumSuppression.iouThresholdInputFeatureName)
}

// string confidenceThresholdInputFeatureName = 203;
inline void NonMaximumSuppression::clear_confidencethresholdinputfeaturename() {
  confidencethresholdinputfeaturename_.ClearToEmpty();
}
inline const std::string& NonMaximumSuppression::confidencethresholdinputfeaturename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.NonMaximumSuppression.confidenceThresholdInputFeatureName)
  return _internal_confidencethresholdinputfeaturename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NonMaximumSuppression::set_confidencethresholdinputfeaturename(ArgT0&& arg0, ArgT... args) {
 
 confidencethresholdinputfeaturename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CoreML.Specification.NonMaximumSuppression.confidenceThresholdInputFeatureName)
}
inline std::string* NonMaximumSuppression::mutable_confidencethresholdinputfeaturename() {
  std::string* _s = _internal_mutable_confidencethresholdinputfeaturename();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.NonMaximumSuppression.confidenceThresholdInputFeatureName)
  return _s;
}
inline const std::string& NonMaximumSuppression::_internal_confidencethresholdinputfeaturename() const {
  return confidencethresholdinputfeaturename_.Get();
}
inline void NonMaximumSuppression::_internal_set_confidencethresholdinputfeaturename(const std::string& value) {
  
  confidencethresholdinputfeaturename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NonMaximumSuppression::_internal_mutable_confidencethresholdinputfeaturename() {
  
  return confidencethresholdinputfeaturename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NonMaximumSuppression::release_confidencethresholdinputfeaturename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.NonMaximumSuppression.confidenceThresholdInputFeatureName)
  return confidencethresholdinputfeaturename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NonMaximumSuppression::set_allocated_confidencethresholdinputfeaturename(std::string* confidencethresholdinputfeaturename) {
  if (confidencethresholdinputfeaturename != nullptr) {
    
  } else {
    
  }
  confidencethresholdinputfeaturename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), confidencethresholdinputfeaturename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (confidencethresholdinputfeaturename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    confidencethresholdinputfeaturename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.NonMaximumSuppression.confidenceThresholdInputFeatureName)
}

// string confidenceOutputFeatureName = 210;
inline void NonMaximumSuppression::clear_confidenceoutputfeaturename() {
  confidenceoutputfeaturename_.ClearToEmpty();
}
inline const std::string& NonMaximumSuppression::confidenceoutputfeaturename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.NonMaximumSuppression.confidenceOutputFeatureName)
  return _internal_confidenceoutputfeaturename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NonMaximumSuppression::set_confidenceoutputfeaturename(ArgT0&& arg0, ArgT... args) {
 
 confidenceoutputfeaturename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CoreML.Specification.NonMaximumSuppression.confidenceOutputFeatureName)
}
inline std::string* NonMaximumSuppression::mutable_confidenceoutputfeaturename() {
  std::string* _s = _internal_mutable_confidenceoutputfeaturename();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.NonMaximumSuppression.confidenceOutputFeatureName)
  return _s;
}
inline const std::string& NonMaximumSuppression::_internal_confidenceoutputfeaturename() const {
  return confidenceoutputfeaturename_.Get();
}
inline void NonMaximumSuppression::_internal_set_confidenceoutputfeaturename(const std::string& value) {
  
  confidenceoutputfeaturename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NonMaximumSuppression::_internal_mutable_confidenceoutputfeaturename() {
  
  return confidenceoutputfeaturename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NonMaximumSuppression::release_confidenceoutputfeaturename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.NonMaximumSuppression.confidenceOutputFeatureName)
  return confidenceoutputfeaturename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NonMaximumSuppression::set_allocated_confidenceoutputfeaturename(std::string* confidenceoutputfeaturename) {
  if (confidenceoutputfeaturename != nullptr) {
    
  } else {
    
  }
  confidenceoutputfeaturename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), confidenceoutputfeaturename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (confidenceoutputfeaturename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    confidenceoutputfeaturename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.NonMaximumSuppression.confidenceOutputFeatureName)
}

// string coordinatesOutputFeatureName = 211;
inline void NonMaximumSuppression::clear_coordinatesoutputfeaturename() {
  coordinatesoutputfeaturename_.ClearToEmpty();
}
inline const std::string& NonMaximumSuppression::coordinatesoutputfeaturename() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.NonMaximumSuppression.coordinatesOutputFeatureName)
  return _internal_coordinatesoutputfeaturename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NonMaximumSuppression::set_coordinatesoutputfeaturename(ArgT0&& arg0, ArgT... args) {
 
 coordinatesoutputfeaturename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CoreML.Specification.NonMaximumSuppression.coordinatesOutputFeatureName)
}
inline std::string* NonMaximumSuppression::mutable_coordinatesoutputfeaturename() {
  std::string* _s = _internal_mutable_coordinatesoutputfeaturename();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.NonMaximumSuppression.coordinatesOutputFeatureName)
  return _s;
}
inline const std::string& NonMaximumSuppression::_internal_coordinatesoutputfeaturename() const {
  return coordinatesoutputfeaturename_.Get();
}
inline void NonMaximumSuppression::_internal_set_coordinatesoutputfeaturename(const std::string& value) {
  
  coordinatesoutputfeaturename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NonMaximumSuppression::_internal_mutable_coordinatesoutputfeaturename() {
  
  return coordinatesoutputfeaturename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NonMaximumSuppression::release_coordinatesoutputfeaturename() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.NonMaximumSuppression.coordinatesOutputFeatureName)
  return coordinatesoutputfeaturename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NonMaximumSuppression::set_allocated_coordinatesoutputfeaturename(std::string* coordinatesoutputfeaturename) {
  if (coordinatesoutputfeaturename != nullptr) {
    
  } else {
    
  }
  coordinatesoutputfeaturename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coordinatesoutputfeaturename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (coordinatesoutputfeaturename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    coordinatesoutputfeaturename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.NonMaximumSuppression.coordinatesOutputFeatureName)
}

inline bool NonMaximumSuppression::has_SuppressionMethod() const {
  return SuppressionMethod_case() != SUPPRESSIONMETHOD_NOT_SET;
}
inline void NonMaximumSuppression::clear_has_SuppressionMethod() {
  _oneof_case_[0] = SUPPRESSIONMETHOD_NOT_SET;
}
inline bool NonMaximumSuppression::has_ClassLabels() const {
  return ClassLabels_case() != CLASSLABELS_NOT_SET;
}
inline void NonMaximumSuppression::clear_has_ClassLabels() {
  _oneof_case_[1] = CLASSLABELS_NOT_SET;
}
inline NonMaximumSuppression::SuppressionMethodCase NonMaximumSuppression::SuppressionMethod_case() const {
  return NonMaximumSuppression::SuppressionMethodCase(_oneof_case_[0]);
}
inline NonMaximumSuppression::ClassLabelsCase NonMaximumSuppression::ClassLabels_case() const {
  return NonMaximumSuppression::ClassLabelsCase(_oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NonMaximumSuppression_2eproto
