// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Imputer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Imputer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace CoreML {
namespace Specification {
class ImputerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Imputer> {
  public:
  double imputeddoublevalue_;
  ::google::protobuf::int64 imputedint64value_;
  ::google::protobuf::internal::ArenaStringPtr imputedstringvalue_;
  const ::CoreML::Specification::DoubleVector* imputeddoublearray_;
  const ::CoreML::Specification::Int64Vector* imputedint64array_;
  const ::CoreML::Specification::StringToDoubleMap* imputedstringdictionary_;
  const ::CoreML::Specification::Int64ToDoubleMap* imputedint64dictionary_;
  double replacedoublevalue_;
  ::google::protobuf::int64 replaceint64value_;
  ::google::protobuf::internal::ArenaStringPtr replacestringvalue_;
} _Imputer_default_instance_;

namespace protobuf_Imputer_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Imputer_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults();
  _Imputer_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::CoreML::Specification::protobuf_DataStructures_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_Imputer_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Imputer::kImputedDoubleValueFieldNumber;
const int Imputer::kImputedInt64ValueFieldNumber;
const int Imputer::kImputedStringValueFieldNumber;
const int Imputer::kImputedDoubleArrayFieldNumber;
const int Imputer::kImputedInt64ArrayFieldNumber;
const int Imputer::kImputedStringDictionaryFieldNumber;
const int Imputer::kImputedInt64DictionaryFieldNumber;
const int Imputer::kReplaceDoubleValueFieldNumber;
const int Imputer::kReplaceInt64ValueFieldNumber;
const int Imputer::kReplaceStringValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Imputer::Imputer()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Imputer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.Imputer)
}
Imputer::Imputer(const Imputer& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_ImputedValue();
  switch (from.ImputedValue_case()) {
    case kImputedDoubleValue: {
      set_imputeddoublevalue(from.imputeddoublevalue());
      break;
    }
    case kImputedInt64Value: {
      set_imputedint64value(from.imputedint64value());
      break;
    }
    case kImputedStringValue: {
      set_imputedstringvalue(from.imputedstringvalue());
      break;
    }
    case kImputedDoubleArray: {
      mutable_imputeddoublearray()->::CoreML::Specification::DoubleVector::MergeFrom(from.imputeddoublearray());
      break;
    }
    case kImputedInt64Array: {
      mutable_imputedint64array()->::CoreML::Specification::Int64Vector::MergeFrom(from.imputedint64array());
      break;
    }
    case kImputedStringDictionary: {
      mutable_imputedstringdictionary()->::CoreML::Specification::StringToDoubleMap::MergeFrom(from.imputedstringdictionary());
      break;
    }
    case kImputedInt64Dictionary: {
      mutable_imputedint64dictionary()->::CoreML::Specification::Int64ToDoubleMap::MergeFrom(from.imputedint64dictionary());
      break;
    }
    case IMPUTEDVALUE_NOT_SET: {
      break;
    }
  }
  clear_has_ReplaceValue();
  switch (from.ReplaceValue_case()) {
    case kReplaceDoubleValue: {
      set_replacedoublevalue(from.replacedoublevalue());
      break;
    }
    case kReplaceInt64Value: {
      set_replaceint64value(from.replaceint64value());
      break;
    }
    case kReplaceStringValue: {
      set_replacestringvalue(from.replacestringvalue());
      break;
    }
    case REPLACEVALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.Imputer)
}

void Imputer::SharedCtor() {
  clear_has_ImputedValue();
  clear_has_ReplaceValue();
  _cached_size_ = 0;
}

Imputer::~Imputer() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.Imputer)
  SharedDtor();
}

void Imputer::SharedDtor() {
  if (has_ImputedValue()) {
    clear_ImputedValue();
  }
  if (has_ReplaceValue()) {
    clear_ReplaceValue();
  }
}

void Imputer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Imputer& Imputer::default_instance() {
  protobuf_Imputer_2eproto::InitDefaults();
  return *internal_default_instance();
}

Imputer* Imputer::New(::google::protobuf::Arena* arena) const {
  Imputer* n = new Imputer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Imputer::clear_ImputedValue() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.Imputer)
  switch (ImputedValue_case()) {
    case kImputedDoubleValue: {
      // No need to clear
      break;
    }
    case kImputedInt64Value: {
      // No need to clear
      break;
    }
    case kImputedStringValue: {
      ImputedValue_.imputedstringvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kImputedDoubleArray: {
      delete ImputedValue_.imputeddoublearray_;
      break;
    }
    case kImputedInt64Array: {
      delete ImputedValue_.imputedint64array_;
      break;
    }
    case kImputedStringDictionary: {
      delete ImputedValue_.imputedstringdictionary_;
      break;
    }
    case kImputedInt64Dictionary: {
      delete ImputedValue_.imputedint64dictionary_;
      break;
    }
    case IMPUTEDVALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IMPUTEDVALUE_NOT_SET;
}

void Imputer::clear_ReplaceValue() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.Imputer)
  switch (ReplaceValue_case()) {
    case kReplaceDoubleValue: {
      // No need to clear
      break;
    }
    case kReplaceInt64Value: {
      // No need to clear
      break;
    }
    case kReplaceStringValue: {
      ReplaceValue_.replacestringvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case REPLACEVALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = REPLACEVALUE_NOT_SET;
}


void Imputer::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.Imputer)
  clear_ImputedValue();
  clear_ReplaceValue();
}

bool Imputer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.Imputer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double imputedDoubleValue = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          clear_ImputedValue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ImputedValue_.imputeddoublevalue_)));
          set_has_imputeddoublevalue();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 imputedInt64Value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          clear_ImputedValue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ImputedValue_.imputedint64value_)));
          set_has_imputedint64value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string imputedStringValue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imputedstringvalue()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->imputedstringvalue().data(), this->imputedstringvalue().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.Imputer.imputedStringValue"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.DoubleVector imputedDoubleArray = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imputeddoublearray()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.Int64Vector imputedInt64Array = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imputedint64array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.StringToDoubleMap imputedStringDictionary = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imputedstringdictionary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CoreML.Specification.Int64ToDoubleMap imputedInt64Dictionary = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imputedint64dictionary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double replaceDoubleValue = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          clear_ReplaceValue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ReplaceValue_.replacedoublevalue_)));
          set_has_replacedoublevalue();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 replaceInt64Value = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          clear_ReplaceValue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ReplaceValue_.replaceint64value_)));
          set_has_replaceint64value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string replaceStringValue = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replacestringvalue()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->replacestringvalue().data(), this->replacestringvalue().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.Imputer.replaceStringValue"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.Imputer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.Imputer)
  return false;
#undef DO_
}

void Imputer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.Imputer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double imputedDoubleValue = 1;
  if (has_imputeddoublevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->imputeddoublevalue(), output);
  }

  // int64 imputedInt64Value = 2;
  if (has_imputedint64value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->imputedint64value(), output);
  }

  // string imputedStringValue = 3;
  if (has_imputedstringvalue()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->imputedstringvalue().data(), this->imputedstringvalue().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CoreML.Specification.Imputer.imputedStringValue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->imputedstringvalue(), output);
  }

  // .CoreML.Specification.DoubleVector imputedDoubleArray = 4;
  if (has_imputeddoublearray()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *ImputedValue_.imputeddoublearray_, output);
  }

  // .CoreML.Specification.Int64Vector imputedInt64Array = 5;
  if (has_imputedint64array()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *ImputedValue_.imputedint64array_, output);
  }

  // .CoreML.Specification.StringToDoubleMap imputedStringDictionary = 6;
  if (has_imputedstringdictionary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *ImputedValue_.imputedstringdictionary_, output);
  }

  // .CoreML.Specification.Int64ToDoubleMap imputedInt64Dictionary = 7;
  if (has_imputedint64dictionary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *ImputedValue_.imputedint64dictionary_, output);
  }

  // double replaceDoubleValue = 11;
  if (has_replacedoublevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->replacedoublevalue(), output);
  }

  // int64 replaceInt64Value = 12;
  if (has_replaceint64value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->replaceint64value(), output);
  }

  // string replaceStringValue = 13;
  if (has_replacestringvalue()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->replacestringvalue().data(), this->replacestringvalue().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CoreML.Specification.Imputer.replaceStringValue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->replacestringvalue(), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.Imputer)
}

size_t Imputer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.Imputer)
  size_t total_size = 0;

  switch (ImputedValue_case()) {
    // double imputedDoubleValue = 1;
    case kImputedDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // int64 imputedInt64Value = 2;
    case kImputedInt64Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->imputedint64value());
      break;
    }
    // string imputedStringValue = 3;
    case kImputedStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imputedstringvalue());
      break;
    }
    // .CoreML.Specification.DoubleVector imputedDoubleArray = 4;
    case kImputedDoubleArray: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ImputedValue_.imputeddoublearray_);
      break;
    }
    // .CoreML.Specification.Int64Vector imputedInt64Array = 5;
    case kImputedInt64Array: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ImputedValue_.imputedint64array_);
      break;
    }
    // .CoreML.Specification.StringToDoubleMap imputedStringDictionary = 6;
    case kImputedStringDictionary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ImputedValue_.imputedstringdictionary_);
      break;
    }
    // .CoreML.Specification.Int64ToDoubleMap imputedInt64Dictionary = 7;
    case kImputedInt64Dictionary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *ImputedValue_.imputedint64dictionary_);
      break;
    }
    case IMPUTEDVALUE_NOT_SET: {
      break;
    }
  }
  switch (ReplaceValue_case()) {
    // double replaceDoubleValue = 11;
    case kReplaceDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // int64 replaceInt64Value = 12;
    case kReplaceInt64Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->replaceint64value());
      break;
    }
    // string replaceStringValue = 13;
    case kReplaceStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replacestringvalue());
      break;
    }
    case REPLACEVALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imputer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Imputer*>(&from));
}

void Imputer::MergeFrom(const Imputer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.Imputer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ImputedValue_case()) {
    case kImputedDoubleValue: {
      set_imputeddoublevalue(from.imputeddoublevalue());
      break;
    }
    case kImputedInt64Value: {
      set_imputedint64value(from.imputedint64value());
      break;
    }
    case kImputedStringValue: {
      set_imputedstringvalue(from.imputedstringvalue());
      break;
    }
    case kImputedDoubleArray: {
      mutable_imputeddoublearray()->::CoreML::Specification::DoubleVector::MergeFrom(from.imputeddoublearray());
      break;
    }
    case kImputedInt64Array: {
      mutable_imputedint64array()->::CoreML::Specification::Int64Vector::MergeFrom(from.imputedint64array());
      break;
    }
    case kImputedStringDictionary: {
      mutable_imputedstringdictionary()->::CoreML::Specification::StringToDoubleMap::MergeFrom(from.imputedstringdictionary());
      break;
    }
    case kImputedInt64Dictionary: {
      mutable_imputedint64dictionary()->::CoreML::Specification::Int64ToDoubleMap::MergeFrom(from.imputedint64dictionary());
      break;
    }
    case IMPUTEDVALUE_NOT_SET: {
      break;
    }
  }
  switch (from.ReplaceValue_case()) {
    case kReplaceDoubleValue: {
      set_replacedoublevalue(from.replacedoublevalue());
      break;
    }
    case kReplaceInt64Value: {
      set_replaceint64value(from.replaceint64value());
      break;
    }
    case kReplaceStringValue: {
      set_replacestringvalue(from.replacestringvalue());
      break;
    }
    case REPLACEVALUE_NOT_SET: {
      break;
    }
  }
}

void Imputer::CopyFrom(const Imputer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.Imputer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imputer::IsInitialized() const {
  return true;
}

void Imputer::Swap(Imputer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Imputer::InternalSwap(Imputer* other) {
  std::swap(ImputedValue_, other->ImputedValue_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(ReplaceValue_, other->ReplaceValue_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Imputer::GetTypeName() const {
  return "CoreML.Specification.Imputer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Imputer

// double imputedDoubleValue = 1;
bool Imputer::has_imputeddoublevalue() const {
  return ImputedValue_case() == kImputedDoubleValue;
}
void Imputer::set_has_imputeddoublevalue() {
  _oneof_case_[0] = kImputedDoubleValue;
}
void Imputer::clear_imputeddoublevalue() {
  if (has_imputeddoublevalue()) {
    ImputedValue_.imputeddoublevalue_ = 0;
    clear_has_ImputedValue();
  }
}
double Imputer::imputeddoublevalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.imputedDoubleValue)
  if (has_imputeddoublevalue()) {
    return ImputedValue_.imputeddoublevalue_;
  }
  return 0;
}
void Imputer::set_imputeddoublevalue(double value) {
  if (!has_imputeddoublevalue()) {
    clear_ImputedValue();
    set_has_imputeddoublevalue();
  }
  ImputedValue_.imputeddoublevalue_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.imputedDoubleValue)
}

// int64 imputedInt64Value = 2;
bool Imputer::has_imputedint64value() const {
  return ImputedValue_case() == kImputedInt64Value;
}
void Imputer::set_has_imputedint64value() {
  _oneof_case_[0] = kImputedInt64Value;
}
void Imputer::clear_imputedint64value() {
  if (has_imputedint64value()) {
    ImputedValue_.imputedint64value_ = GOOGLE_LONGLONG(0);
    clear_has_ImputedValue();
  }
}
::google::protobuf::int64 Imputer::imputedint64value() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.imputedInt64Value)
  if (has_imputedint64value()) {
    return ImputedValue_.imputedint64value_;
  }
  return GOOGLE_LONGLONG(0);
}
void Imputer::set_imputedint64value(::google::protobuf::int64 value) {
  if (!has_imputedint64value()) {
    clear_ImputedValue();
    set_has_imputedint64value();
  }
  ImputedValue_.imputedint64value_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.imputedInt64Value)
}

// string imputedStringValue = 3;
bool Imputer::has_imputedstringvalue() const {
  return ImputedValue_case() == kImputedStringValue;
}
void Imputer::set_has_imputedstringvalue() {
  _oneof_case_[0] = kImputedStringValue;
}
void Imputer::clear_imputedstringvalue() {
  if (has_imputedstringvalue()) {
    ImputedValue_.imputedstringvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_ImputedValue();
  }
}
const ::std::string& Imputer::imputedstringvalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.imputedStringValue)
  if (has_imputedstringvalue()) {
    return ImputedValue_.imputedstringvalue_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Imputer::set_imputedstringvalue(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.imputedStringValue)
  if (!has_imputedstringvalue()) {
    clear_ImputedValue();
    set_has_imputedstringvalue();
    ImputedValue_.imputedstringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ImputedValue_.imputedstringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.imputedStringValue)
}
#if LANG_CXX11
void Imputer::set_imputedstringvalue(::std::string&& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.imputedStringValue)
  if (!has_imputedstringvalue()) {
    clear_ImputedValue();
    set_has_imputedstringvalue();
    ImputedValue_.imputedstringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ImputedValue_.imputedstringvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.Imputer.imputedStringValue)
}
#endif
void Imputer::set_imputedstringvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_imputedstringvalue()) {
    clear_ImputedValue();
    set_has_imputedstringvalue();
    ImputedValue_.imputedstringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ImputedValue_.imputedstringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.Imputer.imputedStringValue)
}
void Imputer::set_imputedstringvalue(const char* value, size_t size) {
  if (!has_imputedstringvalue()) {
    clear_ImputedValue();
    set_has_imputedstringvalue();
    ImputedValue_.imputedstringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ImputedValue_.imputedstringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.Imputer.imputedStringValue)
}
::std::string* Imputer::mutable_imputedstringvalue() {
  if (!has_imputedstringvalue()) {
    clear_ImputedValue();
    set_has_imputedstringvalue();
    ImputedValue_.imputedstringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Imputer.imputedStringValue)
  return ImputedValue_.imputedstringvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Imputer::release_imputedstringvalue() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Imputer.imputedStringValue)
  if (has_imputedstringvalue()) {
    clear_has_ImputedValue();
    return ImputedValue_.imputedstringvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Imputer::set_allocated_imputedstringvalue(::std::string* imputedstringvalue) {
  if (!has_imputedstringvalue()) {
    ImputedValue_.imputedstringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_ImputedValue();
  if (imputedstringvalue != NULL) {
    set_has_imputedstringvalue();
    ImputedValue_.imputedstringvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        imputedstringvalue);
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Imputer.imputedStringValue)
}

// .CoreML.Specification.DoubleVector imputedDoubleArray = 4;
bool Imputer::has_imputeddoublearray() const {
  return ImputedValue_case() == kImputedDoubleArray;
}
void Imputer::set_has_imputeddoublearray() {
  _oneof_case_[0] = kImputedDoubleArray;
}
void Imputer::clear_imputeddoublearray() {
  if (has_imputeddoublearray()) {
    delete ImputedValue_.imputeddoublearray_;
    clear_has_ImputedValue();
  }
}
 const ::CoreML::Specification::DoubleVector& Imputer::imputeddoublearray() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.imputedDoubleArray)
  return has_imputeddoublearray()
      ? *ImputedValue_.imputeddoublearray_
      : ::CoreML::Specification::DoubleVector::default_instance();
}
::CoreML::Specification::DoubleVector* Imputer::mutable_imputeddoublearray() {
  if (!has_imputeddoublearray()) {
    clear_ImputedValue();
    set_has_imputeddoublearray();
    ImputedValue_.imputeddoublearray_ = new ::CoreML::Specification::DoubleVector;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Imputer.imputedDoubleArray)
  return ImputedValue_.imputeddoublearray_;
}
::CoreML::Specification::DoubleVector* Imputer::release_imputeddoublearray() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Imputer.imputedDoubleArray)
  if (has_imputeddoublearray()) {
    clear_has_ImputedValue();
    ::CoreML::Specification::DoubleVector* temp = ImputedValue_.imputeddoublearray_;
    ImputedValue_.imputeddoublearray_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Imputer::set_allocated_imputeddoublearray(::CoreML::Specification::DoubleVector* imputeddoublearray) {
  clear_ImputedValue();
  if (imputeddoublearray) {
    set_has_imputeddoublearray();
    ImputedValue_.imputeddoublearray_ = imputeddoublearray;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Imputer.imputedDoubleArray)
}

// .CoreML.Specification.Int64Vector imputedInt64Array = 5;
bool Imputer::has_imputedint64array() const {
  return ImputedValue_case() == kImputedInt64Array;
}
void Imputer::set_has_imputedint64array() {
  _oneof_case_[0] = kImputedInt64Array;
}
void Imputer::clear_imputedint64array() {
  if (has_imputedint64array()) {
    delete ImputedValue_.imputedint64array_;
    clear_has_ImputedValue();
  }
}
 const ::CoreML::Specification::Int64Vector& Imputer::imputedint64array() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.imputedInt64Array)
  return has_imputedint64array()
      ? *ImputedValue_.imputedint64array_
      : ::CoreML::Specification::Int64Vector::default_instance();
}
::CoreML::Specification::Int64Vector* Imputer::mutable_imputedint64array() {
  if (!has_imputedint64array()) {
    clear_ImputedValue();
    set_has_imputedint64array();
    ImputedValue_.imputedint64array_ = new ::CoreML::Specification::Int64Vector;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Imputer.imputedInt64Array)
  return ImputedValue_.imputedint64array_;
}
::CoreML::Specification::Int64Vector* Imputer::release_imputedint64array() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Imputer.imputedInt64Array)
  if (has_imputedint64array()) {
    clear_has_ImputedValue();
    ::CoreML::Specification::Int64Vector* temp = ImputedValue_.imputedint64array_;
    ImputedValue_.imputedint64array_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Imputer::set_allocated_imputedint64array(::CoreML::Specification::Int64Vector* imputedint64array) {
  clear_ImputedValue();
  if (imputedint64array) {
    set_has_imputedint64array();
    ImputedValue_.imputedint64array_ = imputedint64array;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Imputer.imputedInt64Array)
}

// .CoreML.Specification.StringToDoubleMap imputedStringDictionary = 6;
bool Imputer::has_imputedstringdictionary() const {
  return ImputedValue_case() == kImputedStringDictionary;
}
void Imputer::set_has_imputedstringdictionary() {
  _oneof_case_[0] = kImputedStringDictionary;
}
void Imputer::clear_imputedstringdictionary() {
  if (has_imputedstringdictionary()) {
    delete ImputedValue_.imputedstringdictionary_;
    clear_has_ImputedValue();
  }
}
 const ::CoreML::Specification::StringToDoubleMap& Imputer::imputedstringdictionary() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.imputedStringDictionary)
  return has_imputedstringdictionary()
      ? *ImputedValue_.imputedstringdictionary_
      : ::CoreML::Specification::StringToDoubleMap::default_instance();
}
::CoreML::Specification::StringToDoubleMap* Imputer::mutable_imputedstringdictionary() {
  if (!has_imputedstringdictionary()) {
    clear_ImputedValue();
    set_has_imputedstringdictionary();
    ImputedValue_.imputedstringdictionary_ = new ::CoreML::Specification::StringToDoubleMap;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Imputer.imputedStringDictionary)
  return ImputedValue_.imputedstringdictionary_;
}
::CoreML::Specification::StringToDoubleMap* Imputer::release_imputedstringdictionary() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Imputer.imputedStringDictionary)
  if (has_imputedstringdictionary()) {
    clear_has_ImputedValue();
    ::CoreML::Specification::StringToDoubleMap* temp = ImputedValue_.imputedstringdictionary_;
    ImputedValue_.imputedstringdictionary_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Imputer::set_allocated_imputedstringdictionary(::CoreML::Specification::StringToDoubleMap* imputedstringdictionary) {
  clear_ImputedValue();
  if (imputedstringdictionary) {
    set_has_imputedstringdictionary();
    ImputedValue_.imputedstringdictionary_ = imputedstringdictionary;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Imputer.imputedStringDictionary)
}

// .CoreML.Specification.Int64ToDoubleMap imputedInt64Dictionary = 7;
bool Imputer::has_imputedint64dictionary() const {
  return ImputedValue_case() == kImputedInt64Dictionary;
}
void Imputer::set_has_imputedint64dictionary() {
  _oneof_case_[0] = kImputedInt64Dictionary;
}
void Imputer::clear_imputedint64dictionary() {
  if (has_imputedint64dictionary()) {
    delete ImputedValue_.imputedint64dictionary_;
    clear_has_ImputedValue();
  }
}
 const ::CoreML::Specification::Int64ToDoubleMap& Imputer::imputedint64dictionary() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.imputedInt64Dictionary)
  return has_imputedint64dictionary()
      ? *ImputedValue_.imputedint64dictionary_
      : ::CoreML::Specification::Int64ToDoubleMap::default_instance();
}
::CoreML::Specification::Int64ToDoubleMap* Imputer::mutable_imputedint64dictionary() {
  if (!has_imputedint64dictionary()) {
    clear_ImputedValue();
    set_has_imputedint64dictionary();
    ImputedValue_.imputedint64dictionary_ = new ::CoreML::Specification::Int64ToDoubleMap;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Imputer.imputedInt64Dictionary)
  return ImputedValue_.imputedint64dictionary_;
}
::CoreML::Specification::Int64ToDoubleMap* Imputer::release_imputedint64dictionary() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Imputer.imputedInt64Dictionary)
  if (has_imputedint64dictionary()) {
    clear_has_ImputedValue();
    ::CoreML::Specification::Int64ToDoubleMap* temp = ImputedValue_.imputedint64dictionary_;
    ImputedValue_.imputedint64dictionary_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Imputer::set_allocated_imputedint64dictionary(::CoreML::Specification::Int64ToDoubleMap* imputedint64dictionary) {
  clear_ImputedValue();
  if (imputedint64dictionary) {
    set_has_imputedint64dictionary();
    ImputedValue_.imputedint64dictionary_ = imputedint64dictionary;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Imputer.imputedInt64Dictionary)
}

// double replaceDoubleValue = 11;
bool Imputer::has_replacedoublevalue() const {
  return ReplaceValue_case() == kReplaceDoubleValue;
}
void Imputer::set_has_replacedoublevalue() {
  _oneof_case_[1] = kReplaceDoubleValue;
}
void Imputer::clear_replacedoublevalue() {
  if (has_replacedoublevalue()) {
    ReplaceValue_.replacedoublevalue_ = 0;
    clear_has_ReplaceValue();
  }
}
double Imputer::replacedoublevalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.replaceDoubleValue)
  if (has_replacedoublevalue()) {
    return ReplaceValue_.replacedoublevalue_;
  }
  return 0;
}
void Imputer::set_replacedoublevalue(double value) {
  if (!has_replacedoublevalue()) {
    clear_ReplaceValue();
    set_has_replacedoublevalue();
  }
  ReplaceValue_.replacedoublevalue_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.replaceDoubleValue)
}

// int64 replaceInt64Value = 12;
bool Imputer::has_replaceint64value() const {
  return ReplaceValue_case() == kReplaceInt64Value;
}
void Imputer::set_has_replaceint64value() {
  _oneof_case_[1] = kReplaceInt64Value;
}
void Imputer::clear_replaceint64value() {
  if (has_replaceint64value()) {
    ReplaceValue_.replaceint64value_ = GOOGLE_LONGLONG(0);
    clear_has_ReplaceValue();
  }
}
::google::protobuf::int64 Imputer::replaceint64value() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.replaceInt64Value)
  if (has_replaceint64value()) {
    return ReplaceValue_.replaceint64value_;
  }
  return GOOGLE_LONGLONG(0);
}
void Imputer::set_replaceint64value(::google::protobuf::int64 value) {
  if (!has_replaceint64value()) {
    clear_ReplaceValue();
    set_has_replaceint64value();
  }
  ReplaceValue_.replaceint64value_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.replaceInt64Value)
}

// string replaceStringValue = 13;
bool Imputer::has_replacestringvalue() const {
  return ReplaceValue_case() == kReplaceStringValue;
}
void Imputer::set_has_replacestringvalue() {
  _oneof_case_[1] = kReplaceStringValue;
}
void Imputer::clear_replacestringvalue() {
  if (has_replacestringvalue()) {
    ReplaceValue_.replacestringvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_ReplaceValue();
  }
}
const ::std::string& Imputer::replacestringvalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.Imputer.replaceStringValue)
  if (has_replacestringvalue()) {
    return ReplaceValue_.replacestringvalue_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Imputer::set_replacestringvalue(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.replaceStringValue)
  if (!has_replacestringvalue()) {
    clear_ReplaceValue();
    set_has_replacestringvalue();
    ReplaceValue_.replacestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ReplaceValue_.replacestringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.replaceStringValue)
}
#if LANG_CXX11
void Imputer::set_replacestringvalue(::std::string&& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.Imputer.replaceStringValue)
  if (!has_replacestringvalue()) {
    clear_ReplaceValue();
    set_has_replacestringvalue();
    ReplaceValue_.replacestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ReplaceValue_.replacestringvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoreML.Specification.Imputer.replaceStringValue)
}
#endif
void Imputer::set_replacestringvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_replacestringvalue()) {
    clear_ReplaceValue();
    set_has_replacestringvalue();
    ReplaceValue_.replacestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ReplaceValue_.replacestringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.Imputer.replaceStringValue)
}
void Imputer::set_replacestringvalue(const char* value, size_t size) {
  if (!has_replacestringvalue()) {
    clear_ReplaceValue();
    set_has_replacestringvalue();
    ReplaceValue_.replacestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ReplaceValue_.replacestringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.Imputer.replaceStringValue)
}
::std::string* Imputer::mutable_replacestringvalue() {
  if (!has_replacestringvalue()) {
    clear_ReplaceValue();
    set_has_replacestringvalue();
    ReplaceValue_.replacestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.Imputer.replaceStringValue)
  return ReplaceValue_.replacestringvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Imputer::release_replacestringvalue() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.Imputer.replaceStringValue)
  if (has_replacestringvalue()) {
    clear_has_ReplaceValue();
    return ReplaceValue_.replacestringvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Imputer::set_allocated_replacestringvalue(::std::string* replacestringvalue) {
  if (!has_replacestringvalue()) {
    ReplaceValue_.replacestringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_ReplaceValue();
  if (replacestringvalue != NULL) {
    set_has_replacestringvalue();
    ReplaceValue_.replacestringvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        replacestringvalue);
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.Imputer.replaceStringValue)
}

bool Imputer::has_ImputedValue() const {
  return ImputedValue_case() != IMPUTEDVALUE_NOT_SET;
}
void Imputer::clear_has_ImputedValue() {
  _oneof_case_[0] = IMPUTEDVALUE_NOT_SET;
}
bool Imputer::has_ReplaceValue() const {
  return ReplaceValue_case() != REPLACEVALUE_NOT_SET;
}
void Imputer::clear_has_ReplaceValue() {
  _oneof_case_[1] = REPLACEVALUE_NOT_SET;
}
Imputer::ImputedValueCase Imputer::ImputedValue_case() const {
  return Imputer::ImputedValueCase(_oneof_case_[0]);
}
Imputer::ReplaceValueCase Imputer::ReplaceValue_case() const {
  return Imputer::ReplaceValueCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)
