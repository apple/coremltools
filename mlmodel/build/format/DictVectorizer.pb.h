// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DictVectorizer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DictVectorizer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DictVectorizer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "DataStructures.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DictVectorizer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DictVectorizer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace CoreML {
namespace Specification {
class DictVectorizer;
struct DictVectorizerDefaultTypeInternal;
extern DictVectorizerDefaultTypeInternal _DictVectorizer_default_instance_;
}  // namespace Specification
}  // namespace CoreML
PROTOBUF_NAMESPACE_OPEN
template<> ::CoreML::Specification::DictVectorizer* Arena::CreateMaybeMessage<::CoreML::Specification::DictVectorizer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CoreML {
namespace Specification {

// ===================================================================

class DictVectorizer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.DictVectorizer) */ {
 public:
  inline DictVectorizer() : DictVectorizer(nullptr) {}
  ~DictVectorizer() override;
  explicit constexpr DictVectorizer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DictVectorizer(const DictVectorizer& from);
  DictVectorizer(DictVectorizer&& from) noexcept
    : DictVectorizer() {
    *this = ::std::move(from);
  }

  inline DictVectorizer& operator=(const DictVectorizer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DictVectorizer& operator=(DictVectorizer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DictVectorizer& default_instance() {
    return *internal_default_instance();
  }
  enum MapCase {
    kStringToIndex = 1,
    kInt64ToIndex = 2,
    MAP_NOT_SET = 0,
  };

  static inline const DictVectorizer* internal_default_instance() {
    return reinterpret_cast<const DictVectorizer*>(
               &_DictVectorizer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DictVectorizer& a, DictVectorizer& b) {
    a.Swap(&b);
  }
  inline void Swap(DictVectorizer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DictVectorizer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DictVectorizer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DictVectorizer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DictVectorizer& from);
  void MergeFrom(const DictVectorizer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DictVectorizer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.DictVectorizer";
  }
  protected:
  explicit DictVectorizer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringToIndexFieldNumber = 1,
    kInt64ToIndexFieldNumber = 2,
  };
  // .CoreML.Specification.StringVector stringToIndex = 1;
  bool has_stringtoindex() const;
  private:
  bool _internal_has_stringtoindex() const;
  public:
  void clear_stringtoindex();
  const ::CoreML::Specification::StringVector& stringtoindex() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::StringVector* release_stringtoindex();
  ::CoreML::Specification::StringVector* mutable_stringtoindex();
  void set_allocated_stringtoindex(::CoreML::Specification::StringVector* stringtoindex);
  private:
  const ::CoreML::Specification::StringVector& _internal_stringtoindex() const;
  ::CoreML::Specification::StringVector* _internal_mutable_stringtoindex();
  public:
  void unsafe_arena_set_allocated_stringtoindex(
      ::CoreML::Specification::StringVector* stringtoindex);
  ::CoreML::Specification::StringVector* unsafe_arena_release_stringtoindex();

  // .CoreML.Specification.Int64Vector int64ToIndex = 2;
  bool has_int64toindex() const;
  private:
  bool _internal_has_int64toindex() const;
  public:
  void clear_int64toindex();
  const ::CoreML::Specification::Int64Vector& int64toindex() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::Int64Vector* release_int64toindex();
  ::CoreML::Specification::Int64Vector* mutable_int64toindex();
  void set_allocated_int64toindex(::CoreML::Specification::Int64Vector* int64toindex);
  private:
  const ::CoreML::Specification::Int64Vector& _internal_int64toindex() const;
  ::CoreML::Specification::Int64Vector* _internal_mutable_int64toindex();
  public:
  void unsafe_arena_set_allocated_int64toindex(
      ::CoreML::Specification::Int64Vector* int64toindex);
  ::CoreML::Specification::Int64Vector* unsafe_arena_release_int64toindex();

  void clear_Map();
  MapCase Map_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.DictVectorizer)
 private:
  class _Internal;
  void set_has_stringtoindex();
  void set_has_int64toindex();

  inline bool has_Map() const;
  inline void clear_has_Map();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MapUnion {
    constexpr MapUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CoreML::Specification::StringVector* stringtoindex_;
    ::CoreML::Specification::Int64Vector* int64toindex_;
  } Map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_DictVectorizer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DictVectorizer

// .CoreML.Specification.StringVector stringToIndex = 1;
inline bool DictVectorizer::_internal_has_stringtoindex() const {
  return Map_case() == kStringToIndex;
}
inline bool DictVectorizer::has_stringtoindex() const {
  return _internal_has_stringtoindex();
}
inline void DictVectorizer::set_has_stringtoindex() {
  _oneof_case_[0] = kStringToIndex;
}
inline ::CoreML::Specification::StringVector* DictVectorizer::release_stringtoindex() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.DictVectorizer.stringToIndex)
  if (_internal_has_stringtoindex()) {
    clear_has_Map();
      ::CoreML::Specification::StringVector* temp = Map_.stringtoindex_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Map_.stringtoindex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CoreML::Specification::StringVector& DictVectorizer::_internal_stringtoindex() const {
  return _internal_has_stringtoindex()
      ? *Map_.stringtoindex_
      : reinterpret_cast< ::CoreML::Specification::StringVector&>(::CoreML::Specification::_StringVector_default_instance_);
}
inline const ::CoreML::Specification::StringVector& DictVectorizer::stringtoindex() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.DictVectorizer.stringToIndex)
  return _internal_stringtoindex();
}
inline ::CoreML::Specification::StringVector* DictVectorizer::unsafe_arena_release_stringtoindex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CoreML.Specification.DictVectorizer.stringToIndex)
  if (_internal_has_stringtoindex()) {
    clear_has_Map();
    ::CoreML::Specification::StringVector* temp = Map_.stringtoindex_;
    Map_.stringtoindex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DictVectorizer::unsafe_arena_set_allocated_stringtoindex(::CoreML::Specification::StringVector* stringtoindex) {
  clear_Map();
  if (stringtoindex) {
    set_has_stringtoindex();
    Map_.stringtoindex_ = stringtoindex;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.DictVectorizer.stringToIndex)
}
inline ::CoreML::Specification::StringVector* DictVectorizer::_internal_mutable_stringtoindex() {
  if (!_internal_has_stringtoindex()) {
    clear_Map();
    set_has_stringtoindex();
    Map_.stringtoindex_ = CreateMaybeMessage< ::CoreML::Specification::StringVector >(GetArenaForAllocation());
  }
  return Map_.stringtoindex_;
}
inline ::CoreML::Specification::StringVector* DictVectorizer::mutable_stringtoindex() {
  ::CoreML::Specification::StringVector* _msg = _internal_mutable_stringtoindex();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.DictVectorizer.stringToIndex)
  return _msg;
}

// .CoreML.Specification.Int64Vector int64ToIndex = 2;
inline bool DictVectorizer::_internal_has_int64toindex() const {
  return Map_case() == kInt64ToIndex;
}
inline bool DictVectorizer::has_int64toindex() const {
  return _internal_has_int64toindex();
}
inline void DictVectorizer::set_has_int64toindex() {
  _oneof_case_[0] = kInt64ToIndex;
}
inline ::CoreML::Specification::Int64Vector* DictVectorizer::release_int64toindex() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.DictVectorizer.int64ToIndex)
  if (_internal_has_int64toindex()) {
    clear_has_Map();
      ::CoreML::Specification::Int64Vector* temp = Map_.int64toindex_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Map_.int64toindex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CoreML::Specification::Int64Vector& DictVectorizer::_internal_int64toindex() const {
  return _internal_has_int64toindex()
      ? *Map_.int64toindex_
      : reinterpret_cast< ::CoreML::Specification::Int64Vector&>(::CoreML::Specification::_Int64Vector_default_instance_);
}
inline const ::CoreML::Specification::Int64Vector& DictVectorizer::int64toindex() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.DictVectorizer.int64ToIndex)
  return _internal_int64toindex();
}
inline ::CoreML::Specification::Int64Vector* DictVectorizer::unsafe_arena_release_int64toindex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CoreML.Specification.DictVectorizer.int64ToIndex)
  if (_internal_has_int64toindex()) {
    clear_has_Map();
    ::CoreML::Specification::Int64Vector* temp = Map_.int64toindex_;
    Map_.int64toindex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DictVectorizer::unsafe_arena_set_allocated_int64toindex(::CoreML::Specification::Int64Vector* int64toindex) {
  clear_Map();
  if (int64toindex) {
    set_has_int64toindex();
    Map_.int64toindex_ = int64toindex;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.DictVectorizer.int64ToIndex)
}
inline ::CoreML::Specification::Int64Vector* DictVectorizer::_internal_mutable_int64toindex() {
  if (!_internal_has_int64toindex()) {
    clear_Map();
    set_has_int64toindex();
    Map_.int64toindex_ = CreateMaybeMessage< ::CoreML::Specification::Int64Vector >(GetArenaForAllocation());
  }
  return Map_.int64toindex_;
}
inline ::CoreML::Specification::Int64Vector* DictVectorizer::mutable_int64toindex() {
  ::CoreML::Specification::Int64Vector* _msg = _internal_mutable_int64toindex();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.DictVectorizer.int64ToIndex)
  return _msg;
}

inline bool DictVectorizer::has_Map() const {
  return Map_case() != MAP_NOT_SET;
}
inline void DictVectorizer::clear_has_Map() {
  _oneof_case_[0] = MAP_NOT_SET;
}
inline DictVectorizer::MapCase DictVectorizer::Map_case() const {
  return DictVectorizer::MapCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DictVectorizer_2eproto
