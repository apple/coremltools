// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AudioFeaturePrint.proto

#include "AudioFeaturePrint.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace CoreML {
namespace Specification {
namespace CoreMLModels {
constexpr AudioFeaturePrint_Sound::AudioFeaturePrint_Sound(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(0)
{}
struct AudioFeaturePrint_SoundDefaultTypeInternal {
  constexpr AudioFeaturePrint_SoundDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioFeaturePrint_SoundDefaultTypeInternal() {}
  union {
    AudioFeaturePrint_Sound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioFeaturePrint_SoundDefaultTypeInternal _AudioFeaturePrint_Sound_default_instance_;
constexpr AudioFeaturePrint::AudioFeaturePrint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AudioFeaturePrintDefaultTypeInternal {
  constexpr AudioFeaturePrintDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioFeaturePrintDefaultTypeInternal() {}
  union {
    AudioFeaturePrint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioFeaturePrintDefaultTypeInternal _AudioFeaturePrint_default_instance_;
}  // namespace CoreMLModels
}  // namespace Specification
}  // namespace CoreML
namespace CoreML {
namespace Specification {
namespace CoreMLModels {
bool AudioFeaturePrint_Sound_SoundVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AudioFeaturePrint_Sound_SoundVersion_strings[2] = {};

static const char AudioFeaturePrint_Sound_SoundVersion_names[] =
  "SOUND_VERSION_1"
  "SOUND_VERSION_INVALID";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AudioFeaturePrint_Sound_SoundVersion_entries[] = {
  { {AudioFeaturePrint_Sound_SoundVersion_names + 0, 15}, 1 },
  { {AudioFeaturePrint_Sound_SoundVersion_names + 15, 21}, 0 },
};

static const int AudioFeaturePrint_Sound_SoundVersion_entries_by_number[] = {
  1, // 0 -> SOUND_VERSION_INVALID
  0, // 1 -> SOUND_VERSION_1
};

const std::string& AudioFeaturePrint_Sound_SoundVersion_Name(
    AudioFeaturePrint_Sound_SoundVersion value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AudioFeaturePrint_Sound_SoundVersion_entries,
          AudioFeaturePrint_Sound_SoundVersion_entries_by_number,
          2, AudioFeaturePrint_Sound_SoundVersion_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AudioFeaturePrint_Sound_SoundVersion_entries,
      AudioFeaturePrint_Sound_SoundVersion_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AudioFeaturePrint_Sound_SoundVersion_strings[idx].get();
}
bool AudioFeaturePrint_Sound_SoundVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AudioFeaturePrint_Sound_SoundVersion* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AudioFeaturePrint_Sound_SoundVersion_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<AudioFeaturePrint_Sound_SoundVersion>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AudioFeaturePrint_Sound_SoundVersion AudioFeaturePrint_Sound::SOUND_VERSION_INVALID;
constexpr AudioFeaturePrint_Sound_SoundVersion AudioFeaturePrint_Sound::SOUND_VERSION_1;
constexpr AudioFeaturePrint_Sound_SoundVersion AudioFeaturePrint_Sound::SoundVersion_MIN;
constexpr AudioFeaturePrint_Sound_SoundVersion AudioFeaturePrint_Sound::SoundVersion_MAX;
constexpr int AudioFeaturePrint_Sound::SoundVersion_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class AudioFeaturePrint_Sound::_Internal {
 public:
};

AudioFeaturePrint_Sound::AudioFeaturePrint_Sound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
}
AudioFeaturePrint_Sound::AudioFeaturePrint_Sound(const AudioFeaturePrint_Sound& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
}

inline void AudioFeaturePrint_Sound::SharedCtor() {
version_ = 0;
}

AudioFeaturePrint_Sound::~AudioFeaturePrint_Sound() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void AudioFeaturePrint_Sound::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AudioFeaturePrint_Sound::ArenaDtor(void* object) {
  AudioFeaturePrint_Sound* _this = reinterpret_cast< AudioFeaturePrint_Sound* >(object);
  (void)_this;
}
void AudioFeaturePrint_Sound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioFeaturePrint_Sound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioFeaturePrint_Sound::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* AudioFeaturePrint_Sound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound.SoundVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_version(static_cast<::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound_SoundVersion>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioFeaturePrint_Sound::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound.SoundVersion version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  return target;
}

size_t AudioFeaturePrint_Sound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound.SoundVersion version = 1;
  if (this->_internal_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioFeaturePrint_Sound::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AudioFeaturePrint_Sound*>(
      &from));
}

void AudioFeaturePrint_Sound::MergeFrom(const AudioFeaturePrint_Sound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AudioFeaturePrint_Sound::CopyFrom(const AudioFeaturePrint_Sound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFeaturePrint_Sound::IsInitialized() const {
  return true;
}

void AudioFeaturePrint_Sound::InternalSwap(AudioFeaturePrint_Sound* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(version_, other->version_);
}

std::string AudioFeaturePrint_Sound::GetTypeName() const {
  return "CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound";
}


// ===================================================================

class AudioFeaturePrint::_Internal {
 public:
  static const ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound& sound(const AudioFeaturePrint* msg);
};

const ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound&
AudioFeaturePrint::_Internal::sound(const AudioFeaturePrint* msg) {
  return *msg->AudioFeaturePrintType_.sound_;
}
void AudioFeaturePrint::set_allocated_sound(::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* sound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_AudioFeaturePrintType();
  if (sound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>::GetOwningArena(sound);
    if (message_arena != submessage_arena) {
      sound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sound, submessage_arena);
    }
    set_has_sound();
    AudioFeaturePrintType_.sound_ = sound;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.CoreMLModels.AudioFeaturePrint.sound)
}
AudioFeaturePrint::AudioFeaturePrint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
}
AudioFeaturePrint::AudioFeaturePrint(const AudioFeaturePrint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_AudioFeaturePrintType();
  switch (from.AudioFeaturePrintType_case()) {
    case kSound: {
      _internal_mutable_sound()->::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::MergeFrom(from._internal_sound());
      break;
    }
    case AUDIOFEATUREPRINTTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
}

inline void AudioFeaturePrint::SharedCtor() {
clear_has_AudioFeaturePrintType();
}

AudioFeaturePrint::~AudioFeaturePrint() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void AudioFeaturePrint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_AudioFeaturePrintType()) {
    clear_AudioFeaturePrintType();
  }
}

void AudioFeaturePrint::ArenaDtor(void* object) {
  AudioFeaturePrint* _this = reinterpret_cast< AudioFeaturePrint* >(object);
  (void)_this;
}
void AudioFeaturePrint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioFeaturePrint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioFeaturePrint::clear_AudioFeaturePrintType() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  switch (AudioFeaturePrintType_case()) {
    case kSound: {
      if (GetArenaForAllocation() == nullptr) {
        delete AudioFeaturePrintType_.sound_;
      }
      break;
    }
    case AUDIOFEATUREPRINTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AUDIOFEATUREPRINTTYPE_NOT_SET;
}


void AudioFeaturePrint::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_AudioFeaturePrintType();
  _internal_metadata_.Clear<std::string>();
}

const char* AudioFeaturePrint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound sound = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_sound(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioFeaturePrint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound sound = 20;
  if (_internal_has_sound()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::sound(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  return target;
}

size_t AudioFeaturePrint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (AudioFeaturePrintType_case()) {
    // .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound sound = 20;
    case kSound: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *AudioFeaturePrintType_.sound_);
      break;
    }
    case AUDIOFEATUREPRINTTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioFeaturePrint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AudioFeaturePrint*>(
      &from));
}

void AudioFeaturePrint::MergeFrom(const AudioFeaturePrint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.AudioFeaturePrintType_case()) {
    case kSound: {
      _internal_mutable_sound()->::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::MergeFrom(from._internal_sound());
      break;
    }
    case AUDIOFEATUREPRINTTYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AudioFeaturePrint::CopyFrom(const AudioFeaturePrint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFeaturePrint::IsInitialized() const {
  return true;
}

void AudioFeaturePrint::InternalSwap(AudioFeaturePrint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(AudioFeaturePrintType_, other->AudioFeaturePrintType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string AudioFeaturePrint::GetTypeName() const {
  return "CoreML.Specification.CoreMLModels.AudioFeaturePrint";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CoreMLModels
}  // namespace Specification
}  // namespace CoreML
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* Arena::CreateMaybeMessage< ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound >(arena);
}
template<> PROTOBUF_NOINLINE ::CoreML::Specification::CoreMLModels::AudioFeaturePrint* Arena::CreateMaybeMessage< ::CoreML::Specification::CoreMLModels::AudioFeaturePrint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CoreML::Specification::CoreMLModels::AudioFeaturePrint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
