// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SoundAnalysisPreprocessing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SoundAnalysisPreprocessing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace CoreML {
namespace Specification {
namespace CoreMLModels {
class SoundAnalysisPreprocessing_VggishDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SoundAnalysisPreprocessing_Vggish> {
} _SoundAnalysisPreprocessing_Vggish_default_instance_;
class SoundAnalysisPreprocessingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SoundAnalysisPreprocessing> {
  public:
  const ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* vggish_;
} _SoundAnalysisPreprocessing_default_instance_;

namespace protobuf_SoundAnalysisPreprocessing_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _SoundAnalysisPreprocessing_Vggish_default_instance_.Shutdown();
  _SoundAnalysisPreprocessing_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SoundAnalysisPreprocessing_Vggish_default_instance_.DefaultConstruct();
  _SoundAnalysisPreprocessing_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_SoundAnalysisPreprocessing_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish)
}
SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish(const SoundAnalysisPreprocessing_Vggish& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish)
}

void SoundAnalysisPreprocessing_Vggish::SharedCtor() {
  _cached_size_ = 0;
}

SoundAnalysisPreprocessing_Vggish::~SoundAnalysisPreprocessing_Vggish() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish)
  SharedDtor();
}

void SoundAnalysisPreprocessing_Vggish::SharedDtor() {
}

void SoundAnalysisPreprocessing_Vggish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SoundAnalysisPreprocessing_Vggish& SoundAnalysisPreprocessing_Vggish::default_instance() {
  protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SoundAnalysisPreprocessing_Vggish* SoundAnalysisPreprocessing_Vggish::New(::google::protobuf::Arena* arena) const {
  SoundAnalysisPreprocessing_Vggish* n = new SoundAnalysisPreprocessing_Vggish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoundAnalysisPreprocessing_Vggish::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish)
}

bool SoundAnalysisPreprocessing_Vggish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish)
  return false;
#undef DO_
}

void SoundAnalysisPreprocessing_Vggish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish)
}

size_t SoundAnalysisPreprocessing_Vggish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoundAnalysisPreprocessing_Vggish::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SoundAnalysisPreprocessing_Vggish*>(&from));
}

void SoundAnalysisPreprocessing_Vggish::MergeFrom(const SoundAnalysisPreprocessing_Vggish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SoundAnalysisPreprocessing_Vggish::CopyFrom(const SoundAnalysisPreprocessing_Vggish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoundAnalysisPreprocessing_Vggish::IsInitialized() const {
  return true;
}

void SoundAnalysisPreprocessing_Vggish::Swap(SoundAnalysisPreprocessing_Vggish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoundAnalysisPreprocessing_Vggish::InternalSwap(SoundAnalysisPreprocessing_Vggish* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SoundAnalysisPreprocessing_Vggish::GetTypeName() const {
  return "CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoundAnalysisPreprocessing_Vggish

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoundAnalysisPreprocessing::kVggishFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoundAnalysisPreprocessing::SoundAnalysisPreprocessing()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing)
}
SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(const SoundAnalysisPreprocessing& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_SoundAnalysisPreprocessingType();
  switch (from.SoundAnalysisPreprocessingType_case()) {
    case kVggish: {
      mutable_vggish()->::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::MergeFrom(from.vggish());
      break;
    }
    case SOUNDANALYSISPREPROCESSINGTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing)
}

void SoundAnalysisPreprocessing::SharedCtor() {
  clear_has_SoundAnalysisPreprocessingType();
  _cached_size_ = 0;
}

SoundAnalysisPreprocessing::~SoundAnalysisPreprocessing() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing)
  SharedDtor();
}

void SoundAnalysisPreprocessing::SharedDtor() {
  if (has_SoundAnalysisPreprocessingType()) {
    clear_SoundAnalysisPreprocessingType();
  }
}

void SoundAnalysisPreprocessing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SoundAnalysisPreprocessing& SoundAnalysisPreprocessing::default_instance() {
  protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults();
  return *internal_default_instance();
}

SoundAnalysisPreprocessing* SoundAnalysisPreprocessing::New(::google::protobuf::Arena* arena) const {
  SoundAnalysisPreprocessing* n = new SoundAnalysisPreprocessing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoundAnalysisPreprocessing::clear_SoundAnalysisPreprocessingType() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing)
  switch (SoundAnalysisPreprocessingType_case()) {
    case kVggish: {
      delete SoundAnalysisPreprocessingType_.vggish_;
      break;
    }
    case SOUNDANALYSISPREPROCESSINGTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SOUNDANALYSISPREPROCESSINGTYPE_NOT_SET;
}


void SoundAnalysisPreprocessing::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing)
  clear_SoundAnalysisPreprocessingType();
}

bool SoundAnalysisPreprocessing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish vggish = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vggish()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing)
  return false;
#undef DO_
}

void SoundAnalysisPreprocessing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish vggish = 20;
  if (has_vggish()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, *SoundAnalysisPreprocessingType_.vggish_, output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing)
}

size_t SoundAnalysisPreprocessing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing)
  size_t total_size = 0;

  switch (SoundAnalysisPreprocessingType_case()) {
    // .CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish vggish = 20;
    case kVggish: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *SoundAnalysisPreprocessingType_.vggish_);
      break;
    }
    case SOUNDANALYSISPREPROCESSINGTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoundAnalysisPreprocessing::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SoundAnalysisPreprocessing*>(&from));
}

void SoundAnalysisPreprocessing::MergeFrom(const SoundAnalysisPreprocessing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.SoundAnalysisPreprocessingType_case()) {
    case kVggish: {
      mutable_vggish()->::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::MergeFrom(from.vggish());
      break;
    }
    case SOUNDANALYSISPREPROCESSINGTYPE_NOT_SET: {
      break;
    }
  }
}

void SoundAnalysisPreprocessing::CopyFrom(const SoundAnalysisPreprocessing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoundAnalysisPreprocessing::IsInitialized() const {
  return true;
}

void SoundAnalysisPreprocessing::Swap(SoundAnalysisPreprocessing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoundAnalysisPreprocessing::InternalSwap(SoundAnalysisPreprocessing* other) {
  std::swap(SoundAnalysisPreprocessingType_, other->SoundAnalysisPreprocessingType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SoundAnalysisPreprocessing::GetTypeName() const {
  return "CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoundAnalysisPreprocessing

// .CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish vggish = 20;
bool SoundAnalysisPreprocessing::has_vggish() const {
  return SoundAnalysisPreprocessingType_case() == kVggish;
}
void SoundAnalysisPreprocessing::set_has_vggish() {
  _oneof_case_[0] = kVggish;
}
void SoundAnalysisPreprocessing::clear_vggish() {
  if (has_vggish()) {
    delete SoundAnalysisPreprocessingType_.vggish_;
    clear_has_SoundAnalysisPreprocessingType();
  }
}
 const ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish& SoundAnalysisPreprocessing::vggish() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.vggish)
  return has_vggish()
      ? *SoundAnalysisPreprocessingType_.vggish_
      : ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::default_instance();
}
::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* SoundAnalysisPreprocessing::mutable_vggish() {
  if (!has_vggish()) {
    clear_SoundAnalysisPreprocessingType();
    set_has_vggish();
    SoundAnalysisPreprocessingType_.vggish_ = new ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.vggish)
  return SoundAnalysisPreprocessingType_.vggish_;
}
::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* SoundAnalysisPreprocessing::release_vggish() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.vggish)
  if (has_vggish()) {
    clear_has_SoundAnalysisPreprocessingType();
    ::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* temp = SoundAnalysisPreprocessingType_.vggish_;
    SoundAnalysisPreprocessingType_.vggish_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SoundAnalysisPreprocessing::set_allocated_vggish(::CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish* vggish) {
  clear_SoundAnalysisPreprocessingType();
  if (vggish) {
    set_has_vggish();
    SoundAnalysisPreprocessingType_.vggish_ = vggish;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.vggish)
}

bool SoundAnalysisPreprocessing::has_SoundAnalysisPreprocessingType() const {
  return SoundAnalysisPreprocessingType_case() != SOUNDANALYSISPREPROCESSINGTYPE_NOT_SET;
}
void SoundAnalysisPreprocessing::clear_has_SoundAnalysisPreprocessingType() {
  _oneof_case_[0] = SOUNDANALYSISPREPROCESSINGTYPE_NOT_SET;
}
SoundAnalysisPreprocessing::SoundAnalysisPreprocessingTypeCase SoundAnalysisPreprocessing::SoundAnalysisPreprocessingType_case() const {
  return SoundAnalysisPreprocessing::SoundAnalysisPreprocessingTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreMLModels
}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)
