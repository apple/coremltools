// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto2";


package jspb.circulartest;

message MessageField1 {
  optional int32 a = 1;
  optional MessageField2 b = 2;
}

message MessageField2 {
  optional int32 a = 1;
  optional MessageField1 b = 2;
}


message RepeatedMessageField1 {
  optional int32 a = 1;
  optional RepeatedMessageField2 b = 2;
}

message RepeatedMessageField2 {
  optional int32 a = 1;
  repeated RepeatedMessageField1 b = 2;
}

message MapField1 {
  optional int32 a = 1;
  optional MapField2 b = 2;
}

message MapField2 {
  optional int32 a = 1;
  map<int32, MapField1> b = 2;
}

message NestedMessage1 {
  optional NestedMessage2 b = 2;
  message NestedNestedMessage {
    optional int32 a = 1;
  }
}

message NestedMessage2 {
  optional int32 a = 1;
  optional NestedMessage1.NestedNestedMessage b = 2;
}

message NestedEnum1 {
  optional NestedEnum2 b = 2;
  enum NestedNestedEnum {
    UNDEFINED = 0;
    VALUE_1 = 1;
  }
}

message NestedEnum2 {
  optional int32 a = 1;
  optional NestedEnum1.NestedNestedEnum b = 2;
}

message ExtensionContainingType1 {
  optional int32 a = 1;
  optional ExtensionContainingType2 b = 2;
  extensions 99 to 100;
}

message ExtensionContainingType2 {
  optional int32 a = 1;
  extend ExtensionContainingType1 {
    optional int32 c = 99;
  }
}

message ExtensionField1 {
  optional int32 a = 1;
  optional ExtensionField2 b = 2;
}

message ExtensionField2 {
  optional int32 a = 1;
  extend ExtensionField3 {
    optional ExtensionField1 c = 99;
  }
}

message ExtensionField3 {
  extensions 99 to 100;
}
