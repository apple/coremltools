// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AudioFeaturePrint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AudioFeaturePrint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AudioFeaturePrint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AudioFeaturePrint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AudioFeaturePrint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace CoreML {
namespace Specification {
namespace CoreMLModels {
class AudioFeaturePrint;
struct AudioFeaturePrintDefaultTypeInternal;
extern AudioFeaturePrintDefaultTypeInternal _AudioFeaturePrint_default_instance_;
class AudioFeaturePrint_Sound;
struct AudioFeaturePrint_SoundDefaultTypeInternal;
extern AudioFeaturePrint_SoundDefaultTypeInternal _AudioFeaturePrint_Sound_default_instance_;
}  // namespace CoreMLModels
}  // namespace Specification
}  // namespace CoreML
PROTOBUF_NAMESPACE_OPEN
template<> ::CoreML::Specification::CoreMLModels::AudioFeaturePrint* Arena::CreateMaybeMessage<::CoreML::Specification::CoreMLModels::AudioFeaturePrint>(Arena*);
template<> ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* Arena::CreateMaybeMessage<::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CoreML {
namespace Specification {
namespace CoreMLModels {

enum AudioFeaturePrint_Sound_SoundVersion : int {
  AudioFeaturePrint_Sound_SoundVersion_SOUND_VERSION_INVALID = 0,
  AudioFeaturePrint_Sound_SoundVersion_SOUND_VERSION_1 = 1,
  AudioFeaturePrint_Sound_SoundVersion_AudioFeaturePrint_Sound_SoundVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AudioFeaturePrint_Sound_SoundVersion_AudioFeaturePrint_Sound_SoundVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AudioFeaturePrint_Sound_SoundVersion_IsValid(int value);
constexpr AudioFeaturePrint_Sound_SoundVersion AudioFeaturePrint_Sound_SoundVersion_SoundVersion_MIN = AudioFeaturePrint_Sound_SoundVersion_SOUND_VERSION_INVALID;
constexpr AudioFeaturePrint_Sound_SoundVersion AudioFeaturePrint_Sound_SoundVersion_SoundVersion_MAX = AudioFeaturePrint_Sound_SoundVersion_SOUND_VERSION_1;
constexpr int AudioFeaturePrint_Sound_SoundVersion_SoundVersion_ARRAYSIZE = AudioFeaturePrint_Sound_SoundVersion_SoundVersion_MAX + 1;

const std::string& AudioFeaturePrint_Sound_SoundVersion_Name(AudioFeaturePrint_Sound_SoundVersion value);
template<typename T>
inline const std::string& AudioFeaturePrint_Sound_SoundVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AudioFeaturePrint_Sound_SoundVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AudioFeaturePrint_Sound_SoundVersion_Name.");
  return AudioFeaturePrint_Sound_SoundVersion_Name(static_cast<AudioFeaturePrint_Sound_SoundVersion>(enum_t_value));
}
bool AudioFeaturePrint_Sound_SoundVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AudioFeaturePrint_Sound_SoundVersion* value);
// ===================================================================

class AudioFeaturePrint_Sound final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound) */ {
 public:
  inline AudioFeaturePrint_Sound() : AudioFeaturePrint_Sound(nullptr) {}
  ~AudioFeaturePrint_Sound() override;
  explicit constexpr AudioFeaturePrint_Sound(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioFeaturePrint_Sound(const AudioFeaturePrint_Sound& from);
  AudioFeaturePrint_Sound(AudioFeaturePrint_Sound&& from) noexcept
    : AudioFeaturePrint_Sound() {
    *this = ::std::move(from);
  }

  inline AudioFeaturePrint_Sound& operator=(const AudioFeaturePrint_Sound& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioFeaturePrint_Sound& operator=(AudioFeaturePrint_Sound&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AudioFeaturePrint_Sound& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioFeaturePrint_Sound* internal_default_instance() {
    return reinterpret_cast<const AudioFeaturePrint_Sound*>(
               &_AudioFeaturePrint_Sound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AudioFeaturePrint_Sound& a, AudioFeaturePrint_Sound& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioFeaturePrint_Sound* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioFeaturePrint_Sound* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioFeaturePrint_Sound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioFeaturePrint_Sound>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AudioFeaturePrint_Sound& from);
  void MergeFrom(const AudioFeaturePrint_Sound& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioFeaturePrint_Sound* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound";
  }
  protected:
  explicit AudioFeaturePrint_Sound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AudioFeaturePrint_Sound_SoundVersion SoundVersion;
  static constexpr SoundVersion SOUND_VERSION_INVALID =
    AudioFeaturePrint_Sound_SoundVersion_SOUND_VERSION_INVALID;
  static constexpr SoundVersion SOUND_VERSION_1 =
    AudioFeaturePrint_Sound_SoundVersion_SOUND_VERSION_1;
  static inline bool SoundVersion_IsValid(int value) {
    return AudioFeaturePrint_Sound_SoundVersion_IsValid(value);
  }
  static constexpr SoundVersion SoundVersion_MIN =
    AudioFeaturePrint_Sound_SoundVersion_SoundVersion_MIN;
  static constexpr SoundVersion SoundVersion_MAX =
    AudioFeaturePrint_Sound_SoundVersion_SoundVersion_MAX;
  static constexpr int SoundVersion_ARRAYSIZE =
    AudioFeaturePrint_Sound_SoundVersion_SoundVersion_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SoundVersion_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SoundVersion>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SoundVersion_Name.");
    return AudioFeaturePrint_Sound_SoundVersion_Name(enum_t_value);
  }
  static inline bool SoundVersion_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SoundVersion* value) {
    return AudioFeaturePrint_Sound_SoundVersion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound.SoundVersion version = 1;
  void clear_version();
  ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound_SoundVersion version() const;
  void set_version(::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound_SoundVersion value);
  private:
  ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound_SoundVersion _internal_version() const;
  void _internal_set_version(::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound_SoundVersion value);
  public:

  // @@protoc_insertion_point(class_scope:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AudioFeaturePrint_2eproto;
};
// -------------------------------------------------------------------

class AudioFeaturePrint final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.CoreMLModels.AudioFeaturePrint) */ {
 public:
  inline AudioFeaturePrint() : AudioFeaturePrint(nullptr) {}
  ~AudioFeaturePrint() override;
  explicit constexpr AudioFeaturePrint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioFeaturePrint(const AudioFeaturePrint& from);
  AudioFeaturePrint(AudioFeaturePrint&& from) noexcept
    : AudioFeaturePrint() {
    *this = ::std::move(from);
  }

  inline AudioFeaturePrint& operator=(const AudioFeaturePrint& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioFeaturePrint& operator=(AudioFeaturePrint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AudioFeaturePrint& default_instance() {
    return *internal_default_instance();
  }
  enum AudioFeaturePrintTypeCase {
    kSound = 20,
    AUDIOFEATUREPRINTTYPE_NOT_SET = 0,
  };

  static inline const AudioFeaturePrint* internal_default_instance() {
    return reinterpret_cast<const AudioFeaturePrint*>(
               &_AudioFeaturePrint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AudioFeaturePrint& a, AudioFeaturePrint& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioFeaturePrint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioFeaturePrint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioFeaturePrint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioFeaturePrint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AudioFeaturePrint& from);
  void MergeFrom(const AudioFeaturePrint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioFeaturePrint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoreML.Specification.CoreMLModels.AudioFeaturePrint";
  }
  protected:
  explicit AudioFeaturePrint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AudioFeaturePrint_Sound Sound;

  // accessors -------------------------------------------------------

  enum : int {
    kSoundFieldNumber = 20,
  };
  // .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound sound = 20;
  bool has_sound() const;
  private:
  bool _internal_has_sound() const;
  public:
  void clear_sound();
  const ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound& sound() const;
  PROTOBUF_NODISCARD ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* release_sound();
  ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* mutable_sound();
  void set_allocated_sound(::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* sound);
  private:
  const ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound& _internal_sound() const;
  ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* _internal_mutable_sound();
  public:
  void unsafe_arena_set_allocated_sound(
      ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* sound);
  ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* unsafe_arena_release_sound();

  void clear_AudioFeaturePrintType();
  AudioFeaturePrintTypeCase AudioFeaturePrintType_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.CoreMLModels.AudioFeaturePrint)
 private:
  class _Internal;
  void set_has_sound();

  inline bool has_AudioFeaturePrintType() const;
  inline void clear_has_AudioFeaturePrintType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union AudioFeaturePrintTypeUnion {
    constexpr AudioFeaturePrintTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* sound_;
  } AudioFeaturePrintType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_AudioFeaturePrint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AudioFeaturePrint_Sound

// .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound.SoundVersion version = 1;
inline void AudioFeaturePrint_Sound::clear_version() {
  version_ = 0;
}
inline ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound_SoundVersion AudioFeaturePrint_Sound::_internal_version() const {
  return static_cast< ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound_SoundVersion >(version_);
}
inline ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound_SoundVersion AudioFeaturePrint_Sound::version() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound.version)
  return _internal_version();
}
inline void AudioFeaturePrint_Sound::_internal_set_version(::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound_SoundVersion value) {
  
  version_ = value;
}
inline void AudioFeaturePrint_Sound::set_version(::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound_SoundVersion value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound.version)
}

// -------------------------------------------------------------------

// AudioFeaturePrint

// .CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound sound = 20;
inline bool AudioFeaturePrint::_internal_has_sound() const {
  return AudioFeaturePrintType_case() == kSound;
}
inline bool AudioFeaturePrint::has_sound() const {
  return _internal_has_sound();
}
inline void AudioFeaturePrint::set_has_sound() {
  _oneof_case_[0] = kSound;
}
inline void AudioFeaturePrint::clear_sound() {
  if (_internal_has_sound()) {
    if (GetArenaForAllocation() == nullptr) {
      delete AudioFeaturePrintType_.sound_;
    }
    clear_has_AudioFeaturePrintType();
  }
}
inline ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* AudioFeaturePrint::release_sound() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CoreMLModels.AudioFeaturePrint.sound)
  if (_internal_has_sound()) {
    clear_has_AudioFeaturePrintType();
      ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* temp = AudioFeaturePrintType_.sound_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    AudioFeaturePrintType_.sound_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound& AudioFeaturePrint::_internal_sound() const {
  return _internal_has_sound()
      ? *AudioFeaturePrintType_.sound_
      : reinterpret_cast< ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound&>(::CoreML::Specification::CoreMLModels::_AudioFeaturePrint_Sound_default_instance_);
}
inline const ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound& AudioFeaturePrint::sound() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CoreMLModels.AudioFeaturePrint.sound)
  return _internal_sound();
}
inline ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* AudioFeaturePrint::unsafe_arena_release_sound() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CoreML.Specification.CoreMLModels.AudioFeaturePrint.sound)
  if (_internal_has_sound()) {
    clear_has_AudioFeaturePrintType();
    ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* temp = AudioFeaturePrintType_.sound_;
    AudioFeaturePrintType_.sound_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioFeaturePrint::unsafe_arena_set_allocated_sound(::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* sound) {
  clear_AudioFeaturePrintType();
  if (sound) {
    set_has_sound();
    AudioFeaturePrintType_.sound_ = sound;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CoreML.Specification.CoreMLModels.AudioFeaturePrint.sound)
}
inline ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* AudioFeaturePrint::_internal_mutable_sound() {
  if (!_internal_has_sound()) {
    clear_AudioFeaturePrintType();
    set_has_sound();
    AudioFeaturePrintType_.sound_ = CreateMaybeMessage< ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound >(GetArenaForAllocation());
  }
  return AudioFeaturePrintType_.sound_;
}
inline ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* AudioFeaturePrint::mutable_sound() {
  ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound* _msg = _internal_mutable_sound();
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CoreMLModels.AudioFeaturePrint.sound)
  return _msg;
}

inline bool AudioFeaturePrint::has_AudioFeaturePrintType() const {
  return AudioFeaturePrintType_case() != AUDIOFEATUREPRINTTYPE_NOT_SET;
}
inline void AudioFeaturePrint::clear_has_AudioFeaturePrintType() {
  _oneof_case_[0] = AUDIOFEATUREPRINTTYPE_NOT_SET;
}
inline AudioFeaturePrint::AudioFeaturePrintTypeCase AudioFeaturePrint::AudioFeaturePrintType_case() const {
  return AudioFeaturePrint::AudioFeaturePrintTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoreMLModels
}  // namespace Specification
}  // namespace CoreML

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound_SoundVersion> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AudioFeaturePrint_2eproto
